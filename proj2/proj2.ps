%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: proj2.dvi
%%CreationDate: Mon Oct 30 10:08:18 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMR10 CMBX12 CMBX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter proj2.dvi -o proj2.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.30:1008
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 68 /D put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EEB5128796E
46CB0AF4B537987C2ED552B37D83F393222659DB735F2A293159AD84AF082B95
6F1454471FC36D805485D619D58FC53FBD6E3F72660ABA559B91ECDEFB267268
86A75650C3919962B0139409A29F5E3FA70B901CD5D2C49144778CFFF1D5B63E
099C92AABDAA73D54689812279C95FB7A4F7E840DD53DD3197A4E6D3099446FA
C0032FD40411E8F3300A8A8934B5216B01D916D41DDB32513DC4ACFCEFE43D6B
22FEF13D3567B047C6B35C477ACF2E172701FDB0FFFBE01DD58D7E54398EF4AF
DA5A404E194BCC39BEADEE5C76D7CD1E602793B950256F25871A9760C80B1EB4
D1E1179C390BC240DA061C9D539B20F4FCFB72DD0C1E860DEA2988E749819787
F04BA7A9CC3EDBF9CDE46895FE31EF0F8DEB63E295E8826BF920C8FEAE3B2080
8C98DC43DB22C6537028798198E2D3B0453ED725B774686310F635AE6153D9E1
8A0514882D4CCFE9D2D2465513E42E548F64A50ED78AEC9D62E0F9CF61EBFC9E
E8832D60E91796C916FAFE58F51818B80BBA52C1C06D94E602481654E5378C8D
137E3A872753CCDE4B2618C031CFB13EE91C91335441C434296DDEF61CDFBF8E
8FAF25DB3B6D6796FCCE2711938D605AAC00F0A58DD1A03FCE8732DE541E5E8A
41FC87E1FCA5CD9B5E8D63E7A7D6CEBA67D8A83EAFCF490DB7185AD55ED0F43F
9A1290E91C463895BD12E8A831DAD661E36E1B01ED4C112B8E1D0991D0294BB9
A13B7E9A8835B12A7133E834379B3477DAD425B7996592FB0395E3B4FEDADF4E
23A07F6C0E1387DD54F5C8BD071C4E9E4CC98C55882E29B65E5BED61B57EED93
07FAFD75CF3BB101D1529F83AA8234F70F342B0E531BF23E9A7D1FD112193CAA
4E377B44F94D9E990C22598C2AE33EA73BD0670A4A000DF78624CE01A25DB30E
22B0EE3FA892AF673E323BE5D63D0929903FB45F56B11CC718EF5A690A776E28
8BEED7010ADB1076B23257F9484533DB8D3E5253808D085F082F84A35063986A
42B5401B380E6BE5980537C58DB8E18E1A64A349847AB618233806F30D13DC8B
1A60616CB434CDE7436FBE5D662782E57E2ADC185C844E9F0246F8CA03BA8431
1B1C9F4083497EE7AF00BC8DA24BDD5BCB92885FD13546413127725F24B7CE97
F6FCF66C28E1A2617824D73C4F074BCDBD82DCA8322AFCDB2FDB8EA4B400826B
C0B7EDD8A201DD24445C7C712CC2B6476005CD54B4B48A9E304D4B6BB9689338
6573FF11C082CC9D5F9EE464683A6649D8EBF57C89305D2B977A6EC2FF53F988
21703295813331DA7761B1A0D2D5A58B5196251D74EE1703612D0E3E69521D8E
8AA7E1B98CA91327A7AA5795019F4ACEDC2C83B1E41CB378F0763921B9D65DF5
1227EB120E320A28F6A25A741D0C4F7211B5B5CC8AC0720358C97BCC4AB81B9C
29843447A7BFF606AD3C07E45A77B7B66BADBB6BC1E81DD5A5C2E7C8C4EF849D
B64B3BA95C5769D3EC89D7114137F8EE5D4D358A267105EDDA0E5BA91E6EF714
874953C2D492A4D74ED0BEC3FD837A1F26194C0B9A49BA8430491D66248801FA
6BFB48FED1A401EDAFBE8A3F9F871320D840B1BFDD84BE9DBDFD72C4D5B371CA
54AD62FF2C66804BCAB7DBCAC0796432D1EC32C188F311A187A99A471B34CBBF
380892D3B7FC2FC0842C0A5491130E312ED2800FF38CDC394D0A70836644A007
C860204D008E208E14C9C4948B498C36A651DFD7BFC5FC1ED6FBF217A07D1D4D
52E8720372AF7BC6CDC1DF41E2B44FD66E97391284D78EF2399E862A26ADEE69
54FBC1802B0C648C19916AD37E7DE3A988CE91C9A9F4D8F8B9ACFBFCA7EA73E1
EEC0550D4196130968AFB5284A29EE5DE4D5F76AF47BC15DB590BF871314CEF1
9D67CCD897B64F4CD261A09A37D37011B46093C2D7EFC7701CC06BA8CF87BB2C
8DD1D3396D774B6716C278816A9CA6F8E302F4CD994EC08C00AC6A66C51254F7
1286E85360A4837F6D2B047983D33B641B22597223BD9570D6C9F2B2584CCCF3
418C6E6D57B9012174562AF1BA130770B3E5124423B7A15057D51E82C519D06D
C96C93556C9D341262EBB6CC3B9E7FE4567823650657BCA4B67D2F3153EA0489
B845A6861E66432C2C1AC60C596F6C222C24B661713294A95BC93A85507348C0
8215013EDD085C3386D1D094605C22E58B9F9C3E9C6D2F7025A068592E57250F
65306A1666F002A9B36C608B6E3EEA4B909A11A824C2BA80DD28426CB762BA15
73E6C3EBE172C6FCD6B3EFF627203630AF2BD897DB3C7DD9D9FF86F3270D22EF
A230C261DA2FB591A3D5C55971A57F7F8B2CDBA530E9795CBE691C141A143280
C65FB90BDCA507EA99B3174459E7BF7EF4F9B66D92297DF3F70BF2211AF02304
5EA636F3EF79E0DF7604441B25D54F41728AD4F55B82A134FFECF6D0E875945F
756A506C6A23DB0B2B4D900C2026DB1B6B4EF1F7729CDB19741A7BC59728F662
699CB2A041BB1CDB218353614511C94DBDAEB63C14E485E551D928457A4AB841
9FE493A8295CEDC328DD4C7DB063969E609FF5DBA181C7AA942E5608125A5234
67C4C557248F3B06EE84CC55C6644EAC846D67209EADA1156070A37E84EF6379
19120BFE7A572CC27A7682331D8DACD55ECC31A8F9AF3DE2A1B694BE3E5F232E
DE39DBEA0DD68452244287402E0133CF7483C187C2359C53BC67BF6BEAD3F53F
2E44013AC51A9B29095C72ECF77FCF6306BA32E7E49F6E8D913B0E1DAC0BBAD1
1AD7C87F0F50D90EB4B9DA7D4C46854B9A7689725C667AB24E58422493C3E2B5
187E1F5817FDFC438BC105013E98919551610A02B65CA6766714F5D31DD9BAF4
540690DA2B78FB068DE2E095D74093F667F29DA30B90021B93B32A43E3B04B43
9089A73205352757D4B8D38813C1307B8277DC8FACF6B9B1004D9F6A61609D09
53E1E801DB6CCDC2CE722AB9532090DF2A276CE55B718685506393ECE1A1D8E7
2F00B7FE43F436DF11326A019889CBC27F1F51847FF9497415A173A29066622E
048751829C47D95D6F91227D3E4FB6FEE152DCB39F263514F9B38C75E1C2D619
C98D564900811EFC380B2A28D721CC66AE643A985F5D21E08B89E53EBFF0BD63
20731E7827171A12F686FA3E25A12F2216B403B64174412276C63931384CB9DC
9383D051DC9A9E103449A6C52CA92F7760754D8ECEA38E3DA9CC1BDAAEC60BB1
838EF0349D7B5D4433CCC5C58EFEB470656BE327D2B4AAAAD3F8FFD4048E0779
45AA3103DF4B8824B177A5C15B3F6D6A4BD80817FC43796DB9779DD54F86A9A0
7EF76849B68BC6F55573AFFC43811DD97AEB75FA0ECC52F8EF40BAF989CCAFC0
54E99D2B5083F405E21652EEB80DC22255A7689A824B564BC9BC0C250DB1E604
3E69C471372F68E0A6FB74FE1D66640CD961FF677CCE7B3B01281D181D6EC102
8274DD085C94BE283E09C204280C795ADC6E012CA96C8CC08E227E9B29367129
ADA6AEA938D6D46B8740A83A9D2086D7747A7EFA76F246022ED56930EFA84BF9
41358ED395BE836902ED1C5B5B24B9C4ECAA6AC17AE75C90A3AF6F99DB5E1A4C
B1BF6ADC9FEEEEFF2A9E2039DBC6D3543B0ED4337FD7A234D5215418E9ABECBF
9A4C300E09C5E993DD200FC6DC5566C0E80D251662532A3617C5AB633640DE4E
47ACD8F3DB2786841EFA4CB73E79E39290FF79E5BD4A151FC3FFCEEBA46DCD51
DF86350B0932EECFDE5B4A5C6A7200F402C2650C90911A4EBD51DAF1BE6E9348
2EC39711D329D1EE17450C277D5CA25406B334F3E3BE6177C3C4DD5601933621
A33B1B4FC4A198AB9252AE6263C8A68242F47F51DA8EE01A9F56D5621670906E
779A09F2EE7F6626FCCF8A6320183188E3CDA3E44433EE14D03F32D57693E52F
07EE548A41061B4918C364FBBEE3EFF311DEAA38ED4E45EF76D0836B6302B1D5
8E2DAB02C628657EDC71EBD82C13FAE204E5EF0B1807E40A8A129D226EF6C9DB
3251236B41DCC5400C79C96758F7C17CF630213C65DDD65C19D19E031851B45B
70C7D5A118F0A61665C33320527A6A334C1E87EC7978D94605398289B47C1BE2
B6FE84D9F485FAC00BB53DC040B43CF54CCCB2ED768EB7B2F4BC90DCEDAAEC89
825FD82F60016F74F5378BEDF4349C865197CAEDF5D9F081EF34781EF2BD82D8
8E81C610322F5D530ACA2C996AAA95D209FDFA01E1379F431C8646CA87678101
333321D8EE12BD1208D1C93DC15EE6E97FF06FE0FE87C80E62D74C65144E9759
61927C24045A0AD8526EC93454BE16BE333BF756F4F24088C0DBF837E847506C
7A5E2263337ABB9212AEDA345F46C05C7A73E4E5C5F6DB3B19CF321AED3D21E1
58EDDA88D7F0EF377187122F7075A79CE98D76D37398DB9EE33344FB9C737394
BBAB7A1CFB2896FAA93F3409B6FAAFCC4DA22355718BD949671202C7E128397C
60DB62B28BE4AE810AD4857EA7E1BA595A1AC401970227F47498D3B8A0DE2BDA
C36CC56DF1BB13E9FFE3DE3813BA73C2ED17D141CD183E5F70C838F67955C4BB
FA0660CE09F08B80038719FA0FF75540B03B443F4FCD50BDB7AC66FA90DAFE0D
FF67FAF2B6F8E417E056790EFCCB2D180D41BE687B567F2A8047BED3014CF51A
90A9FCFA68D4F4898D6F4D11B7110D3913E1295C9CF81D045B50E23C85ADE82A
C44E5D6E5DA78D5502AE1FE7C3C5C88991D4A92F27F5B2712609BB390544A876
988AECC3B5C440305BA8B0FCE5CD9AA6F76442C1A4CBCFEE466C7D489A78A837
E4D4069AA5E3D73F78E9ACED2D4395F96A2185481434931805A2CF6638AC4266
A59298E4F620D6006AC03676484665145F92492EBB94DE4774501A76DF4A9511
3E4FED1B205003431526C576FF925E651DC8C22194667BAB947591A38C4927AE
61B874092DA00F8BA622B89870112291C0E3ABA7E99297733A03B9B75C50D068
AD39B47BEBB6C14F0BC003595A7FB2811BAD8F6FD15E27B86B5AAF00C447C324
62A1C55370C10735A8721187A748F94177AD64D5F2553CCF4FCA584908B2DD03
0798B369B1C72B6B6DF17D64944D5564A9D495E7FC49D8A31B2183EC9332A9C1
6BBFAB6E6B7A4548DC05185F0DB503AEE94C4430FFF63DFF0384C544FDD57CB5
FF0E1E7836163FAAB0BC44463AAC5E8478C9BD67F42F74615F531E84D7C0AD69
179EA57757ED765F43D74F96142C85BDF9AFA31B9B8E62BD64AAA2435A1FE56C
55E60DB2E7DD05C3851EE185F84C2D4B4C0BE3B6D6EF00FE931D4F32886F5D10
5065BB8B591E6394D5EC5101AFEE7E6B2B3C12D10AB09891FD582DE79CB3B03F
8C35245B049265819E6F04016D331DF0F7337D9420DEE0D040CC8853F90A19FF
E2CE07B8F8B89A54CE867C9A9B1712AFE73164E74302702FEF19539813DF686F
E79FE1D3C53C923F480F1249D2744BF4815E5B8CEA1C65D86C1ED182021F394F
2F7C0052562FFEB7883DC852966AB41C8A5EBCF7DF0C284002176410A2FDE598
C7C216FF8CAFE78C14CBDBFF914E54F33E28EED83CC7F6277C8E57E186740FC2
30F4A1E5A442F13F6696FC51AC45767BD134F1FA22CC3126D549E03F6A13CDCE
8D54A032BF0090A423F1955F1F8B2D57C4A4BB68ACAC1E30CE19CD65B167EBE1
94DE5DCCE3C05BB2346B3EA73C1BD2AC9843C662E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 72 /H put
dup 77 /M put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB70011DEA7964F85F982CEC2725D5B9D4216BF9E2F30CCF6083EE113
F4E3CFE795F74543F4200C3EDE09E96878B084F2BAE1086390E93EE65123A945
6E30FFCB874AC82D87E52842A26DE934AA71AF9E567E58A5A6F7213DE3AE7F81
05031078614AE091F9F4945AB55682184100DE912E3A52815078BE8EE235D434
D9EB06AFD5CE4FBDEA8A27859EFAF97C6736A8352ADA6E6587527DD4B6FD89FF
56D0FF473CD890D30AB46D197B1778081A3FC8449717592D78CA8B3C90AD2AB3
528E7F851CBD8C2FD46E034A55CCDE16BC282179ED48C3673A8B8FD3FB2718D9
B5EB4C9307280F07296488002FA9CAB98AF8F987A957D8B3426256BB6298A143
0D876DB4E7B38F1235C21FE3D8820552B0924E7BB72CF2F5D1455B6C379C782F
9D553538312E6BCB6C82D61B1361B1958243585B612FEE53E46D237DC6FB7ECF
44AB99FC65121EF2B9525BEF9DE4EAE69DA6BC9B83049B7E896EC55D98E82E34
A6C33A5A5FA04A4A3289C756174E51FB46D01F2EB0FAA27D66577B8B78000B8B
454A293BDC3210B923E4E216A8C9165FA48823B5874E70761550F5BBFC6B50E5
371EBC2A5A355170B0D33CBD13F8EC66B1FFC2977E66A335809CCCBC1E0E1829
67446B235BB1ABE4F6EFD9507E4B1471A490BDC56CCB3A0DB677E182AB902BA1
7EB6FE0360D4596415486E6465C99E57991E0C393D20951479BB02A03CAB943D
9ADBE1FA696203763BA49C28E095673659BBA27C6DCBE4682ABB8C36437602F1
D8B438DEBAD36335CC14DD04B6D2E8E4E6EE7057B210AFD0012E874DD445EFE8
5AD4CB12F52F8379C2AAE8101AD7EDD4C65914B06812DB7A6C4860C3592551D7
323A6C449032E6A6827E5E41598CFF39CEEAF4A490E68F763901E05AB34064F1
2C43F8BBB184B0042B79DA36BE5C9C89468BD130C2D86CA891EB753E50268B94
F93F7F9E11871ECE63ADE258AEE970922CB52249871871BD55E5DDC52AD13018
DF35BF3FCFB5D783700DCEF7D5A2D050C29124F81E8E0E65D3F1B878FFBA776A
84013B7CB2ADE4794E02BB8B19224F9D4B124370FD5707742A4C3CE131D19FB1
73076E13A5E67A6CF42EF4218AD36A73E57D086F44757DEA7F4C695C87C1AE87
73F9C27DF1944EDF52EC79F9F479801F6D6A04856F9FF30F315628FAF76C18FC
E67192A2DEEC9CA66F6972AEEFCD5269501D2684263C7A5E9146C46B3711B121
3B975350F4B57DFD1A0631FB480FAA9D538643264F1F098A132635E835D2D74C
BB03093753A2A062C3F2DB719BBDFC5D71775CBE00FC950535B1E0B1B510F85B
3159D7E6E3B66D54E3FDDFF5552E3D8E6115DCA3C46BE6EC4BDA7282F3676318
248DD8C6131D03B2B3FFF4E74993D48BDA81389079E065F589DDC8914C7C9165
FD77355B3E0A54FA351CFFF9847FF72D5D4A6F89D2F2169DBFE79E3C66961495
5BA7A983A518906DF1BE58DB0F5A76960FEDC4B01F0DA18CFE315E877FFB5D75
81E2A4AB07D283706CD7A4EDE295BE8200618FDC3745B8BE651A010311F327A7
BB38932F184C36C3FDBC1F669A2B78CEC6476FFC36C7D44C3C6426FB7E63E1E7
2A23C4C11418086697DBAEA2B3D4AB2888F274F967722656757139926F962561
D8424BDC3D583832DDC6739C5ED6ADFC708ED6E750B52A6506790565A78E054D
0D13D9CD812CF1C3F3541DFF325BCB94E1170EBB78BA710B735A76BE37877AFC
82D9448D0A14A263C0AB574A825FE7BCE368425CBA32F9268CEDDD78A6A4A0D0
05BA10F71B34F4E008A8990BBACDDF85398F28FEB850555431C6A7ED4B69E23B
E7C65C506C2A8420AB3DD40B4313C1F5A1CA8A87C9A47CE33AFD9CAE19B39994
991F16DBE63192479A694BECC1C4B62A88CF03D55EEF3A2D1121C3F17F839300
369E38984C9398D2DA29D88109AA0DC51588FDAC03B885AEE0E55DFF9B9D8B0A
B8B8B1459B372FC83634EEAE50818E68DF974A31793E97805AB7F289DB9D33CA
DD4FD54A6E05BC1C79F8877678F912757C6AEA9755D9C5FBEC00074DA53D09A6
BD6549A52A6A59392DEEBB0D99030E38882B79C05C9E665E69B5BD9F982EFB05
8ECDF882ACEA19B38AFE79D5333DAFD682B2F77D908639AD931AD51C375096E6
C9138DDED4C5B6C51B4AD3E7170139E399E275AB8C8BED0667E4407ABB13610A
259246231F7FFB402BDC5B31632243AF1C9C0E972B493BF55ADADC4CF005D393
672A4C346498717FA7AF5E2C5EE45DB74DD91C00100DF2F9FE172E2664722E03
54C4BA00C00BA8CAF67836E05797160CA6CA7958F7E67E9854197A76C26A9A08
DBB67742FE277C9622DBCEB0124A5E7FE4D96A8B78DBB63EA100A9859E5B9E54
D9EE54834F36538C732E9E1498F1ECAC9A9861AC6ACEEA6757A75EAFDE452028
9C42302B42AA064D9058B5389CA88E1A9D6B3AEE8D107B49A9F664695E34B9A9
4D907B9EA99B36992C18DB678D95BD03A43B01791BB2916BCEA6040CFC65DE8A
ACD22CF2598D81E473357A7135A597BFF7F3AF7037C45109CBD640D1E73658E6
1DC2AC3DCC65C19969C43CF9AD75DEE9C3546FB1F745FAE980E06FA6DBC92F10
139A6F5FBA4A69A2A5CD7217FF550015B5CE8D18E89E6A94AC62BB8D3E3A4CC9
B7D6E02C38F090CD5ABFFA6F0E37EB9B9D41E78A3F4DAF504B5DB534D201C9D0
BBAE9846D08A3C536EBC15D59D3753EC33D52EA7CC70280580BF56874E12729F
59FAD2DF8E8C545F8FE080EAF56DBE67DF60D816D7C719E4C953290A85D4EEED
2BE6A7FC8C8E07F8AC9517C3562E1DCCE5618AA4FB1942D1A7131164E73AA405
A741376F53DB69AB914977CE55B17ADFF15CCF96DD185ECEEDDACA29EE0AFC94
242F331126C8448D105049A42D678121025E15E7C575D786DFFEA190F1F057AE
B803C53F2F7279A42B5C1B9B096E0BA7A3B443DBC535E79C196808E4DBA7C55D
3088DECA61C9D8A5B018E06669AB7DD9CE0C778599803E5BAF27CCF80CE29FE4
3303FD068B55B956FB4D536F6A6FB18DA1C9ED75522DD01CADA69D64C298CE1F
D98783F2A3C066FCEB7E326B8E2A6BF65CB3315457A9424F8427F48929F996D3
315177010965CECE3B75AA03F9EAF8C6FBA413ABC59B16B6B4566A04B5258D72
718DA08AC87465E279DF7FD5B814F97F71DFC19579343565B6755CFECD5AD529
45D512E2DB4124DA6B6ABF53EDB0D59E0B6B9BBFFF6B40FCC7F87C4D4C8E157A
A9F5D835DD04F63240A214F4AA913954101CA7A17DE5836473847A941E567412
8BD68942ADF634BC9327D998726B9E68696DC50966266F5DC52CDB32A0AD328E
19991D1FF829D39133CF213941877C700D61E78163E8EA84020C8531E0249618
EB26AB0DA9A2F2F6CA30F5805390CA7CA3FED0D4626440F22EA82C128CE45E37
F6E565976534882046105080D073428F14156A2604D9760581306111FCEED6A0
7050ADB4AA6D71A6204C5DE4139406A57EA9D32DC5B6E2668296BB10BF203C52
BB21EAF6843B19C042BAB2BAB9A3AB43901D388851455184EC3C43E8488F144D
D614728AB3079C068C839E952B5C5BCDFAB17CB090A1D036CE414B0CD7F922A3
9D0F238B69431AE6132C03D97E1EDCF361C746A75E217CF7BC229EAA98309EBD
8A8245980C2A3F04CC9F97B0E2650A87D63A9B765B13F8A33406F57B7C07BA0D
B01FB932D8E23143D3B2A6D6DDE4DE9FC6F6D53C3B3C7C6EBB8FD38A88415C3C
EC50BA005DC8A79362A6CD41DF8B2B0A0A1D7D685626A5D9200782182F24BCDA
9CE9B5D996E85EFE17A27ED7BB55A1617AAA5FE7F2B9767FEB61E3496C763C91
6EE5025E38E6444C6C8F8956A8603E807F5FF6374EA3980C30A379DE119B1403
C2AF19AE74008E204D00031D1B2C1A6AA22BDEF61E54A9A829833F335161A50B
C24FBE195890940FC0E09DCC17B38675D7E889902A15A138DC57475F83693A7B
AB055F0E9E41E7F5FDC1FB4A96AD7F35C26CF7822D74C9D47E34668FCD65377C
DB6D4D70D7D4300D8969DBC95B904B8AECCEE1112EEFD2C646E08BF55C92CB24
357CE001F9974053BB619FA6C38D9D2730DADB1B5F0AEF1CDB8361BE8C6A1519
1337952547C587BD68C5E4C61DB473AF204CDE6F40CCEF1D1E55DB1D0BB3FC2B
C3EFD5B2A5BDA1FA591072FF42E60098359E7F4DAD4629F6F29FF302B86A8966
6EC0F961CB70D0913CBE46FDF09B16403560B21600270F72D111913A0E5DFB15
BAFBCB614A089FF35BEBF0B9C796F83F557F12A6149D5C8565581C3761BD6EA1
80967BD1F28CC5732135718B22822DC3C62D7699E68CB073476F8194807F5845
B8F3D250367DBD1D0F7E839A564E10742D6E51F0C81BFEE938F2E036474A2C90
E75B676E4A41F95108F3FF12C98F5E52EA5D5E38F1F688C250534D69E46E2042
71AD6B6F9F42D05A919A545EC2F6182C8E27C354AFBF1E9B803DC032610EC4A9
7842BB95CD72611027AE69B3EF1EBA50EE11B1777CC751BBA71E7FB93CF62730
852CD7C1489322D89F3023000E50BF681A0115931042EC1856B3ACF694F65602
7EEE9A02DC747E6C103817D3511AE0F6551022A825E854AD5EF305AA18B6500A
189863BFE37C2D019173BF64469413E7B8A69F60AC51E1B692DFEBA223E98B3F
D1936C634F3F8A355CE3977F6219FB3257EFC22C271A374D9563A38DD899F3D1
2A9FD71FFCADB5DCA73CB541E18E1BDA2E1040449EBDE8D046288F737DF3523E
903B07E49DB5F8EC070DF704FA4C987EFBFB8FA394C0F843D626EB3062BCD28D
D045E4EA3442B702AAC693B5D6CF1A49E4F8B3C1DF20640B62BCA3443A22714C
9770EB7B89D976A420C5EBB54DA644B4237F797AF8C38CA8468E6167C820FDC0
B5518E234A7C62C9C6361CBDC1931CC49EF4A5950DACFF93478BBA755B2143F4
4D5C9E26C8B1FBC1731CD7FDEBEFB42E041E3F9BB132392A10B5153E57367638
DAA04E8174E5BC2EF308BD8D2C591115BBFEA3543380179FB8C9B1380A7D6D0C
C7E4A270AFF75174E1CF56DA178A206EB5BAD32599825248A2C0782A9C1C653B
9DC038F9585A4ED0A60AE6D28589988B66576DA23E71D9CDEB063F4E4C22A4AF
97E14C9DE86A612148A466450AC31678D4CA7DAAE4C04334F9D318CA0DFF073C
08DEB27DC2E9D5A26BB7EE9E43B07DFBBA63679052137835F13FBDCF3629CFED
AA3A3996D7106619B131C3858B2263C93EB480547B7848923B00143AF2DA83B9
0B0B975ADD3A053015038C606421FCC6DBEB128906567BA563947434E13C7393
178CBBA4F515B60E784ECFF9B53C4B4C791163227BA6A9DA04DF630C108DDF26
B18117EEBDB3F9DCFF77F6018025A4D1A843AE5E554BBB2A9D36719AA6BBFC11
59A604DB7C76964C93C1732B975BA5CA918A20E82EDC879F9AA9B8DD03C9FD03
ED5117BC6A80282ED87DDC972BE80066CE8C5B4270F6A9C9EB60081FA8AAB6C5
6D67C50C7898EA3E31ABD90DAB62A0C427EB056AB661965682C3742E59B39CFD
6D255118EEB1BCE21CC55FFCB4FA21A8BC24C623C52E73B1A2E3B1FF26ECCB66
ECE0E20F1999315B6D78C3B260727464C700F3B6B98A1CA199A7F1A611076870
F5998D01628140F1F2BA5DE4B8C3C90624E8E9DB5B7559D3E5E70F4B62FFDAA3
8E982BC5C4675B9B998CBDC51BEB02847A37C6C64D675FD890C695BC2882ED4E
56B839A3A038A7E9886CAB815B423A391E085652D0BCB01A5AB389ACD0FE5A2F
658706906FAB3F0AF21A046732535A80738A5FFB5105F5D7D0EFC45AA8F30F47
72F5CB2C9FB0B7A7D5476BCE9D5D35CC3BCA2613F682A2B590FB2AC62D0F5C1C
69B28223FEEE2E8070C65295D7C609E94AEA73750E62069BC64A8EB7222DF688
0E0DD82E45AF0A4A2BEA01FA2BCF96345669569D87A56B7110DABA1027C022AA
890620BF249A218D5C7ECF44D28545D78653425AD6746B04C1C858284296C987
901C45FEE7897D7EA7C52D4C4B88DED4F4BADB048E8A3BA62EA96CD1E7942E62
EE40C9709B3BACCEE70BCD2F5BC5510205616C61712B80336C3D5D7FEFB4A5E8
7BB9F070B077F4F7BCB904108FCFB9E570686B73A14F904FA240AF1B4CDA6C1A
40101B0DB0247D43BE25A682C39517F1A309BF72E05B9AB84BB16794C1E5BE4D
E10615AFA4B59E4E831814B52908360586BDB0D3C12A9174DC791139124963A5
47CADAC062ECE00AF0E4190C8B7BB11ACEA2F115857DACD64BBED0FD4743CCBE
9AD43743924B3F489B0536CF1363483DFA2E170408011E21AA7F4020014BC0CF
8379E135F7D8EB7011A699E435105A0184D152C1BD3F4514A9467B9D4D90C82B
36EA0AFD604C8E7389D04EBAC61CC0A8E0E290B75928026CF54941EC91F0A908
3FD100A05C3CE797B9A3F992BD12B1542B3E1AE56268B7E2BCFA854C11BE35EF
5772519358E33FB826306CDA395E31794580D489BAC6334D37525AA6613EB891
E67A3D6645F8E827505B27AD12B9143127CB50E9349D9ED3BECFA2BE52401654
C7C9A9958EC7D85115FA56A3F25355479238841478A60F63BAE986CBEF26790E
A7C36F9C54E26CB1ECA597E576FE0BE12410E33B3460989C04C4B8F2D5AEF8A3
F0E46C8B098E0095F971EB11DFC047D437397C6A55C06828B09B56D96FC81ABA
C79FFC9224BB10D357AC2D8AFC166557BCC363A9E3FE1B17A4644890341B213A
7E938349E71D52B4D75D0D8A83CD98DE03B86F0931C7B142C1F7EDA3854D1D6C
85D9C8E5A398EA70694BF4ED52B4AB5A787684955526E21D800446D63DC8FB48
9B91723A8CCFABEF8DD004E8985513BB0D0C48403BC499AFB5585D2224A310DA
3757888A8E6ACCFB8B5E30DE7FAC2318C65EB6674CB7BA686E8120CAFD3212C9
62F32A599B2D11850A2F300D7489CC7C92B5C9AE857489AE57EBF4D44C3CFC2E
8994A16B2A4C0FCCAFE83B3069ABBA8468A020FB977E067F817771658E96CAA0
8C4534F3BBD6BBE7AA88C01365F63D023B7263E497C182FB2CDE0E31C58D1FBE
4776F7691710D6D8DD7409F6A16E3211216A0728EA12A474B10A478AAE8A0781
BA2970588EAF264DC7B691C34F99B2501C4E506EF557AF022B0B5649BFBB50DA
A1C7B49ABEEA42DEFAC6366746BA7B7BBCA1E0E2418F14DFA58B92A88F20AFBC
5C02B2A3053F66D7C56451B258C8A20AE6D98514338F0E1DE13371A453BD5E28
8362B3FA5B8A6DE5C8915DB727EF3DCD1C028FC00A992D3685B7B13A6A3DA5F4
02D2AC636924FFADFE82D2DBE7D51790CA8A22255FDE13DFA52FDDA168EB80B7
C0F5666A8C5C8F65EA085E7BAE8BE6A6457E8E3525A205D4EEC3CA1FEE1CD15C
30D8B289170C9DBF96D04A75C1F4DE21370DE9FB1C8BFB438DCD7B46748D5EAB
4FE3CFCF4C0E9B462672FA9BAABB4AF763EECCA28D26668A0E168F4B7B900760
5EDC8B5A204A4D157FB8B5299D2374D4A2115B7CE747F25769D715DEAC991E7F
5C9683B9F35902F7534E00BFEE28D11A9B0B8DC488D1BC10AF28696A1CD7306F
E9453C6C1CF3F252876CE2E91BD22F84165452FFB76CBB8334BA5E62AEA98408
57B82276680933678A62E1C32736B8C15214B9754B68913962D3988AF933B562
111AFAB756A1919FEFA9AF42F761F72A83C964BA8302C3AEC93A38455B2BB2F8
40A0DEEC332FF33BBC9377F1DF581F1BAD7B958EDDCAF50F763A9498D1E94B47
A9EA26C28EDA2DF5711C28F4F76E2923147437D3E1FC10D19CC0BCE7EF24CB41
CA2F514B491BD5BC70B1CF6BAAF5F8DBA1BDE541FAEA87B1E184161D2629D72D
EB6A0747EB0FE164D7C03F80691D0817EB61A36388FB8BD8DD5D0E3F9E07539C
801B54723E611F3D7D9F34F69F19FDF979E65EB88080C44B77F433957DA23C08
D37D7CF41E7C17423E8EA2D73AD47FCCA4FC997770D16E724F1D36BC8A7467B0
9F5D7E15B86A9801537A68C0E08CB9EAC9269B02464F1F613E043DB168D2FAAF
ACBA96328904F11EFC1D608F98FC3D68A4FB5BC11035ED0A1E377960E3B323E2
92D19D7F34BD6F4F9A468629A77DCEB50C9B37F71AA003F6D4DA0E59BFF65266
0BEF891D323F96C038C1301128BDB4761727DE4DA903EA55C3D7548EF53E5C25
DD83BAFAA14E81544F43576B667B041672915E2B568FD2574F239706A8085BB8
2EA4636BF13762644BF861918E9B772D574743781BFF97919FB711CCF56A3154
926C35703859C7CD5CDC71177363ED557D6614BB42363589AE4C8314E9415EC9
0F31DB990EA9E24711572CF75BEAFB16F89B5C6BA3128051E4EEEAE58A665CA1
B738BBB5B21DA809CBC1489C2CF5AF2B33D1E0DCD3A12BAD4BB64E539D256EC6
3647641E79AB7EF9D9D3B8E1788268023EB76B54B4D90A63BA93725DC4D74B5A
35E4974C831803AF43B9F3F4F24D30739552BC03CA57E2BA0252FD929D00900D
B9F98512FB9D711DC6BC2360925D3F60945A225F5DD156152F1A9C0C95823B24
D7056E796EF8810DC25B7DCE2616B95D44531BFD604658E5BC61DF794F999622
F8F85D7ED8DD956880EAAED6B63E49444B09AEC85D6B830CFEE813D3D3EED468
AE8D921EDF826F327417488A4EFC0DAC93310DD53F7150245FAAF63D6CD4FFAD
8FD6583C3960340EFA17750DFF41EA7DB94F885032E576D30519EEA49C543E49
718DE1F3E4F8A263FEBC3BC2829B84450DDF826E0491B2A61EE538EDCB29DDD1
79FDD226D33D20755B7EFD7C1EA68CFB4502C14D409442793D3F225FE4628A41
D3AF919C86E2C774A799CBC57C19CF65BCE2F027
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD319FF9987350C3
D9BCA7F584B4D9E304CF614565FBC76518B70B7A86FFA7A4E0AB3F6104C8F05A
2A12D463FDB1CE3CF726D64933BE3E7B9289E87FBBEFB6FEBA19B313A27AD632
3009DC44DA90B76A05860EF095420D8EEF6ECA04DF85390E261B43A555BA97B9
F936855B21A437CD7928C67AFB0A08CD0405CFB24EF3E21AADE50F89EB1A7D70
6EAA57A9D2B7FCCE08F138ED8A93EBE60A0D0CFCD9EAE3C402A8B28D502C8E09
28EE5C7901E9A589C3372D42FAB8C427C2CFC610780925F6AF33E8E354F81225
92F3BD0A521EA6FB747D046A298DC2378BF901CEAD1600AE4042D5B0004466CC
198989172D784607F7A382691288E5E6A101900494B9ECB15B9A994460FB7BDD
3D92C0936AF0B8A11839DB2E4783F0B424AA60711B28AD45567957A3480239DA
2597F4E0B1357C6B12496409B3E8E0CEA7A2599B3C05E1464BA144C657F114BD
11D4922C16189C627073B5748C2C1436CB091EE3F478D1805018E5FC07541777
4286E395ADE5035D4D70485AB8E1B0DC311FD703CFAD2BE99BA9358896289BF3
73C123C0AB191A43025407A1734642053D688CE334686238BEB06DC30ED8E8E5
95189681C4CC9048CF5BDA43C22677B625C363222817C04549DCD60CB7B2357E
C35E13794B78307D3B01140B0FA4C0BFEBEF1692CC0815E9ACBAF645912141C4
20487FC63ACB5FA24E41CFFF674F072F048B4760A6C2E6504CDDCC31BD92D272
28B491EA49C8B7CDAE9E89723E6CED53E3678D66AB1D6A8C6E76A951873B41E8
B544ACD409A5504F2058466EDC7213DEAAE380AD2469815377244B3BF39EDC4F
BCF10F61C9BC42E5F43F89AA0DDCC89756566C565E907C70BADCB5315FD12CC0
9CD911269074C5E8E90055ABACCAB80AFEE304E64C4A05740622358C150BE659
2DA84F6FAE9A3A1F12C2CF747D35FB85DCE64419A6A18C8B8F25C505F2EA2912
0E4FD48FA46854FA1F1C691B9F6A82EC74B3996022FD4532F533EDDECF1BAFD7
B886C67989542394C22735D4B0620C776388E7B23653E0063E0C15FDB7D763FC
FC95483BB353B976239E485942A55CE487E0A60594F529E8FF50EBEB460A7DE4
689432A443D27472A6E6E46F329AA96783CF6F55B9C7706EA87CA124BC397FFD
05B86EEFD7E2B9B17F3714CECB3E58A0A8C4489E239C17E34AD9E0874E94EA4F
222F7D3D1B877624D02C9500FC54E839BC37D138B0559D3E5887C99EE8874DCA
147DABDCA19D489E58B4AD47E736EE4ED2A23BCCD7A6C361613A028572D6F4C2
43A4A572353033651A24D74CEC38266B1AD4C65D9D062B73F914CD280E2C9F98
8666835FEEC3F420D0FB633CBF8B5872580E379881BE02909D7E57B80AD9F00D
1D8B380A42D3AB886A9197C0079E12D9A79FE6FD1B07B3DAB9948677AF0CBFD7
0CD2844F5601EF69F81BB6AB0C68A74C7DC0D0D0A183C300A12B5F96025BAF87
972FD1E4511399FFAA5F51DC0AA5DB18A649C442A73CAC4C2895304933BD4F17
2199982E2610690E7001A622BE4B7342A9CF2F51ED4BBA4CF6DE946A8DC9CF8B
BE54D707A86776E9EBFC9D84A0F5D7D4B3237A646402D728EDAEA93F058B1B6A
A958B14BB3D78215140592FB63A17CBE3F97750934710D9574035D576C2CAA33
8227F328967364952081AC22A41BA366ED709A0C2579ECFBCFB7E7721E07C950
3B4B0BDA85877AE16BC30D56A0B208DA546903B801BE43AA39456B1048FFD7F3
1682DA8C7D35F8DB945C509FD1732B4C422489AA3E4E3C872F0737C396FB820B
538AF606A1E5B33222770D0A3D9314EEBBBF1E2C1D4F283005E55F2401622056
3C90894E331CB857C3EA6CFB8318311263300AB0844D20825846CC81E275BC94
ECEB7BD104E568645731482622A7C2483585AA73203A902A72A17AC233949F2B
A3CB21A43590C6F1759DCBFBCC99999974FC02BADB86D53385B19561CFE729B7
97E1AF1E95D4900A8CB425E3E543B75A97A7BC1DB7BBA4C1C928088B0EEF7691
61FF783E4F6D70E11E5B221716F31748FD159BE29DFCAC798130C0452CBE117B
FAB4DADD28A47553AB8F979B9FC718601D05AA8B2E289CF4963A907DA998AFAD
854F546ED7BE9939AD32E7041B3DB5FD8C6C23B7B1DDE63A4BD70429F89E42D7
77447414981A0678BB21383C9AAFFD82521BD8F301B1F7A1BF481F1C54DEFD62
DD09890F4DF33DCC6F3427BF3EAF74920BAFB8134532EFE7B46F58F308B7B8B2
1E2CBDAC8D81B3B9513B8FBC8E3A56D2B53FF6D710AC7121035998E4A0329154
DA972F16DF6352EA1EA14C4BFD5AAD1DCD36CB4D628853E888CA98B1B755EC5E
1B8A02A4694B3128FD377CB9DA88063D25BB2FAD5D6B42C149BF6B930B01E9CE
F88BE26DC9F3D1F0CC49784F938688401784404800A5E85A6B771C0CA2735C80
864EB477E67023AD4D1062FAB99CE4233B2ABF7F035C788585EEEFDEC03F786E
893CA5789446DEC78FA2374F96639D08BC61C5D58A8D03D46ED1B9308419481F
C1CD96E9E64C668AEA86870FBD8123DCECE5981AB0EB210E41CD559172047991
F13B71F527D425312BFD58FCD53D79FE37E113247D7E76DFCF5AA362A030DDC3
1B704A2593228AAB20B24CA1AA56B0847001FEDB4A2DE587225B0847A86181C8
C4D51EADD4E62FFB5DE55DA3591B0E7E8319F29DA8C996F29B76563247A6FB68
F1439C31D10F9744900C2B420E9D7325DEB5A9DB0CEF5B3D7380FC3563D88A6D
293BAECA89734A3DA2FAF50B1BEF19FD0B88366F92ADDFB1BCC89630BBE3E8D2
21925BA7CE36738E4D570022A248636C2FD3A37779AFC8C0315E0F3A8CF79153
10567A38E881908FF9ED7A1726D671A4B38E68AE822D4FB556A6CB2915A925B1
655FCAECBE71CB2A5D1CE3C5DCF36AAC5346158F9DF0DED0C10E621592446700
C5D0ECCB5A4D2443EB3A063A7F63279854F51D3B81A2967AA946859ED27644E7
27D7B32BFF2C1F40A2F09DE14B907CAB448E358FC55D0817EC9B53EE00E59625
EEEF2A6BB52401FF681803D3967A4CBA8A029B58A168969D0184239EBF7C4D62
B02BCCA55772AF138BF579904B85A1D440646FA03D45070B8A72B4B3BE25B00D
40D5AE74EFF21A2BDD528F6F7D322BF3EEFA2A58694D401E0F5EDFD464CEA9BF
8F154522656FB49747B6BFA7EA057DD35297232B12E3F48BD06CB57432BA77A6
D52BB7D6B0C6B0B76B11BD190E191E921521A43658DFEA556E2E07F98E19AA3C
52CC3DABB886B3CFFA9390506DACC90B20EDB37953452FED71168E40C024A68B
190CCD0D7455951918E3C38FC18401815A99D2DC9E199CCB170BB75711667812
CBEFD5DE48326B127E9FD84E7B14FB582DDFD21C3023DAF80229ADDA35214FDC
42E414169A399461C22414E7D3B01D5D350745ED095D863D6B362A7DAC03F858
695B8DE5760A760D68EDD0FD23B70C53BFBA4D08598116F210779E08BB45A93A
475EB5DF8649A1D1BCC907868E8C5D63D7D2C6EDA6FC5794B7B8642F842A760C
B8A2C048E697AA7D43571CEC64C6D119939F3F102122C52BBFBE24D4809F1062
6778ED2352CDAE37A14B1B3D7B82B0CDF03DDC70157FED2F0399603D57E9D418
94D1E322358EA4E1FB94C5666D0FCA894FFC1774D9EDF3D974743790F8342396
7B7D21CE62522AD976F4FD1FBF7511BF765E6E318CA3DBEB2BB2E94DCD2FB69D
65D8D970C3C755E6F464E238029BC2729FD8F7EE51A9C5DE687893B51D46B291
4CA753DF9D48E27F11916E951AC82C8EDC83F48C798F5ABDD179848ADF3E8257
FCFC4E965AE0B0DA099434D7FE9DF550903546BE455D07E984809CAF607B7B16
433C9F813229BEE3DFB670B5C4CFA70C155B0BAF00D0B1012AA0C91ABE099ECF
330F033A0DC0C32C0F05A349374D1C9B1655E83CAD3C91DD48E3DAEFF4E3760A
8B0E1D0641C7768CB7980ADDC5A85B6E0552827DA0314702428CADA59E8F1007
FF8001B0EEA8FA1F6C7EC4C0ED255ACBAE68CCA1BFD957971F9A7229A75A6946
B36E9990017DBB1040F4C7F8F1E5561D550BC0C80D5C3AF8A06603B40474F6A4
B9B615F6690A3543628982BD64EA88D56294E0C358037742836BB57A89EB7F28
AFBE36FDCD3171B147ADD316C3C0E403FEEDA3E17C2FDD269FB8C974230185C4
8B4F8BB40FFEBFE85996AD7855DBFD09BE036E41B17BB5428811A39C2D6C417E
83BD05FA4416E95FC1ED725BF75B034731648F58317FBBA3A605CF56AAA91D32
64CE598B45B1787AAC3228E21AFBBAD4F3EF887085553B4A15DA4C297DB9B3E8
BD3F5749E9A263B2548C064D1B14C68FC84E64E2DD5A3715D0D906CDA0F86710
97B49A34F2C2C3D0E6CBF2D05BA98FF669EE9C0591384D2F2276429324FDE400
CBFE3FEAAAD19EA9D568B9469EC2C717E56EC8B5D7497034EED3680A47A1E004
EF88C3AE5D2EB22C3FC61C831C5519E1B9F34E56EEA9145FCA1798D23BB2F364
68C58A6392E64A7B63A60402346EC9E01D00EB1CE431E2DEAD89DF8797373FD8
9D9B8B374E4975E93D32AD0DFA1467DEC43574E62057B9B6D8835DF21A82B61B
1F3FC0FED58BD328CD16F74BC47E2BB49F64E8BE64892A179D6F0001F414796E
6C48ABDB6381CFEEE83630A2F38BFDB444E64F8D3D532B99EF43BAFF45053808
9CC0FE51A864FD4F834177F04E9AC8D15BBBC585CD759F12C872F556BEF06DD9
6D2E9B938472F037501C06A6F2BBA5A5AA90161BDC3D8855C2CE4E1CAB34F339
262042AA006FEE7F607A2CBE11AA801078264F0886C330FD698A9B9126FCBBB9
76FBC3FD3743FBB49E78FDBA226A0259B730ECBD7D1BD18A0134856BFE41DF48
2E1A2DE296DFC2613146347ABDDF96EF0CF06D22DAF926714CDAA4F2DD550D20
56CD2BA0F2E782DD591E71AE5A09F99AD44E3AF4213850FD0D382A522E626BA0
B02D27FC07C9DE1F1A7D9901E514FA22F5FA20E8ACB04C08376FCFA566F8977F
20945FEA56B0897AC3F7A3DA873EAB9AC289854293491AA13F93D4FEF8E60043
F403FFA382F11D445F2B5E75DD9779D0712EBA435963742E260D1D61CA65A112
C215ACE7591A6EE96F8571AF86FEBA3A37B1BCA3F322AE736B3A830A9E66FC3C
777F8424E2782814D1C39BFFEF48373333F896AD3784036CDCCCC8928CC817B5
8DE5BACD422A27CC6630422FE2598F7801897BBB387C75262C7712D4E659F347
C5984B227EBC24D5438BEE217D2D7FEB747A91DC96E307F9288D986F0E2F2309
96D913F140A45736E94A5B2A075F0CD95D7E055A36B8A2B3E334EFC15D5D7BA5
444E248ADE4F94503868A1ACA91D6BBAFED71BC5DEC1CA167D94F7468C54BAD1
C89D3E3D8227EB31144E2AC75FC887A5301BB8232C126154CE06D338A696B157
32E1DC9F0A2A977D2602C08791F29A7831808CDE11E43EFD96095B6416E1F3FF
273C710CDE6CDC5F1DBD7E3054A51514D38D01510B9A36C080523EF47FE404B2
BCAA1A385CC8D9729956D7DB29C9D7695DEB29A0A50B02854FAF4564AFE12C51
142D1C611E412EA0A3018CA160860AE54D5F698C1761AE518D2323971181FE62
9CDE52F6A93128FA5227A7B8918D195D3AA7E7FBC6921FC1B0C62B5ECD47D046
751F57AA5E6F29DF8F0541B0A3F6139E38535B638AA4406C0C556A5F2592A27D
7FD3962423F396856B96E24A333B9D1D142AFF6B1C5951C40C3C3AFA6DACA95D
3B93A5350C3D310A8FA0AFC94FB119F22967AC48F142AF2B17227E18D41F8FFD
83525A411489AD6E8101B9105303FD488DF9FEBDBDBFBA23B6D8B475CFA40655
05833D88D75B92A4D39FDDECDEAA3F5692041A62B750E65FE9E852FDD88FB6A7
166E7BBBD40D8897889DFF34B9148DA417083291486C11D185C90F263D65A249
555BB23A31469C522FFA5643EFA123CBD68249A121DCF8979F868C278F2228A2
079EB0B3E68412CE72BD150F134E5BB4F86E21718084AD05C8B69684209D57A0
304F1A51CBE2DAC320659CAEEC2964B7587677BFF03E38B88B1010C1A417E3D7
D0CF105245B0C931E939F0E1389EBE9214493E299110B837B2B5FF0C8E607BE4
8B74128A524919F61F4F95023FDE885A1347F7A2154DFB9AF023268CCA14CEAA
81E5B68EAAF5868B3BF4460D97878889FF5C70BDA5C9F4FE00F73917526C648B
DCA1114FD97EF664A8D3EBDBFEBD6401C29106768E900D29D04B7C5CDA4334F3
2A021A1A62BF39BDE3331E59EB3CDC114FB192AB456E664B3BBECECFB18A9F1F
18EC2E6FE82CC8E630631A274CD0B5D34FCA0C7BC64D788A419FC6EE3F021C0C
C7413E1C0A412713A28CC125D3D4153BB0B028D14F87DB35A350BEA320178093
03F345CED46AC57AFFADB96234FA613B17D658336166F7235945664C77E36D4E
8A88F24F4FB46F07CC7ECE5D94E7429528AAA0D0B4AF3A699F213DBBDBE16D10
28C594FB5EC69921BE1DF84C34E03E64A8033A913063E0A9CBC3BC4DAE698C28
0AF35970EB2A2C2F1492538A5CB8B37338F1210481EAA29FDA754A24136A8AEA
B66A1A6D0FA8E3E3D4D8CB1CAF7158566AE4D89A23C0D8BB641D1B9567770C45
FE6539F2AC9377A60CFAE8BA704B178CE8319A79594F463C7A213573239A62A2
B336E30C71433F747BED40F648B9BC9D1EE99B34E0806AAE146528F20A051B65
32B295ACC38A60FCFBFDB23900615672841980ADF6C9A695912C953E59160F0D
D4328B5B68A86E908267C0BC5E5599DBFD8AE55EEAF4951FB6F8BA4BD1EE2735
E5F9C4229FE0D07FA101753647C755CE464311579C018DE7AFF41D143585D133
5B7A0877D35AF555FC6238A4F4F64269E9DC673AB680AC4316BECD0C2A9267B1
E3406E4CE0B0D66F17110F942486AAE9BF66C59AD4D85281F3FD479074A1DD81
B8EC7560159D5B6A6B2C99DD3964562865F2FABA5430DB864A92DD599336E4A2
E17C5AF05113CB0D2AD985B55C56C945256ED6A72BE4821AF18F27003C337518
AAA6239141F96EE96572617D021F044D0BCA178D0A67BA355DF78FBE6BF100D8
58A7047797DD9BE0E8B2E5EDC65277BD9640A5345F3ABCE05E9FEF60E0539217
ED229AA3536A42971CE6DB017E0CB62FA963A88553827DFAA0EE42FB50E5F82A
588624CB3086993C3CE610C064F95504C55BC3ABD5E6700C9333ACAAD3A385C4
61899132F11298FB48E58506845088003754F57A4DF5FB631EDD98E7262196CB
F46741B1254F92155A01D06B1F5F78590E15648F96B76C480663E48BFE9A8527
E11D4341EE13AF3B90C48F046EBDA672F814EDFE653309C0C9A005B721AC78EE
14C0F337BF9BAEE6DA5EFEE914077F57DAD79BDC506F668E6E2F149A2D98D6DD
5E3133D4D190F69A94B080F0A6F2C3220CA008F68BB6A82498336303C3D4741C
99A66C14D0033DD929C0BAFFD2159E1415070E8C45ED602CFCC7019ABA638A54
DE9494608C10F1A9B975B4BD2295DEBC6F91278E07A39EC245065F84012A4087
1A4E5109AE89583A17074116E7006E0538DA3D1B13D4B5350AD1074F7A1B1C0B
587CAFBD885674BAFBD3377467D7277B4F5D6FED61B8B60340E57AAC6B0670A9
CC928477064BE21F1174E8855D7847718BB1C243EFC05190A9FC1C43BDDDA4D2
07CEB99B77F9DC214DF6973AA97DA64D50FA4B0F6188A16B9F58F3B5F4148305
95D803D5DB8348BC331D6D3D637A7F94B731C3FA0874CF49C2D7F5E1026CE0C7
BC3B1FEF06A754162E3C9486FF75B8FFB43F883E13F46008966589163DEF52B9
2711BB12F57865A0A3A9EE1D0C9EFD2A729A391AD4053E1AA104A1E3544B0FC0
E0C1E0DFB902328E0A99CF2365FC08DB90E8B07FD817536266B2B6D626B41DE6
553EB0B547AF2E1D6673DE77FAC3CCF9D413994C07136F43E4B5C46733CD5B73
11646382211EFBF0FF7FC877CB8C89A0F15B5BC65E1BB4C450ABA1EB8FF7952D
E4F6011497CA3D65E895114F7C72703CB48BE2D6D015B8164BA4449A4FC6CE4C
DF9B183AE46C48FE2D9B23253A8795747FC9D762B276FF48EB33B9C55013F0BE
C7F80F15B9847AC924DF6A14C9045737621A0D1B9CC9DD6C540707471EFD8E61
18EAD033593415FB25B5E20F3A1D62107720921B75624490A957F6F211E57F18
32529163E795D08BBF5A0201A05CB4110D37F7729C7C64CD0DADFEAD3C87732C
2BFBB9700BFD52890AE89894358F6C229C835F12AFB7D1172B442392B44BFDC9
C98876B916268869D600F4165557287D7AB316DADCD06C6E09E92AC41372F7FB
CBAB86774BA2C5B21EB0EAE95B63365906B03396B440EB5620A69367EA53083F
54897A900781F9EADF430B9B73AF085C741E803D02C85CA5212C0815A988BACF
A640FF220E8BC040B2F6C96B929C2C4DCB4B26E50BD1C1201537CEBB7B472013
26256350815ED5509129DF200EA002EEAAF9EA61C8A79F90C94B62B71D332F18
14285464D93B2F2345C63AD108589E4C1146483AF91E0FD9A4FB28D79C7983F7
4F868A5C07815D4048F11A2AFEA64CB7695B0199D148E37F76124ECB7A2C4A86
23B26EE72F03007A3D784223E1D9D3D94599BE9E714CD010B9EC7590C31F3D88
630B84EDDB1A0007DB65581B49FD2C915457D8FD13847EA48F5EE0073D693AC1
AE17FEE44650B917116CCC9EA16BCFEAB1001C1C0B5B77DC41B0E942A440A371
69A16F4983C609DED3FA2A91A2966CC2D48F7C78450417FA8E1EE73EC322D2B8
7F3F0A07F91792D109B8A9D9877EE7FBDA16A567A0463D6DDE5FF7D8122DBF4A
F84DF049BE26935DD862E4B95484E3299D69B8CE2CB527357235D941BC2C20FA
1248FDE0B428EB055A105A78620932340A14D5DEE96728A546F278EB78D3EB04
76ED30696919F38303BE3D3306786BC1FACCCD0EB3B29CDBAFA3FC475B12EC26
2AAAD77725524D7ECA6602B6BC295FCAAE160884FE34DA73714E2B4B7253650D
60F702A2BBE8C86AFAD7ACECACBA7D0FFF40443CCFB3481F9D693A922C91F17D
41C952C4337005E0E40E26758F6A41BCBBDCD04D1239675599E81C71A29E881E
24AF92E9A6A4493E6ED59648443BC5DCE2184FE73A63FE5F2D5598CB2CFEEC54
2A86295ECCFD1D07246A1462EA39D8AD66FC273C12CB7B27928650F7E7C26DD0
63137E162A68AB1885DD074764F4D1F670D12ACDFE72C54EA2B141DFAB7A2FA0
C5A442CBD74BD954113D07CB536B4912815B89173C583C5FCBB5F249D93BA083
220E8E9414B69EC0F69AC097F9916BC0E8CDCE79C26A44A7AE857B8A465D5E8B
EBABE14FC18AFE7C0A487873D90272AF0969680C8CC5BCF7F92DFEE045EC39E1
5C313415B91B746C76582F38002B022A52683DA33812C551E47646A024CB6510
A08EAC8A4D98AF8B245090EA402B2FDBC1FED64F53E33E914D5553ABFDC084CD
33668237250F5307B3C47F639739498F2425B26B16CB4DEEED0C35BD73D2AFBD
AD5AA7DDA538BFFBBB04C73698945E70B3D52AF9BEF837AEBF8F8FF3C688FF1D
9C3BA73A8A3E450CC186B1E0FA14B54239E1993DFBF2CDC7BF7FFF43FCD14EF0
3F5293D9DA297E00783CD54650D4137954B4DAB5DCE80A542C9E9BA1D5FDC89B
DD6A023D3A5CAFC26A8B8FFC354854B5ADE4391F7961329D47AE96544902287D
53063B5C47DA16DAD61EA91E64FD69D3B6543C11AC5F2C2AEB4AB4352C0CE23B
9C0C4B101EC8D672AA7C5F45DFEF498BE84AF4DD80B426209C9EA3326CD0BA31
D10637A75CC74CD2AD7D57C08B94B68A8F7867A43DD95FD042950528EBC2B6C4
9B5AEA1438D1BC1C824760D788AB389B82A04DD24571773057783ED6E4166F85
51D4E6C370FFD9C47E919737B1FBEAE8F51090659588E9170E712B9EEF980A60
D84F2E3B8D358EA2E3200C9C3CDDD3A0BC676051510C226696FDA58FD14D2968
76C394E8530C18F0E2C59CAEEC5FA6309B898EAB01EFF419BB3E10224A92D50A
EBC593B844B77C3412E2031A1FCEBB6F98E1B6968E51ABD7A81D857E3A6E4A9F
687785A9E45D23EF4B6D037B7C81C747A63654C1069473083285EDBFD5D00747
EEA311B614894D3CBA470435115D98340910DC59E08E093633A9FD42E0A7AEA3
EB7F466F1301B54FC79D522B9A6F4DBCDD753483AA5129CAE33E699C4E97B53C
4869ADF3EB4541BD5C6A8B2955F0D7EB0E40C3F18F1AB912A4C6BD426BAFB5B5
35E0FE2532429501A7CFC151C5DE546D33775FBE06E2F70F2CE7DE18AB890505
A00A663005F8F76DFA0622EF37B56247FB5339F251A7272D052537052E45454B
221882311A0490C9C86B95495DDEBAF95388BB7FAD6E3156E2E1C71A094D8D7C
0781FE45F36555FDE082064B1647B2C1A2A93B2C5A615E7632C61DA9E6E34D46
E511EBEC0CEAC25AC5EA3462CC1DDA8F6E108E5098F6CE81C357752BBCDAD59E
8C09423EE9E001744CC45EDD9AB23464375A2696239BE0EF17FBBABC0E3C68A6
DE2F1F6418BA4825FD3F6042CF11F73F47037E9092E4810235373BA2FF1FB5B1
E26FC3A487C17E80A4A16A9AD402893D07961D9D425E026091B196FF4419B39A
CD0D291335949CC1078A54532B2A16FA67EBD20F94E6E1F78D410095DA799638
0563BF7A9F8C7E7CFBFD373675C1EC28851B40E6A8D437C751F58D45AE16383A
83E592F0987CBF51821D9771613FA425EB116D5469E339CE30B251135A0005FA
F8605FCB2E0D7D5B005F03C027F54AF6C3ADCC224E750DD8B60C40BCA4C52DD6
508B16E152D89EA312F85C2FE8881FA568ED7D4520954580FAE3A4855910EE93
E6C7FF9FCCF3B1619CE2072B5EA15694C32FF25E3F8D7D2C791CFA302136839C
FE8D5AD7382B08C2FF83D290536CFAF78E601BC28F68CD1D75F2C4C463EEF01B
343D228C0EC1417F6D788FE626883EFDC871C109A93FC9596BEF264D21844E80
AF06BABFEFE7347D315E7F06AA08531C640823ABA7C0B7EC45172A8FFC9DB87D
463DD71CB658D93E917EA6FF2B75AC303337C41299198BF8FAA70BD1D9ABA734
D23B3353BED7323B090A37B8A8F649106ED979EEB9B6700FD12E6CAEC269B647
28718BDC5074F890CD85120A5CCD127FF2A476F9F18F85B92824308BB7853BED
02AA846F5FA78DDB198FF73579D882E900273F3FDD2DEEC03F11E925B1144DE8
F7079B848946ECEA53C90038E4808BC6B2EB22E0D3DF18D60EFC0CB61F1C560F
5734D1F97A604FD6B06C6C3AD96207F758AB0ABFF43C671F2A2FCE2AEA133BEF
B787531C015731E9902BD79C7526ED30046D817D509285004457C15113581FAA
13CC29389737196AA2027AFDA77EBCE1E140DD03D41BB70D10B7BCC6CC717DC3
278180922C2A7FEE6CE3D8B9D3970F0C11669E2EB19754C4B5B5351C50817255
6E29F3833E7D64C2206A14888C7C3F588C007A28EC217A55AFE16F48476B9535
483F41105196970C5AFC00CA6D28AF87192F8687263213CF7EF37CFF630D7DA6
6A0F673594B6A19B529DC6DCDE6EB5F6244787CB5B8B399B9DAF4778AD9F16BC
F07A8CE5DCDE775B813EB4F3A15459015679B6A0DA04081623DA5250CED6EB6A
9680738B8EE07354D3D6BD496733A978CC03F8347112A450218F5305D6562A3C
C9ECAD676580F4C3307119B1EF2C21762BB992A52F0BE9DFD9F09CA8A1B7DCC4
727CE5639767C46FB4A6C6781A34F2C5BE22084171BC1E0EA50D8D7FE8307BA1
03760FE95DA8AAE4A6F8B018DB0121E2888A87AB14888879DB460E27F1EB381C
24218EF83955D88503A06B9050ECDAAD2284C809F2077DBEFE8181110358CDC5
4F8872D8BF5A6E79471756CE47EFD639FBBA4F925C02FCB92F15AC338E6768E1
405DC2EF9260616916CF31D99600905A40D76F7C5FB3406DDD03F5850F3F0925
B0FFBF5DE6BDB4152C918FA356616E69BAA0E34050F363C8998DF5EEFD7B4074
3E6E8752C66108DEB65F5B4E148C1FFF2F4C0883C904356C709B6E4E58213F11
2D885E734719574AD04E52D6CD57C28262067D4D4BFDA697DCFD0A7FD5FB6F41
564645E278E5AF2F8A4F93075F99B431F090325CBE5EFBF395DCCED441DFD36D
794D6C34035E9BD9B74D7B15BDBC9E5A3C47317090F6BD7263E3E6AB3C56EEDF
3F2CF72F7E17BE18BE93E1BE4FD1BD6121F12478E52AFCD9A7F4FEEAF7790AA2
300DB42DABE6DE14A12DD25FA132E3D14E38062A1C526B8B98A4CFAFD3DBFB8D
E0C9025A50030DCC1B43269CBFBA9C5D6BCBBAE2351E768B0507B35736758A6C
377A9E8BC11DCD158160F8C704A3D8A81EBBE5CB6E35F3712E45A6C74299E4D9
7C4D7EF57E1A50F762EE8020EDD6F0CF58D58506F1A78FBA0007AF0E85EE8DA6
DC78B02F3F8814558808D7DD99E444CD0D60140CFA02A91B8DB3E33161CB30B6
6BCA48338B3E4BEA28C357BF244FE1DEAE95F11F35807597E0C85D0BC622011C
5CE44622A59481D1DA18FFB3C9B2AA27E2E1160623E31AEBD2FA3C2D1A280D13
A4B8277F07C74B495A55160B6EFDE6AFFC156514C0D1AF6CABA713EF2E26212D
6F3F7710725601717A4AD23632B427E42790D1D537D64B6289F484F257444582
A7807610038ACA33015DA0BBE53A54B5538AEE1E296C506FA07BA59E2BF3F877
DC5D2681ED256BC29952236FF71502FE8876B5409C1C2B694582DBC021CF4D7B
E2103671CAE78EC077390E3F13F2F4793F7C3FD666C5E5CF6981C2A3FC5340A7
D5C7A54A73C1C0E9EB125A572043AAF2550C830A99468CDEB3DDEA3DB94E91AB
D1EB5652BB73CCE1078EF2F2B81FBA591D0541BC87DF0CAE63917D09F146F775
7C2F4741A6592A263C832377A66858ACA688D325B8FB6F747E63542BF1307E40
5AEA3435711810F1FA95C2863BF9DA1E265442BBA31FC812490EF593062DC00A
CF1484CF0F9889EF4D5291D077A5150999506ACE208139D362BDE22E9F90A46D
77E7BF39352C0EF3C911664322DFD41DB19696418B60BC31098F91A96F073731
56A96760C9F547F02B196DC88471D3526EFAC05F33790491795428AB92A7F830
58137C58CC8CBE339051FEC74BBFBAB1AB46ACC9DF3E304A1A87FA38B1552C24
8BEC00A1F206FB1E2323C9E7F6DEB5F5D0B042C50B78127D4563B574EE8E039F
ADF9792C5ACDF72D3EA71ED1508E817F6F09BB19BFAE930D2D225DA776892A05
81039851473F4C12E1B6548DAF32BCEADDE53FE09673681702BC767B797E5DB4
4D4DA9871B9D19C3DB2C0482FCD1535DC2592187085FC1DF3E9314E191508834
093E906D5F6334169990EA0BD8DE9308661DD513459120896BA4541D1776BD1B
384FEEB61947F41E88F4ADE392E8AE386CC75B48AE30DA2A6156D1ABAF2250F8
673AA24E05B7466B0DA7BB2A471FF5325E77A442D45E2BD84EE2C4AA147CEDFC
94FE0CD75EDFFA3E3A6B90093F2D26261DA2F15766810D886A5CF96240C60F8C
C890179E563F79C44CB3EBF5949B574F27E49E090A1870913451017EA087DE70
4282EE0789D40CDCFDBEEF04BCE2EA02AAA68E8B233E316796E31F1F8074BEB6
D3A2DE6F88C1365CF01F8150BDA27261ADE1BCE933D2E8F29FE57E60A9C5A823
41D5B197FDEA6E7DB3C655CEF53066AACB88CE5C205F4D6F366235812218FBAC
D813B0B0A55F736EDC4DD93FB51B7D2742258B12D0F8CA029CD7BCA56BAD8715
8C6EF2E89CD6453C6AB9038D56E6975C1A71147C9295F2883678F0C3933BC181
7F9CA1825DCAF2AA6E13A8B86F2214C9FF05975EF9D468F34764F90B5E8AC32A
97E5FB87EFDB983200B1D0E7F406E722C2FFC31DF3C02E9A8AE1690F44B719B2
2CBF7F752001B12003AA0FBBD6114516CBCDF7F06D080D7BBABCC5C74AFDC724
47DE7372951AB4E6F351F9F9866849E393DD37F018DDF534BC851CE4F0CD1130
D17027F727A34707C0312DC7E9315C547ED60F98866408ECCF7AD9033C92BF41
003C1D66C0491B8A607BD1BA630CF56F54CC244B5F9716D511C183351C79DEC2
E5D572128C6F220F41D4188EBED8DDB719F199DCDD778ACA518ACA06681F936F
1E967225CA4C3B6020CB11A843247017497BA31C5292F666CC4E0D1787330C94
2B79D2828952EF5B875E91F9690A6051483E20FA489EBD1E8A07F43DBC5768B3
DAD5D02533C5601EA855303B309339D6661D03C4F08783C6B837D65CDE46878A
25A223F94F0D6FDBAFAF31BEACC87673D58560B2100B16FB5145C737682E611E
1B9676F178ABF80ECCA6788AEF25264885C25E4AC348EB8C9DA4C9ABA4CD1307
B2279DA354F6F9D5D86988C13D67B74092124AF55E28EFA4ECBF16B9B71656B1
6A4050E035BC9CA9763D668D211FEBCF4DEB04185F9330497ABBEB3D53D2164D
07C5A74863585A3A9096D16DBDCDB93259DAFAD62642CBDEAD63620945B22B67
3531BFA64A9D0764758A5E9B6224B1BFD6B4DC50C24F0F62760BD2D2D67BD523
6EB0B17F3184685F9F035F452F37AF48EECEBD41EBBC4D3640B59468FC22E47F
64479BD1D1C256FE3293EAC486F4623FEC12EB5847B86C794D9F9EAC946E0600
8A931CBEE21508892C3BB21C601BCD5690A31110B55C123048CE454295E79469
B5C5D9A45E9EEF7732D50F2C3C94AA9B549454530DC6AAA36491AA0F339B20E2
4F6D317A5270996E0C6676ADFC15CCD2E08B8FF4DC179B2199DEE21B18488779
C39BCE9802235DFB3FDA1341823885C31D93D2BD41D6E49AEE86FB3C8AD175C8
ACE4E6735D25919BC50B7FC9E7A7DB37E4523757689662871A7BFA387416BB4B
75B2C0728D228784380493C45B5B1DBBB4761476BC9EBFB602E633AA6E95576C
7F7A2A25223749207AD39C48724632B4EFC54F66876CB2C637CA584532262D2B
09E1C6978411F4F4409D39DA8514FA53AE167B0754F4B1B1D537A77DF0203BCA
3E00D50B8C6CC7A51A4B1150698B2B6D39C0CC74CE91D9038F30B4B7D9ABB58F
6689C44F86AA62EDA72EEC5B7D0F6FEF5868D0A097B41D2E3877B83B0C62A06F
97B8881F2E8F2CA75F96D1D62C6BCE1FB633B1582BB68A598F350FBFD743B4B1
0E1A8F5D6950DBC50850D6B4FA003CCC90B431FC4F8B0E7AD78B0EF442A52DF4
EF09B294E19FBDFF5497AD48A99FAE28989819302688DF3C3CC4CE9B35BD7604
DF787244B888431E5920F1256F770304847EC4F4CA76A1163CC75302E77DF582
BE3D4329DA55B4977FD7A6EC6BA1D6B17034FB213C606D8C6170A329D9277BC4
4A62CCF36AEC8F9F5B238FB7F521C38F0A8867BFD2C480D8D7672A6290E3CCE9
3356337E0A9C791A815BA9A2C9ACE27076A2F63D6CE1D7C2FA5A9AFD4987EEF7
391B61C9686881DEA92D74D8BAF2F19EC3E4FD368E7376763C90B40CEBBCF19C
AB9B828C29E33B0FD83294C8203ED45ACF2846148090C265FE728CDB7E0B673C
1FDA9F0E70A579286161F77B31780DF1FBDB59ACDD45E7380EF361F4F18E9735
7FD77A5223A41AD9E915CA10656177D7B2E358F2C1BC2AF896D7104F5322CFD3
4FB81AB84E8CB1C33E0E53C30974A7DA1F7BE5147F5E5A90FCDA5AA3DD880C4C
5BBE1D36937C7C3C3A7099C4B7D232328ED4BB8F83BB232AB94F108B789EC41F
1B9BCDE615F0E7DE5F238A8B53E61CBADA3150065075D33F8EEDE78EE4CF54E1
2AA2DE5BDDDF293A918945C6A20B6F9DE3B295B24DDFCE48E2B3375A5F8110F3
AF8411EE70531F83DD6DF7F440DDE2840F3B0E4FE415EA24E2FFD0D3A75CFF9D
1B97A1C2E0930425C512A28DDA7F726AF4C148EF125C0EB0ADDAB34D9CFAC062
F3468BB36AD15FAC6952595E619E2E72320DAB32B2505069B059AED17AD3428F
F7CFFDDC1787638F358196F9FC07FD9B139C39EA662BEE8993D8A3C3504ED1B7
0F2CC46D8131353D2D788480B7F1BB2492BF9B4099A31D31CCBEA8CF36181994
9FE9EAADAEEFBD14BDFBCB4A2D7034D32867BA6B56D8E8612B237D78F61AC22C
A66027EBB945033817E2783F7EA29B6D58B62FDA23A140AC38A40F29A3A052AD
14AA9F7BA779A95BB61FFD563C70716D1CD56A5BD72C3FDE9E9245943A23C5BC
51FFE8440A630A1500C48F631CF0B92783C2FC5472A33DD05A91465BA64F5F95
19A44D8DE638042AA84CC286FA2537B0E46B382379452157D79A8F5B34809395
55B8203FACC239FEBDAAB225B93CCB8E31AFC35DF090EBA657D76DD2CCB3E2D3
7EA8FB210441B7A417D933647F0EBAFEEDAF1003D1701335AA189858041B979C
3FF49E3EE34D21AF49C6E2214AEFAA246C93C7984B1EE1F11459FE4460EC20E2
EC0B786F19194D50DBD049ADCC2105F0109532FA9CD5DCA4297BBB4D15A945E0
47E5D4D1002909847CBFB3A7A944BF9412BD8C43F68703F8F1A3651BCF2D5ECC
DA04891C92E5C0E72BE504E3FD5E91A4AAA04659AFAEAF0B99ADDAFD43B3E116
04FDE22DF218047DA3DC61033E89D008FFFB7D333379635E62039D3E62AECFD2
9359B7EF387B58E928AF7FAD0C3D11CA31B9AD998370457CDA094C0247757F02
A77074886A17433F7FD57E4E8423E70B20F8B0C67B9D17D5C8C3CFB42CA86FC8
C98EB72A6641221957979EE7336184CEA86527B90E069486E87E0FF2E5ECC71E
090D41ADDA963532BD15C10E35C1A4E3D0E75D66E14213FC0385A885C156E6C2
59D333A146963BF135FA3386C8D447BDE5EE7A199848502686F3C922E7B40566
45732D351B4AEC3E279EBFB870E1853E194D7A1877ABC2DC60632FC93127E158
9D29E010523767E5D4A0F811C1D030081AAE7ECC20C5E69A52B0CEC79F62B402
1E43C132B098D2ABEE7A585F93A1909D9DD81EA741FE68A1B3C0D83220842679
A5E661A43905B96E0F49C40596516DA0D490D90B7A7EFBB38E9472317F2F145D
E6A1C488E64CD2E94C4949071B1E840A90CAADD2572E43B55C6E08F2767C05F9
3292ECCF1533DADC73DD6C00B43C46E5BB5CBF7365C11859BB80D83566454105
C1B6F7FCFEDB3965081E0F5C8FF35BDCDA8117E3B78AECE43C5B5B0401F1AF0A
DAFC8DDF2F8B9B971EA1EB49A24022E18746DB24BAE823A36BAC954BDB9313BF
3D4A848C2A8A0DBFF8CA5812612413396C357E02C0402BB62B2633606B800FC3
C09BCB20805A0A8FF3DFDCECECD7C1E1AFE69F35BCAF39C0CADF266198510A81
E8A5B554E1A06AD6221E1F4E5AA23CA3059D1DBAAE112D45A87C295590F0C1A8
45BAC0053BF44534D79FFCB8F225CC2A2D2BB75B137FD84163BEC8504A72D4BE
5AADCCF4B192C321CCC8D5DF338F83072CEFDEA4C90C72065F512684AF12D2A5
60726F024D1C045C7F1D7B9C48720C912BA8F6C78307A6C5F02CEE8D75C3C462
5F25209BB107ABD751D84CA8D5F27D6E47F4FB960231A66276370380E01076C4
7804F09399C21E0679182F53771DA51175A6571D851D61D825389B1B9C1D3479
76A4194FE693539ADDF5477DAD6576282DD61A99ABC24B239DD641C2C41E0832
A406589444D2359EC5F048F092E9F727B79BC49AE0B117C89F63E46A6D07B44B
7A7FEFB376FDC25269D84825B98302BE3E8680FC0CF36C053DC57A11151D5094
B5F7840565443F149BC12DEBCC60F99DE2052F722CBE107B861E5623721903BE
4772867686CC63F51CE60601BF000B7F5F3607FD847D5128E393EB13DD653A4B
562DA832DA50788CFCF1DED5D7C3D4CFCD711D7DDDD0A64011E0C306C687950D
A2EE76B4C18D424C733D50B5D8960BBD4637FC9C2FAFAA0E76A5B27B1CF3303F
5A817078FDDA51B83894441ED0B1A27DF94A94800CDCED7FA4B8632111CB574D
3D67851D3D55491546FF881656AA2DA08BCFFAF8D8D28FB514F8CDC228FDB8E3
CDA2C46A1574A39BF4420B9EB75125F4D93D1688FADECF0F63C4B98C0343390A
3D6750B3F980236AC5341E3AA873211AE95F8E34A783C49D4139BDE7F5F7E086
2E02852BBCB45AE6653692AFB9CBB5FE19A86DC9A6EE4EF41CC1DC2EC706D493
E5EF3F82CCCB62A00D4A86FA3CFDBE8CA7C4351F548491054723F9CA3CC6D87C
374C0B33C68E8AC3A7EE238ED0240D727A1ACB66867657720BDE63208F461001
D016B3BEEE859894E6C71D9FFB5D2A9ECA7135A893116128ADD0F538F65CD415
4A9EBB72AA5FFBC5F49E726795839FDC2E7B5318F0A1AFDF114FF2771C985240
D3003252D85EEA32EBB5A836ECD06FC0981B680E1A10DB2804CE574882AEF39B
71FD97CEF5C92F2A0D5806D6271C5CFA8338A49D036931E480019B0C2B9EF815
FDCC90D5C0BC9454691C138707FF439B66A40BA04E7260A06DD9D276CB450774
4CACBB6C1D5B01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 55 /seven put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
B36258037B5F0DF7D78C26C1D24931A18A2606939F9933100C723ED2FD991F4C
98CCB4F15E381B4886FE0E928D4989A0257051C547165291D35FA5BCF359E153
7EF69FEC09DBE6A9E866BAE054F56E86CA2D299F8DCB88685B932117314A73CB
5954C6D639CEB6F8A0A1F4D9414F1CA7CF3DEDEE81F75D8B5CEB205425442B32
8703A8A79A51613E3E6A46C9B7B1052C0A5491130E312ED3A0A2F32C5D52B15F
9621BA9E1688463FEA43F72D5FDB6E8D0739003C1D8A04E1589A7FD3F405364F
CD0677FB7EADC0D62CB762350689F751F19E6389284C97A5163CAD892E9A7043
AFEC5A36E7D86F5EE345576F3AE6927C6F5B2A095817E7796AB9FFEAC801F4E9
190062A9E98C10892CD939FFF926631CA932A14D8CC68F07CCB083F244DE10B1
1E8ECA14C7B0E9613B8E336B6BCC37517FF93411F08B5FB38970BD4F123EEE0C
B9AF3141BA1116A9E57F2E0012C2FFC51FA46A1397C2A3D5BBCF040AB9BE7902
4A77259F5EF7A7455CC0E7726F802F6C0394C6A9469C6118CEC4A0BD9071BB20
C2D78D0D7F885EBDEBE6377ACF972420EB70B0CEC19492B8498D81660F794267
4D11F545D00C89F57C7B80E92FCBE9DD5AABC7EE1F36107FBE2DFE6FB3D06644
4EBE0E414F78F2EFB12D6D60EB9A59D6D5417BD6318FA486415DC2E6AA2F93B7
3153334C689F1B4D294F420596273F8555A6888C93A76A30BB6DDE971C7D9DED
1802AF8431F67AE1B55C0182CB61E8F4852EC0C289C51DC32032C734983848F5
2C02DCD7EC18766815C7602E62DB208CDF26BB4FC6D04EB846046F8315AE5CED
B474E3C78358FD787096F753A1EFA5AC349F2D99CD46632C3104157895183A52
CD0D4AE63A5FEA06A846B018CA0F634975369E044E70EA496A3A8559AF0C290F
5DF71AE3D5325693946D32EA49FE5880785FB7A895D63586F8294009C192B21F
BD28A4D8A2113A4C17CF3C3A9A3E8674CAF91501D2C33696B2ECBA8C09ED4BF3
E929DF288EAC016E66CBB41E7393D10E705788D3AC6A6A1F25E663543FB155CF
25A5CA493E61FCD218786BB48420A6DB01BC505F3EC17AECC0992FFBA09A3FCA
9A72626B397EF17AF935E254CFC2C9528941C188608D17CA227008BA576253A5
CD7F755C7CFB3BBF602E84BF12FF277CA9365D8EC1A574067A86DBCBE226C425
D94E564982A8BF1965F4D481110FCAEA96CD832B9606E8E074B6749568DAF366
BD92FD57AA08C89B4971F78681972CCDA55ACEAB60129B2921E439E6AB18B61F
6B9A72D170E20896FAB448DF6FBCFEF143F71E70303EDCD0DED76A8BFCD6B817
9CA1C8CB2CA0063745D3E5814B90E77DA10D1AF06F75E967262CE86835DCA6ED
6B288D2D8D760694B24B38D9BFCC5C73A1AE37FADBE40C65B5100012856C1117
BEF38173E8CF481B9D8F6386C40D055A62AF79781DE0B90BEFB2C3F59F4D7560
6D1EBA2F09AD0D846AE171B976285DFDE034CCB7730A625DA3846D6F1D7F5248
8546E9515056C4C8F9B7EE06CB1D23524ACD4E0AEF341C9E239605AABB885186
73649DC02C1CA12AB9C4537FBFFE2680FDC1FDCA2941F5F76AADFC72A5A39C9A
984A6FD896359FCD6D66A7962CA72C11D537035B2EA89EE6192BADE68CA4D1AB
910DD727186429481257F780995E1DDDB6F6A19FB4A1847F6A08C07DC2838A1D
1364847ACFBA36D8D7300E54C8BAB0FFAD33EB416BC5AF05C830E600B6CEE21A
F1BCF786E3E610C13A0CC89FAD67390325382B5071FCBA7CF1F30CFA6FC1CE86
ADFE03B1CFD03AABD3E85777D9A143F8D9D842E4804888FE6C8FC547DE4BFD9B
3D1EBD02D03A3C7DB569C7ABE3510FC5E2231931D8B102E4DE299FC976E62E39
94ADC967D7200788119BB8A7412606769DDDA70434321BDE6DA8D749D269C337
5F63FB52EBE5AFD54A564FC59AC7F20CDE985D5489F616002FAD3C5597BDD000
EE7B9A2FD208B9288D2617916970A60350FB2EB816EE05599C19F4FDA7139D3E
BDCE8312B8F3D4F504F7FFB931CC11AD3900ECA4F7ADC0B8D9B82941B6815617
8142B636CDDF5A3AAC2F655A4DEFFBD6F04307C74F79DC745F417B4AA3E3299C
8AC5F2452B2EE071331FBDA07002824D03D1699007611683E045754C144D3B0C
2C79039B88FDB45407DF58069B541BB0D29B1C0027CED6CEF56F4E779604ED56
EF2D258C6BDF2BAF07A7AD02198AA078762F974043AEC6130EB0A0CF817300D9
8D780EA0B4BE32704CC7BDE5E8CDA77518C4867AD4621C498A92514DEA8C4FA1
AB3A7E652E43547855A49DD59CAA03F405CE7F5C0D61EF98BB66B57CA1ECC623
4911B783CCAA7AB190C250913B3E4F6C0D2576675EA38B6FFC83E542F643FFBE
C70B77246FA5E8AA19666377D0BB13804C38A6C6B313E21ABC2CB06F46D37BBF
ADFE96B357A2A2FA9650D3B5CF514D720B45C75D06C6B13C732B28E53BDD8CFE
A7D71B9AB59CAE584999DA697EA47EB67B212089CA0D92265E257FADA03CED2D
D642779BECDB63FF694C0026F043E521CC60E97BAA3C246FB362109BE5C4BCC0
16E415B1A99A88C4A3C9E70722BDE62E3DB77873A05311FBB07ADCD451D6447F
A24C3A3EA924197028889DD64BDE6E547FF9232AECFD8FF9C657E11D61978370
4E38542B1CC3FBCCC000F6505A7C5AE9E1947588FBF8FAD6D94F1745EEECD77E
8E0F552534CB90DFE86CFAF26C7BD50228628569574DF6D7F8F4CDAF9B14214B
EE51D5D57B2AF9E74C2164B30384C1ABE850E117A1515C4B7461B17EE2775C1D
A7DF22553BEE649187ADF709E430833396E564D0F5DB30CBF1F38A743CF0E13B
1802A9DCA6785FB42C4FFE2C7F9B24DA7CCE5171FADB9912A5DB4F814793D031
9458C8092E5BA7652A2E08A22C2CDCEA20A761EA4EA1271F032039F412F7B122
53507A5E94C85889514DD59ECBC80C794D3EF5E0068172A9733EA163039F27C7
E31510C6FB41B590B1379142360FAE1EA6F3EE1E52935529754755D8741D62EE
3D2FB692FF226F7418A515A63D5333029AC5FF817751A962A0C9E39C6AA9F23F
F0516B83F2F1AD369CB37BC68632C09E795FA2F324491BD0DF387B1B0EF7D2AB
475E93116C4B10AF5E5E087D2CEF0B8831E122CF4B455CBB4ED419C9FE3B7628
8C55FFE3C1E64572A1DF349EC7FA64B4706B230A28D6FF6379E25FA22ED77160
2DB0F405F968A3F661BCCCB3B3D2DF2C3480CC02696327B39212C69BA4D13A75
BEDD99F722A952AE14E27A607A843B072FF1731A5F3702C3969FDD6FBD40CB1F
FFB31B0E1E5F76FE5ECDE0922A3C733FB9D4FD0F346C6E28FB290066D83ED8B5
4AF57FF1D32DDE1961FD04CD828E0599371A348FC8BF6861C0C873D15AE865EB
85E27BBBE668A02D3ED5B8712543C984C23BD6072E0BB6F81707B05C5D84499F
0B9D2236BEB8083ABB849A21AEC620DF1372353886CBFB98C9CD89A3692FF64F
D5BABBB145AABEE5CD6CAD4FFFB69A01B071C0FA8FA5624619BE54F5CA5E99E2
AFF9B26890EFC46D5FF45F2F08B03B975411E2CCE6B645C46370F05841B58DE7
9B4F8212AFCC97DBC1D0D00000FDD9559CF71D037033474F2772287EFDB1AE99
95C7F55709759C50C8CFB86663FEFE353286D7C54B66A536548294963D097ED1
03B09790897145B8E7448046AD4D99835B7D4595A4B182A182886788DD3A9697
A22380E55BAF2FFF44AB48F4627D40712020AF72757636946EEB01A7EE166137
06925B2A5B23477B0670C37E0B71431F821D707565162E3F2B9431FBC80C44F8
CC4032854138F601D167121F2E438992FB1DD49C8CDE4C5E1305655DB78ED14B
F3858BD44F57049BBD6776AAB375277C10A27A0A8C26E4D7AED83B3459BD9BF7
2F0B7CCD6F29E3D658FB7E51EB31CADC1F73B36C5283B7177C9608DFCF767C7B
C3FF23EB210594A3546D1543DF7F6603CDF3B4AE5C4329BE7D7830B830D0100F
F18E4FACC7A8D451BD5702F0F71C9412AD8FD65854A32391B2067072DB9F8C8D
C7233849947A807DB59406C8104B115A4AFB93A81F7180921F8CD3AFFACE76E8
5560F5B95C8D7DBD1D2302A3822C5788D4F5312C8AD02A3C27B787BCD5DB3032
4F35E3F41FDDB01D0488F1A6E19462C94CBFB2DAAEC3A295EAF0D0B27C04FF8B
898400B298F7FB0B0A47CF9F10EAC9EB85640A717D5FDB56A46EF609F00F29FE
48A56E3A6B07AC30DF1D6469C5C953DCEE47D01AD3733CB8DBB764FD3DCB1D43
0F4215359081E2E235D6ECDED77477548DD1FE991E532DC8FB4208147AC4720C
32271E4783A3903155694DCEAC5A3CD272B716685B465A433A8CFCB0D95BB490
1A70826BEF6A2FDA20DD3E3B47BAEF45BAB5F70C20BCD456816E62B58C91E798
D1B7B8E6591EDD0AC846899B4D96B6E3E604EA6A3EA93090C589BCF1001F1D3E
2997E37D7187EC7B525AB2DF1348210CAAED5DCE389BE9F01E044FAB10396093
FFB140B1255A882D905C95C38CE7B8666F3BCDD51150AA02A59F535FA2767E91
9E20596BFCF5273613D3368B9D6AF31DBA10BFABE630078D53174CD78B69A225
EBE316A5D5393E6524F0A65813D2B1F690517C988BC11D731A9EA8575C68B175
1585DA06407A99BBBFEE4B744912893002669563C893A5565E1DE4B8848E46B1
5815557844BF6F3AA48F5297AC9D61274466E37BDB850B7125751CABC7C06E1F
E88B2CB0D67B59DAE6A15A04DF0A254EA1F89C1276EB7A1477F5CA9EFD44C99A
8D176017EF5B8EDF77B9DAA4BF779B804C3F3A97173208C8F95CF4D57F143807
CACFE4FDA22472BC81C7A64F8D7A1DF326B1638B23172EE2D3E6531AD595C7FC
E5A984C19000999CE7B8F0B825C9A6E18966A535E68CD7C9ADE76AB053571130
C9F107AAF5CAC1FE6511446F108862D19E29FACBA8968432C8D4D2639A945E74
5E594AF88095927FEAFE69E4DB8D2FA0F5EDC39CFB5C4A0D51B8BC5DA5D6AE5D
DD4D2755C6AEB1BF7572872DD2510BC13D955D84E3DB1296982858E928CFDA27
0FE884B21535C0AAE799554561885F63135D3A87F3974F69AA110E0B19786888
A1ACDD8D8138D2939BBF441D8FDA3F4B506D8C1E931C4DBB7B26D342D3587C84
692BBC5DC5E0F414EAE02094F32A949289EB6D7DBA0DE5FAB7BD81F4060B72EB
7A69ACFD94D4FD2B64BE17809B8BA4D003DF19276FA8FA0D0B8E63EA168B7EA4
85AD7BFCE3415BE8C84E9CDA9836B9C7B060B5C5CD0539373F7DD694759670FF
15BAF347AF45567D49C9851D3A69B29366470FC89CA21325C37E8B5C120AB78F
0A2CF83AF5F08F2BF5D18B4382E642FDC02A90D31AAA0BB25BA706D730FEC363
FE96318457BF758B841CB4D6C0F2C81BCD8A1703BC7E5F36434CEE52B5D19EEC
C7BD3A1086BAFADC63A3D5AB85DEB10D66DF30F2F79C4034D1579AD8489977B1
27150B61890B3DBA120E20D260A2C84C2D390E0B497FB5B36A1CFEBEBAA30884
7528739C9BDF9C80467B8F6D0EC06E7B5F9C1F915BBE9946DA783317A597399A
C20FB6ADEE65E5A0E2641CDD1E1F4324F494C9BFAAB06C9132577D79B8DD5C37
0D95AB6568F136EA842065F86AF556B36D33AA36DBBFDC16574AB1193DAFB331
F708BC9569E416195421CA1DCBF6A0AD2DA1C49964C38A27DE26BD4067F8C5B1
32C59B0CF3F5E882ADE130D05F2931BBAF711A0FD32B0BDEF46CB6EA86BA6543
765FD494BC6AAC077701A586D440F634E03233CF9CBDA4CDEB16B5E3257F950C
7EDBB8DF795142CD425525A381FAE7FC354CDE692A9195DF079041379CB1822A
2F5DAFFB7FFA46C93D4A9C25681F314F5B5575E7AA2030CD0E350693C29478C3
D53167B2A1D8D7FE09976F6E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 52 /four put
dup 67 /C put
dup 80 /P put
dup 83 /S put
dup 99 /c put
dup 101 /e put
dup 106 /j put
dup 111 /o put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D725429C32445A5F9B77B7161905CE00
86C26E256842DE59A36BF624C8DC7C190A30D72F4DC105C258EC1529C8ED955D
7C06DE1301AF9D77E89E3292F67CC0087A5FC27C5FED7E31BA18A095AD640D19
5A640BF385C7EF224340766291C4EFD618D4B7A39C4C487CCAB12FD20754D370
EFF8AAF8E3AB6706BB7A83886565DF60608DFD3C06FF9977CD5968D4AEAFF5C8
6823197AA02C43BB67A786F035A8FF7D8D28B38C9542D6DF56C6C145C2B69EFF
1DB150616F84258FC795F33D385C8A25188427F3B0E8F89E0502A5200C484999
64C632FFD1AA06B96AC527F62CAA844D1331A00FD4879FBAB84BFD45BAF3AF9B
2328DEC09E1A2A42432C841F7ED820EE751A1CAE4B8A7F02D17C3A607ADD33EC
1B34733D4C0DBDDAE7FB60104403ED2FD5386191C0D2C30C30B9E59226A5AC76
016C917FA2C6CB0654338DD6AE140E0F5E5B88A254696C3C2D3B379D3DD5C7F2
724685B92432D9E91A4647903661FD7C179E24E4D27379BB84B4761260D6F3BE
44FA358867424979E4DE111E338DFC3F4BD7F8C0894B45D1C69AE1C56CF6EEAD
27ACBF38FF8D25AB95AE8BC2C5BA704972A9EB765226548FE0AEC0B6926EBCC0
9223379628C50DFABAF955F3D194AB32C2EBD8F1E0B4D70159E58E1C60B1AC7A
4DF7507FE3317BEABFC03994DBC9C0D0373D4498E2E0D582F67B7AB6ACFF6967
548EB4E35C5A8EB6EBF74CFF5DD4D9630C05D3DE151AFB5A5251C6A4324C11DB
4FFA9550F35B9994C076C046B8754C53E7D7705523371D590001E98014A47AB5
0C574BD6D173B69625C7182CB66304C20B0B1072FD9B8010290743D75199E124
B505A699A9A86764029205FFF379796D1DCE0C4B0A3A743C71E583B0C3A5D5D1
45F90B11813116B6B799490BEB513AC89EB1B0ACE2E881A02D7F004E59B9C81F
C990EBC5EC26679F7749A396E0AB93DE62C8389D78CC62866BABA4AF61F9E161
87F05B0A209CBCCABF0BB6E59948A5C7466D709F8DE1985416DC97E5083D6510
5934632CA95094B6A4B220DEBF39723D586B3733780BC4AA752E2844513B8335
78C6C6CFD3A1F2F54F0957B2185BC926FBBE5A7029E0605D34EF87E1C16ADE34
921541E62A387D65E6C91B6398596EE581DD42A0D1B39CD655794BDA148B7BA5
0E43ECC8CD8ED65980D76BE65922660D3BB7C2B4A89773B0CD3CF3E0A29A27DC
047464F7DAD6ADB17ED10714B72F208159DE280347C3BAA80761E6D0ECBBF156
BF006C465A8D3594246334437CF3D5FAF589C446A825965AB11408558DE74C6A
8C29F18832211B4D4346AF11964AEE0F5E288EA2F9DF0D2DFF833934A8190922
4F754B1DE4BFEC292ED216AF0E7A1C806EEC7E39E21E9A750FD6B030E29A8717
078137EF7D94674DE316E509B146DFAB44920C2BE36820C3666C2C5BDF4B8AD0
F5351DCF0609E0C4A51F145768E84B348D883D847464D0C97F6FF561017F8A17
48547DC5ED44CA768969F866D9F6D330488AC729AC5ED1F69F800E19D1562E91
5FC452D88059725EE7BD3C83CAD7B179713B6E4F7CB968F0FB66E01FE930EC68
8C6FDE4D3DCF0DB14D747E5ACA2814EEA6E9A5424D243AA8BC7EE60A1CC8A137
6FE2479572B5E2076FF69305D4D388F38C7AF882F603D9EA6C61F97942FA2EFB
54D3ECAF07AB99DBB830354C5EFF6FED5EFDBB00AB39CCF5C06731B3CB03D785
BBE5A7F877494153D96E841E686C9A26DB975A3990FF8DB65341CC9C737AB477
C002C39ED892238F2ABE59A755788340BAA9DD857D5E503E5E2CB908738117ED
C8F5394A91AD244E6617019E3FA007573D2FF7047F240CA4153BECB4FDCBE303
3180B3768EFDE1A94A211A7C872F0BA3F8FB4D41A7253CC21D316E8617348299
6E9708411A6CA9A908589DAE2857FC13AD1981F8E0E8B6CDFE359624E4E1C9F9
D782BD24D106382A82EFE836D85986481EEE2F3FD319041ABF9587A12E3082DA
0AEFDB89335FA6FEC684DA5B0E63ECC3D924227815C99BEAC0C01F1E9603BE1B
9C67F9BDC851AF5BDB5AE59BC19CBDF016E775AB5A79470F719B62FC59152377
DA847D0E3C97D0E16FA0CFFF5B57F0011C44A5B8365ECC928078FC7304AF262F
2085136BDBEA60846A838F1CE32FBA59EAD72CA3F7BBD90313A81C620E40AA5D
C4B7C0B5D6C66AD0EC2D91A168F6C728A5B4E389F8B623D4917EB143DBB7742D
88CAE44CFF149AB967A3618EC35A9BA93A65D4F42BE3174B41609A827B145415
C281D03C57141D22598220417391A7E4F72A390BC90C66E626A1FA2E5E6040D1
E97E2825244387DC0276CE016C1D39A8F259AC35A26B25A35722C36141441C04
060C1F9CF250808202EA15ADB38758A09B2383DA2425C8518FBDFCDEB9DEE796
4460EC7BB67FDA28CC6208249060E7A1858DD1165E616E36
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (proj2.dvi)
@start /Fa 138[53 37 38 39 1[53 48 53 1[27 2[27 53 2[44
1[42 1[46 28[73 2[72 65[{}15 83.022 /CMBX10 rf /Fb 136[97
71 75 52 53 55 1[75 67 75 112 37 2[37 75 67 41 61 75
60 75 65 9[139 102 1[94 6[128 4[105 2[88 1[97 1[102 10[67
67 67 67 67 67 49[{}34 119.552 /CMBX12 rf /Fc 134[44
44 60 44 46 32 33 33 44 46 42 46 69 23 44 1[23 46 42
25 37 46 37 46 42 3[23 1[23 3[85 1[62 60 46 61 2[65 1[76
52 65 1[30 2[54 2[60 1[62 7[42 42 42 42 42 42 42 42 42
42 42 23 28 23 30[46 46 48 11[{}56 83.022 /CMR10 rf /Fd
134[51 1[70 2[38 38 38 2[49 54 5[54 2[43 1[43 54 49 13[54
72 2[76 11[70 11[49 3[49 49 49 49 3[27 44[{}22 99.6264
/CMR12 rf /Fe 139[51 1[51 2[66 4[40 4[58 1[58 15[73 2[90
12[96 14[66 1[66 50[{}11 143.462 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 444 Project 1: UNIX File I/O)/Subject
(CS 444 Project 1)/Creator (LaTeX with hyperref package)/Author (D. Kevin McGrath)/Keywords
(cs444 ``operating systems'' files filesystem I/O) /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a Black 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Version Control log)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Main point of the assignment)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (How we approached the problem)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Correctness and Testing)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (What we learned)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.6) cvn/Title (TA Evaluation) /OUT
pdfmark end
 150 0 a 150
0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150
0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 150 0 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</S/D>>1<</S/D>>]>>>>
/PUT pdfmark end
 150 0 a 0 TeXcolorgray 0
TeXcolorgray 1447 1946 a Fe(CS4444)43 b(Pro)7 b(ject)43
b(2)1392 2312 y Fd(Sha)m(wn)34 b(Cross,)f(Ry)m(an)g(Crane)1586
2552 y(Octob)s(er)f(30,)g(2017)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
275 83 a Fc(W)-7 b(e)36 b(plan)g(to)g(mo)r(di\014ed)h(the)g(the)f
(dispatc)n(h)g(and)g(add)g(functions)h(from)f(the)g(original)f(no)r(op)
h(sc)n(heduler)f(to)150 183 y(implemen)n(t)25 b(the)g(LOOK)e(algorithm)
g(for)h(the)h(sc)n(heduler.)35 b(W)-7 b(e)25 b(made)f(it)h(so)f(that)g
(y)n(ou)g(can)g(go)g(b)r(oth)h(forw)n(ard)d(and)150 282
y(bac)n(kw)n(ard)29 b(in)j(the)f(dispatc)n(h)g(function)h(when)f
(\014nding)g(the)h(next)f(request)g(to)g(dispatc)n(h.)47
b(If)32 b(the)g(distance)e(to)h(a)150 382 y(request)e(in)h(the)g(opp)r
(osite)g(direction)f(is)h(closer)e(than)i(a)g(request)f(in)h(the)g
(curren)n(t)f(direction)g(the)i(direction)e(will)150
482 y(c)n(hange.)42 b(The)30 b(queue)g(sorted)f(after)g(a)g(request)h
(has)f(b)r(een)h(dispatc)n(hed.)43 b(If)30 b(the)g(queue)g(is)g(empt)n
(y)g(then)g(w)n(e)f(add)150 581 y(the)g(new)g(requests)g(directly)f(to)
h(the)h(queue.)41 b(If)29 b(there)g(is)g(already)e(requests)h(in)i(the)
f(queue)g(then)g(when)h(adding)150 681 y(then)e(w)n(e)f(sort)g(during)g
(the)h(insertion.)36 b(the)28 b(requests)f(are)g(inserted)g(in)n(to)g
(the)h(queue)g(based)f(on)g(p)r(osition.)150 822 y
SDict begin H.S end
 150
822 a 150 822 a
SDict begin 12 H.A end
 150 822 a 150 822 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 822 a 133 x Fb(1)135
b(V)-11 b(ersion)45 b(Con)l(trol)h(log)200 1139 y Fa(Detail)141
b(Author)262 b(Description)p 150 1172 4684 4 v 0 TeXcolorgray
200 1242 a
SDict begin H.S end
 200 1242 a 0 TeXcolorgray Fc(88e93dc)p 0 TeXcolorgray
486 1184 a
SDict begin H.R end
 486 1184 a 486 1242 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/88e93dc7f5e10022f61dcc02707ab977045d02f0)>>/Subtype
/Link H.B /ANN pdfmark end
 486 1242 a 0 TeXcolorgray
109 w Fc(Ry)n(an)27 b(Crane)128 b(dining)28 b(philosophers)e(problem,)h
(lo)r(oks)g(correct)p 150 1275 4684 4 v 0 TeXcolorgray
200 1345 a
SDict begin H.S end
 200 1345 a 0 TeXcolorgray Fc(35c460c)p 0 TeXcolorgray
481 1291 a
SDict begin H.R end
 481 1291 a 481 1345 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/35c460c5834e37d3b7763cb8cf924fd1c60605aa)>>/Subtype
/Link H.B /ANN pdfmark end
 481 1345 a 0 TeXcolorgray
114 w Fc(Sha)n(wn)g(Cross)98 b(adding)27 b(the)h(write)f(up)h(for)f
(the)h(concurrency)e(problem.)p 150 1378 4684 4 v 0 TeXcolorgray
200 1448 a
SDict begin H.S end
 200 1448 a 0 TeXcolorgray Fc(3f0111c)p 0 TeXcolorgray
470 1390 a
SDict begin H.R end
 470 1390 a 470 1448 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/3f0111c4029242fbff1abdbca709846e312de5e3)>>/Subtype
/Link H.B /ANN pdfmark end
 470 1448 a 0 TeXcolorgray
125 w Fc(Sha)n(wn)h(Cross)98 b(More)27 b(done)g(on)g(the)h(write)g(up)g
(and)f(made)g(it)h(so)f(y)n(ou)g(can)g(compile)h(for)f(the)h(mak)n
(e\014le.)p 150 1481 4684 4 v 0 TeXcolorgray 200 1551
a
SDict begin H.S end
 200 1551 a 0 TeXcolorgray Fc(2d47960)p 0 TeXcolorgray
495 1493 a
SDict begin H.R end
 495 1493 a 495 1551 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/2d479602bacb4413c4926dc4d291da1999f4543c)>>/Subtype
/Link H.B /ANN pdfmark end
 495 1551 a 0 TeXcolorgray
100 w Fc(Sha)n(wn)f(Cross)98 b(sligh)n(t)27 b(c)n(hange)g(to)g(tex)h
(\014le.)p 150 1584 4684 4 v 0 TeXcolorgray 200 1654
a
SDict begin H.S end
 200 1654 a 0 TeXcolorgray Fc(9aa562c)p 0 TeXcolorgray
486 1600 a
SDict begin H.R end
 486 1600 a 486 1654 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/9aa562c78ee7ab1d2c149a0a110375449b559d34)>>/Subtype
/Link H.B /ANN pdfmark end
 486 1654 a 0 TeXcolorgray
109 w Fc(narxy)355 b(Up)r(date)28 b(philosopher.tex)p
150 1687 4684 4 v 0 TeXcolorgray 200 1757 a
SDict begin H.S end
 200 1757
a 0 TeXcolorgray Fc(f8b1617)p 0 TeXcolorgray 479 1699
a
SDict begin H.R end
 479 1699 a 479 1757 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/f8b1617c75f383036ef25a3ac7a69fd1960cee15)>>/Subtype
/Link H.B /ANN pdfmark end
 479 1757 a 0 TeXcolorgray 116
w Fc(narxy)355 b(Up)r(date)28 b(philosopher.tex)p 150
1790 4684 4 v 0 TeXcolorgray 200 1859 a
SDict begin H.S end
 200 1859 a 0
TeXcolorgray Fc(651df07)p 0 TeXcolorgray 479 1802 a
SDict begin H.R end
 479
1802 a 479 1859 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/651df07401865b4a7a8b049a5bb170d350407c4d)>>/Subtype
/Link H.B /ANN pdfmark end
 479 1859 a 0 TeXcolorgray 116 w Fc(Sha)n(wn)f(Cross)
98 b(\014xed)28 b(sp)r(elling)f(errors.)p 150 1893 4684
4 v 0 TeXcolorgray 200 1962 a
SDict begin H.S end
 200 1962 a 0 TeXcolorgray
Fc(7555688)p 0 TeXcolorgray 490 1909 a
SDict begin H.R end
 490 1909 a 490
1962 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/75556889aec755f28b25f1c81b86fb31c7ff825c)>>/Subtype
/Link H.B /ANN pdfmark end
 490 1962 a 0 TeXcolorgray 105 w Fc(Sha)n(wn)g(Cross)98
b(uploading)27 b(tarball)g(and)g(created)g(the)h(sstf-iosc)n(hed.c)e
(\014le)p 150 1996 4684 4 v 0 TeXcolorgray 200 2065 a
SDict begin H.S end

200 2065 a 0 TeXcolorgray Fc(4b)r(c64\013)p 0 TeXcolorgray
458 2008 a
SDict begin H.R end
 458 2008 a 458 2065 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/4bc64ff20f38125e7a8d84f16e1780b235ff3519)>>/Subtype
/Link H.B /ANN pdfmark end
 458 2065 a 0 TeXcolorgray
137 w Fc(Sha)n(wn)h(Cross)98 b(Uptdate)28 b(to)g(the)g(Kcon\014g)e
(\014le,)i(up)r(date)g(to)f(the)h(Mak)n(e\014le,)f(up)r(date)h(to)g
(men)n(ucon\014g,)f(and)g(sstf-iosc)n(hed.c)g(added)p
150 2099 4684 4 v 150 2232 a
SDict begin H.S end
 150 2232 a 150 2232 a
SDict begin 12 H.A end
 150
2232 a 150 2232 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 150 2232 a 149 x Fb(2)135 b(Main)45
b(p)t(oin)l(t)g(of)g(the)g(assignmen)l(t)150 2563 y Fc(W)-7
b(e)27 b(b)r(eliev)n(e)f(that)g(the)h(main)f(p)r(oin)n(t)g(of)g(the)h
(assignmen)n(t)e(w)n(as)g(to)h(understand)g(ho)n(w)g(requests)f(are)g
(dealt)h(with)h(in)150 2663 y(an)g(op)r(erating)g(system.)36
b(It)28 b(w)n(as)f(also)g(b)r(egin)g(to)h(understand)f(ho)n(w)g(to)g
(in)n(teract)g(with)h(the)g(k)n(ernel.)150 2804 y
SDict begin H.S end
 150
2804 a 150 2804 a
SDict begin 12 H.A end
 150 2804 a 150 2804 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150 2804 a 133
x Fb(3)135 b(Ho)l(w)45 b(w)l(e)h(approac)l(hed)f(the)g(problem)150
3119 y Fc(First)22 b(w)n(e)h(started)f(b)n(y)g(\014guring)g(out)g(ho)n
(w)g(to)h(get)f(our)g(sc)n(heduler)g(w)n(orking)f(with)i(the)g(k)n
(ernel)e(instead)i(of)f(the)h(no)r(op)150 3219 y(sc)n(heduler.)35
b(Once)23 b(w)n(e)g(w)n(ere)g(able)h(to)f(do)h(that)g(w)n(e)f(b)r(egan)
g(to)h(\014gure)f(out)h(ho)n(w)f(w)n(e)g(w)n(ere)g(going)g(to)g
(implemen)n(t)i(the)150 3319 y(lo)r(ok)j(sc)n(hedluer.)40
b(W)-7 b(e)30 b(knew)e(w)n(e)h(needed)g(to)g(b)r(e)g(able)g(mo)n(v)n(e)
e(forw)n(ard)h(and)g(bac)n(kw)n(ard)f(and)i(that)g(there)g(needed)150
3418 y(to)f(b)r(e)g(t)n(w)n(o)g(sorts.)37 b(First)28
b(w)n(e)g(\014rgured)f(out)h(ho)n(w)f(to)h(get)g(the)g(forw)n(ard)f
(and)h(bac)n(kw)n(ard)e(w)n(orking)g(b)n(y)i(c)n(hec)n(king)f(if)150
3518 y(the)g(the)g(next)g(request)f(in)h(the)h(direction)e(that)h(w)n
(e)f(w)n(ere)g(curren)n(tly)g(going)g(is)g(closer)g(than)h(the)g(next)g
(request)f(in)150 3617 y(the)31 b(oppsite)f(direction.)45
b(If)31 b(it)g(w)n(as)e(closer)h(than)g(w)n(e)g(con)n(tin)n(ue)g(in)h
(that)g(direction)f(and)g(if)h(it)g(w)n(as)e(futher)i(a)n(w)n(a)n(y)150
3717 y(then)i(w)n(e)e(c)n(hange)g(direction)h(and)g(go)f(to)h(the)h
(closer)e(request.)50 b(After)32 b(a)g(request)g(is)g(dispatc)n(hed)f
(then)i(w)n(e)f(will)150 3817 y(re-sort)e(the)i(queue.)49
b(W)-7 b(e)32 b(also)f(needed)g(to)h(mo)r(dify)g(the)g(add)f(function)i
(so)e(that)h(w)n(e)f(w)n(ould)g(sort)g(the)h(requests)150
3916 y(as)26 b(they)h(w)n(ere)f(inserted)h(in)n(to)f(the)i(queue.)36
b(W)-7 b(e)28 b(did)f(this)g(b)n(y)g(using)f(an)h(insertion)f(sort)g
(as)g(requests)g(w)n(ere)g(added)150 4016 y(in)n(to)h(the)h(queue.)150
4157 y
SDict begin H.S end
 150 4157 a 150 4157 a
SDict begin 12 H.A end
 150 4157 a 150 4157 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 150
4157 a 133 x Fb(4)135 b(Correctness)45 b(and)g(T)-11
b(esting)150 4472 y Fc(W)k(e)28 b(kno)n(w)f(that)h(our)e(sec)n(heduler)
h(w)n(as)g(b)r(eing)g(used)h(b)r(ecause)f(w)n(e)g(used)h(the)g(command)
275 4572 y(cat)f(/sys/blo)r(c)n(k/hda/queue/sc)n(heduler)275
4672 y(and)g(got)g(an)g(output)275 4771 y(no)r(op)g([sstf)6
b(])28 b(deadline)g(cfq)275 4871 y(this)h(sho)n(ws)e(that)i(our)f(sstf)
i(sc)n(heduler)e(is)g(b)r(eing)h(used)g(as)f(w)n(e)h(w)n(an)n(ted.)39
b(W)-7 b(e)30 b(then)f(added)g(prin)n(t)f(statemen)n(ts)150
4970 y(to)i(our)f(sc)n(heduler)h(co)r(de)g(so)f(that)i(w)n(e)e(could)h
(determine)g(when)h(requests)e(w)n(ere)g(b)r(eing)h(added)g(and)g
(dispatc)n(hed)150 5070 y(from)23 b(the)h(queue)f(and)h(b)n(y)f(doing)g
(this)g(w)n(e)g(w)n(ere)g(able)g(to)g(sho)n(w)g(that)h(for)e(ev)n(ery)h
(requeust)g(that)g(w)n(as)g(b)r(eing)g(added)p 0 TeXcolorgray
1929 5349 a(1)p 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 83 a Fc(to)33 b(the)h(queue)f(it)h(w)n(as)e(also)h(b)r(eing)g
(dispatc)n(hed)g(as)g(w)n(ell)g(whic)n(h)g(means)g(that)h(all)f
(requests)f(w)n(ere)h(b)r(eing)g(dealt)150 183 y(with.)49
b(W)-7 b(e)32 b(also)e(added)h(prin)n(t)h(statemen)n(ts)f(to)g(declare)
g(when)g(the)h(direction)f(\015ag)g(had)g(its)h(v)-5
b(alue)31 b(c)n(hanged)f(to)150 282 y(sho)n(w)24 b(that)h(w)n(e)g(w)n
(ere)f(in)i(fact)f(c)n(hanging)e(direction.)36 b(With)26
b(all)f(of)g(these)g(things)g(w)n(orking)e(as)h(w)n(e)h(exp)r(ected)h
(them)150 382 y(to)h(w)n(e)h(w)n(ere)e(able)i(to)f(pro)n(v)n(e)f(that)i
(our)f(lo)r(ok)g(sc)n(heduler)f(w)n(as)h(prop)r(erly)f(w)n(orking)g
(the)i(w)n(a)n(y)f(w)n(e)g(w)n(an)n(ted)g(it)h(to.)150
523 y
SDict begin H.S end
 150 523 a 150 523 a
SDict begin 12 H.A end
 150 523 a 150 523 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 150 523
a 133 x Fb(5)135 b(What)45 b(w)l(e)h(learned)150 838
y Fc(W)-7 b(e)32 b(learned)e(that)i(y)n(ou)f(ha)n(v)n(e)f(to)h(mak)n(e)
g(mo)r(di\014cation)g(to)g(m)n(ultiple)h(\014les)g(when)f(adding)g(new)
h(features)e(to)i(the)150 938 y(op)r(erating)38 b(system.)69
b(W)-7 b(e)40 b(also)d(learned)h(that)h(writing)f(co)r(de)h(for)f(the)h
(k)n(ernel)f(can)g(b)r(e)h(hard)f(and)h(confusing)150
1038 y(b)r(ecause)25 b(w)n(e)g(could)g(not)g(\014nd)h(a)f(lot)g(of)g
(information)g(on)g(some)g(of)g(the)h(built-in)g(function)g(b)r(eing)f
(used)g(so)g(it)h(to)r(ok)150 1137 y(us)34 b(some)f(time)h(trying)g(to)
f(\014gure)g(what)h(they)g(did)g(and)g(ho)n(w)f(they)h(w)n(ork)n(ed.)54
b(W)-7 b(e)34 b(also)f(learned)g(that)h(can)g(b)r(e)150
1237 y(a)d(ton)g(of)g(I/O)f(requests)h(and)g(they)g(can)g(all)g(happ)r
(en)g(v)n(ery)f(quic)n(kly)-7 b(.)47 b(W)-7 b(e)32 b(also)e(learned)g
(that)i(there)f(are)f(man)n(y)150 1336 y(di\013eren)n(t)e(w)n(a)n(ys)e
(to)h(do)h(the)g(sc)n(heduling.)150 1478 y
SDict begin H.S end
 150 1478 a
150 1478 a
SDict begin 12 H.A end
 150 1478 a 150 1478 a
SDict begin [/View [/XYZ H.V]/Dest (section.6) cvn /DEST pdfmark end
 150 1478 a 133 x Fb(6)135
b(T)-11 b(A)43 b(Ev)-7 b(aluation)p 0 TeXcolorgray 1929
5349 a Fc(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
