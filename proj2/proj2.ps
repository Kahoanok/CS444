%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: proj2.dvi
%%CreationDate: Mon Oct 30 14:43:34 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMR10 CMBX12 CMBX10 CMR7
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter proj2.dvi -o proj2.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.30:1443
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A447D5FBE86D961AE4D4251149F11C4BC269E10B48E8C42DC2484EDE87
6540CB8A5EA2494148D09CC9D5014EB71249FE767D91544738C9295BCAFF04BD
5EDC6802915347EB5127004EA0231EF3D971DF9C36468CE2679CB2044154431E
704720F7A9A9253822129D774E213330951A5572E9CBEABDE72A1B20A26AFC82
986EC4D13E64F2737C561F79F59310B53BA1B7985641479AD69C5FFCEC429517
93D8BF8AE398B71EAD782AC9495C88CEBC633FE2B0B26C51D019A93DF7899BBC
E6E85DA4ABC2515547BB76F02F51DBF4B21F1A667A3AEE31504603927C5A32E1
5DB90898D5FAA5DB40C8D2072F067E16006DA1EC850C36330592CC07E699D8F8
961485CC38D487CC7A6E1F3E9CEF804B220BFA5104C6AF76D5F9DA0903E6270C
5343EB6D070EE854FC7902ECDF5FB0D385C94B0EB996BDCA516F4EE61B76C625
3032BE9440E076B2CDF1F4936DB261D156096B5288C7F6B2674BF07DFEF2D44B
6D4DDA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 68 /D put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EEB5128796E
46CB0AF4B537987C2ED552B37D83F393222659DB735F2A293159AD84AF082B95
6F1454471FC36D805485D619D58FC53FBD6E3F72660ABA559B91ECDEFB267268
86A75650C3919962B0139409A29F5E3FA70B901CD5D2C49144778CFFF1D5B63E
099C92AABDAA73D54689812279C95FB7A4F7E840DD53DD3197A4E6D3099446FA
C0032FD40411E8F3300A8A8934B5216B01D916D41DDB32513DC4ACFCEFE43D6B
22FEF13D3567B047C6B35C477ACF2E172701FDB0FFFBE01DD58D7E54398EF4AF
DA5A404E194BCC39BEADEE5C76D7CD1E602793B950256F25871A9760C80B1EB4
D1E1179C390BC240DA061C9D539B20F4FCFB72DD0C1E860DEA2988E749819787
F04BA7A9CC3EDBF9CDE46895FE31EF0F8DEB63E295E8826BF920C8FEAE3B2080
8C98DC43DB22C6537028798198E2D3B0453ED725B774686310F635AE6153D9E1
8A0514882D4CCFE9D2D2465513E42E548F64A50ED78AEC9D62E0F9CF61EBFC9E
E8832D60E91796C916FAFE58F51818B80BBA52C1C06D94E602481654E5378C8D
137E3A872753CCDE4B2618C031CFB13EE91C91335441C434296DDEF61CDFBF8E
8FAF25DB3B6D6796FCCE2711938D605AAC00F0A58DD1A03FCE8732DE541E5E8A
41FC87E1FCA5CD9B5E8D63E7A7D6CEBA67D8A83EAFCF490DB7185AD55ED0F43F
9A1290E91C463895BD12E8A831DAD661E36E1B01ED4C112B8E1D0991D0294BB9
A13B7E9A8835B12A7133E834379B3477DAD425B7996592FB0395E3B4FEDADF4E
23A07F6C0E1387DD54F5C8BD071C4E9E4CC98C55882E29B65E5BED61B57EED93
07FAFD75CF3BB101D1529F83AA8234F70F342B0E531BF23E9A7D1FD112193CAA
4E377B44F94D9E990C22598C2AE33EA73BD0670A4A000DF78624CE01A25DB30E
22B0EE3FA892AF673E323BE5D63D0929903FB45F56B11CC718EF5A690A776E28
8BEED7010ADB1076B23257F9484533DB8D3E5253808D085F082F84A35063986A
42B5401B380E6BE5980537C58DB8E18E1A64A349847AB618233806F30D13DC8B
1A60616CB434CDE7436FBE5D662782E57E2ADC185C844E9F0246F8CA03BA8431
1B1C9F4083497EE7AF00BC8DA24BDD5BCB92885FD13546413127725F24B7CE97
F6FCF66C28E1A2617824D73C4F074BCDBD82DCA8322AFCDB2FDB8EA4B400826B
C0B7EDD8A201DD24445C7C712CC2B6476005CD54B4B48A9E304D4B6BB9689338
6573FF11C082CC9D5F9EE464683A6649D8EBF57C89305D2B977A6EC2FF53F988
21703295813331DA7761B1A0D2D5A58B5196251D74EE1703612D0E3E69521D8E
8AA7E1B98CA91327A7AA5795019F4ACEDC2C83B1E41CB378F0763921B9D65DF5
1227EB120E320A28F6A25A741D0C4F7211B5B5CC8AC0720358C97BCC4AB81B9C
29843447A7BFF606AD3C07E45A77B7B66BADBB6BC1E81DD5A5C2E7C8C4EF849D
B64B3BA95C5769D3EC89D7114137F8EE5D4D358A267105EDDA0E5BA91E6EF714
874953C2D492A4D74ED0BEC3FD837A1F26194C0B9A49BA8430491D66248801FA
6BFB48FED1A401EDAFBE8A3F9F871320D840B1BFDD84BE9DBDFD72C4D5B371CA
54AD62FF2C66804BCAB7DBCAC0796432D1EC32C188F311A187A99A471B34CBBF
380892D3B7FC2FC0842C0A5491130E312ED2800FF38CDC394D0A70836644A007
C860204D008E208E14C9C4948B498C36A651DFD7BFC5FC1ED6FBF217A07D1D4D
52E8720372AF7BC6CDC1DF41E2B44FD66E97391284D78EF2399E862A26ADEE69
54FBC1802B0C648C19916AD37E7DE3A988CE91C9A9F4D8F8B9ACFBFCA7EA73E1
EEC0550D4196130968AFB5284A29EE5DE4D5F76AF47BC15DB590BF871314CEF1
9D67CCD897B64F4CD261A09A37D37011B46093C2D7EFC7701CC06BA8CF87BB2C
8DD1D3396D774B6716C278816A9CA6F8E302F4CD994EC08C00AC6A66C51254F7
1286E85360A4837F6D2B047983D33B641B22597223BD9570D6C9F2B2584CCCF3
418C6E6D57B9012174562AF1BA130770B3E5124423B7A15057D51E82C519D06D
C96C93556C9D341262EBB6CC3B9E7FE4567823650657BCA4B67D2F3153EA0489
B845A6861E66432C2C1AC60C596F6C222C24B661713294A95BC93A85507348C0
8215013EDD085C3386D1D094605C22E58B9F9C3E9C6D2F7025A068592E57250F
65306A1666F002A9B36C608B6E3EEA4B909A11A824C2BA80DD28426CB762BA15
73E6C3EBE172C6FCD6B3EFF627203630AF2BD897DB3C7DD9D9FF86F3270D22EF
A230C261DA2FB591A3D5C55971A57F7F8B2CDBA530E9795CBE691C141A143280
C65FB90BDCA507EA99B3174459E7BF7EF4F9B66D92297DF3F70BF2211AF02304
5EA636F3EF79E0DF7604441B25D54F41728AD4F55B82A134FFECF6D0E875945F
756A506C6A23DB0B2B4D900C2026DB1B6B4EF1F7729CDB19741A7BC59728F662
699CB2A041BB1CDB218353614511C94DBDAEB63C14E485E551D928457A4AB841
9FE493A8295CEDC328DD4C7DB063969E609FF5DBA181C7AA942E5608125A5234
67C4C557248F3B06EE84CC55C6644EAC846D67209EADA1156070A37E84EF6379
19120BFE7A572CC27A7682331D8DACD55ECC31A8F9AF3DE2A1B694BE3E5F232E
DE39DBEA0DD68452244287402E0133CF7483C187C2359C53BC67BF6BEAD3F53F
2E44013AC51A9B29095C72ECF77FCF6306BA32E7E49F6E8D913B0E1DAC0BBAD1
1AD7C87F0F50D90EB4B9DA7D4C46854B9A7689725C667AB24E58422493C3E2B5
187E1F5817FDFC438BC105013E98919551610A02B65CA6766714F5D31DD9BAF4
540690DA2B78FB068DE2E095D74093F667F29DA30B90021B93B32A43E3B04B43
9089A73205352757D4B8D38813C1307B8277DC8FACF6B9B1004D9F6A61609D09
53E1E801DB6CCDC2CE722AB9532090DF2A276CE55B718685506393ECE1A1D8E7
2F00B7FE43F436DF11326A019889CBC27F1F51847FF9497415A173A29066622E
048751829C47D95D6F91227D3E4FB6FEE152DCB39F263514F9B38C75E1C2D619
C98D564900811EFC380B2A28D721CC66AE643A985F5D21E08B89E53EBFF0BD63
20731E7827171A12F686FA3E25A12F2216B403B64174412276C63931384CB9DC
9383D051DC9A9E103449A6C52CA92F7760754D8ECEA38E3DA9CC1BDAAEC60BB1
838EF0349D7B5D4433CCC5C58EFEB470656BE327D2B4AAAAD3F8FFD4048E0779
45AA3103DF4B8824B177A5C15B3F6D6A4BD80817FC43796DB9779DD54F86A9A0
7EF76849B68BC6F55573AFFC43811DD97AEB75FA0ECC52F8EF40BAF989CCAFC0
54E99D2B5083F405E21652EEB80DC22255A7689A824B564BC9BC0C250DB1E604
3E69C471372F68E0A6FB74FE1D66640CD961FF677CCE7B3B01281D181D6EC102
8274DD085C94BE283E09C204280C795ADC6E012CA96C8CC08E227E9B29367129
ADA6AEA938D6D46B8740A83A9D2086D7747A7EFA76F246022ED56930EFA84BF9
41358ED395BE836902ED1C5B5B24B9C4ECAA6AC17AE75C90A3AF6F99DB5E1A4C
B1BF6ADC9FEEEEFF2A9E2039DBC6D3543B0ED4337FD7A234D5215418E9ABECBF
9A4C300E09C5E993DD200FC6DC5566C0E80D251662532A3617C5AB633640DE4E
47ACD8F3DB2786841EFA4CB73E79E39290FF79E5BD4A151FC3FFCEEBA46DCD51
DF86350B0932EECFDE5B4A5C6A7200F402C2650C90911A4EBD51DAF1BE6E9348
2EC39711D329D1EE17450C277D5CA25406B334F3E3BE6177C3C4DD5601933621
A33B1B4FC4A198AB9252AE6263C8A68242F47F51DA8EE01A9F56D5621670906E
779A09F2EE7F6626FCCF8A6320183188E3CDA3E44433EE14D03F32D57693E52F
07EE548A41061B4918C364FBBEE3EFF311DEAA38ED4E45EF76D0836B6302B1D5
8E2DAB02C628657EDC71EBD82C13FAE204E5EF0B1807E40A8A129D226EF6C9DB
3251236B41DCC5400C79C96758F7C17CF630213C65DDD65C19D19E031851B45B
70C7D5A118F0A61665C33320527A6A334C1E87EC7978D94605398289B47C1BE2
B6FE84D9F485FAC00BB53DC040B43CF54CCCB2ED768EB7B2F4BC90DCEDAAEC89
825FD82F60016F74F5378BEDF4349C865197CAEDF5D9F081EF34781EF2BD82D8
8E81C610322F5D530ACA2C996AAA95D209FDFA01E1379F431C8646CA87678101
333321D8EE12BD1208D1C93DC15EE6E97FF06FE0FE87C80E62D74C65144E9759
61927C24045A0AD8526EC93454BE16BE333BF756F4F24088C0DBF837E847506C
7A5E2263337ABB9212AEDA345F46C05C7A73E4E5C5F6DB3B19CF321AED3D21E1
58EDDA88D7F0EF377187122F7075A79CE98D76D37398DB9EE33344FB9C737394
BBAB7A1CFB2896FAA93F3409B6FAAFCC4DA22355718BD949671202C7E128397C
60DB62B28BE4AE810AD4857EA7E1BA595A1AC401970227F47498D3B8A0DE2BDA
C36CC56DF1BB13E9FFE3DE3813BA73C2ED17D141CD183E5F70C838F67955C4BB
FA0660CE09F08B80038719FA0FF75540B03B443F4FCD50BDB7AC66FA90DAFE0D
FF67FAF2B6F8E417E056790EFCCB2D180D41BE687B567F2A8047BED3014CF51A
90A9FCFA68D4F4898D6F4D11B7110D3913E1295C9CF81D045B50E23C85ADE82A
C44E5D6E5DA78D5502AE1FE7C3C5C88991D4A92F27F5B2712609BB390544A876
988AECC3B5C440305BA8B0FCE5CD9AA6F76442C1A4CBCFEE466C7D489A78A837
E4D4069AA5E3D73F78E9ACED2D4395F96A2185481434931805A2CF6638AC4266
A59298E4F620D6006AC03676484665145F92492EBB94DE4774501A76DF4A9511
3E4FED1B205003431526C576FF925E651DC8C22194667BAB947591A38C4927AE
61B874092DA00F8BA622B89870112291C0E3ABA7E99297733A03B9B75C50D068
AD39B47BEBB6C14F0BC003595A7FB2811BAD8F6FD15E27B86B5AAF00C447C324
62A1C55370C10735A8721187A748F94177AD64D5F2553CCF4FCA584908B2DD03
0798B369B1C72B6B6DF17D64944D5564A9D495E7FC49D8A31B2183EC9332A9C1
6BBFAB6E6B7A4548DC05185F0DB503AEE94C4430FFF63DFF0384C544FDD57CB5
FF0E1E7836163FAAB0BC44463AAC5E8478C9BD67F42F74615F531E84D7C0AD69
179EA57757ED765F43D74F96142C85BDF9AFA31B9B8E62BD64AAA2435A1FE56C
55E60DB2E7DD05C3851EE185F84C2D4B4C0BE3B6D6EF00FE931D4F32886F5D10
5065BB8B591E6394D5EC5101AFEE7E6B2B3C12D10AB09891FD582DE79CB3B03F
8C35245B049265819E6F04016D331DF0F7337D9420DEE0D040CC8853F90A19FF
E2CE07B8F8B89A54CE867C9A9B1712AFE73164E74302702FEF19539813DF686F
E79FE1D3C53C923F480F1249D2744BF4815E5B8CEA1C65D86C1ED182021F394F
2F7C0052562FFEB7883DC852966AB41C8A5EBCF7DF0C284002176410A2FDE598
C7C216FF8CAFE78C14CBDBFF914E54F33E28EED83CC7F6277C8E57E186740FC2
30F4A1E5A442F13F6696FC51AC45767BD134F1FA22CC3126D549E03F6A13CDCE
8D54A032BF0090A423F1955F1F8B2D57C4A4BB68ACAC1E30CE19CD65B167EBE1
94DE5DCCE3C05BB2346B3EA73C1BD2AC9843C662E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 72 /H put
dup 76 /L put
dup 77 /M put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB7001CFCF244BF664E526105E2DDFC0AF5591370BB319E653A6A2AA7
FCD80CABD3F952FA948239E2D27007F90D70B530BCA9F9B190DBE43CD8F45977
032313055A92DCF087A920E262FFED4C1FBE0741F6E3CA517FB84FE36F651417
4FE36CD13A028595FE329F44A761F72AF519BBEE25E288DD4594671089F49497
3E6979CCA9EA2675A024A9DE3A3D4A321A124CC482A7EAE2D0D50EFF054682B5
1727079F666FBD747474F16C6CF3C630224347E2BAC3AA25E58744F26E38CF5F
8E1554E4B6D829D8394FEEA7E09FB399A6F9F6FE94A16F5715FD4FDC7D7A3EF1
178880044F05C2530464E792280FAF0AA8D4A14B702AC328AE014EB00FE980E5
E726208B486A2976D6A92B7A3ED9313D1BAFCF841F1950A57A797BA1CD38FB73
4B34827D7F8CA3599E01D18721611D6C8DF6267CB61763D179FAAD8857CC1703
97FE8AFEF39E280DA6A2C28A75FEB3F2D1619A48C667C96C7C2500E3DAA62B3F
4191107F1B6969832846D43EA57783E601B99E69152B7FAC94AC7A1DA9B97C75
43EF8350CE3D6BFB4E89FC9C97068E52EF913B7D9852DAAFDC791CD6ED8404C9
EC8A77CBA3B76BB700D5F738F02E6E303265F2C49584A2D59BABFBF857B1E109
16307CA2ED1078266B96418F90585E68F390F042C2C84944118210050889C171
A8AC7845927DF0EF6E260D3BB07136F220697B343A514A39CB95DCD1315F0698
52DAFC826A336DBFD6ABC48656EFADC4A14360EA87AD5E0806CEA3E51ADA68CE
1AE6340946D29FF7ADA40FDEBC24A1E18E9AD16197B92BFE3E3450AF12B2E9C0
2E47E9CDA14A7B48A8E2D3E255706ED4ED40D8C8640F143C392DC693DE633236
97E7DFA180068F364086A7B87896AB24117478A8A0DFA8126FF96E655C9FC4ED
238E79381801C3863CDE5834E2E33CA890A3BAF5B68AFCEEDC4A26FC6F6FD3EA
13071C1F1DD5304C626E8364C60FE6FED580570B6F13B70B356B1CFC3303B857
BD677D60CF0CCFEC9E5487CD8FB2D7A7507B451EF27941171373CDD91D194B47
2DB299F80484B2AF1B39F7297135CCD652FEE651A9801D4328F972A33188483C
D28EB6ADCE79CC80457CF29F436119A291F612C991EF0EA6CB6F3C6C21BEB7CA
C76F77406FCDE83FDB9262CBBA34CA2CA2310732163D9DB641940A82E967F1AA
F09601C1853BD4C50AA3347DE7E4CE19591666C72337E474A7DE37A38598BC6E
889F4195340F819A6F5F161BCE7B55A1D3CBC27273CE29804145975B2DD760BC
209B77AAC7632BBA2667D36CF96BF3620247523967F78D9A867176078349CA2B
D52B1FBB56D5BF5E61C2CC3EE63D2F5D918E13399F8C48CC6C2DCF326FF05301
DD5880D7C429D0A1E885FEAE57DA4C9CE47B50803A8D4B1AC1219C602DDB01D0
2742D29871ECF3555BD731F3BEBD47E6264F817E3A89AD9919C32FE522473573
3507C90AB470905A05CD409DC2221352F161C2BC396BD76995DDE110224A036B
53A073505E7CEA86ED95F3811AD2943786DF0AE7C3A36FB419125A07C71EEE33
240B6BEB606F649216877E14B50030F199632CC6FC83A236C8B9B626E04A1F43
3AC37B11BD1B33AC060D8C7765B7921F224695AA785F889F855E1DF7F611E63B
0AACE9F835C8D151F73BA074C9E97229F03F7F3366D04B3505AAEA7F1FBB34B5
2134D778E7B994F1B2E58A3D5CBCA70846DA25DC625031347151BA6A987570D8
F822F87927DF172E6E2389A72A4462B127AD41F3C39D4B2B7EF45200CB4FF71D
CD539D2086830C941F156A98358DD717CFB531695B652748C1A04FB501857DD6
AB5728A759B0A703E9F30E22F56792410E91E2CA42F4E50EB7959CAAF4E26720
6D5CD3CF36E4C0581522337A13EE04A03C00BD1AD5877D91AF64E06CE2F38E15
6E8A68223D9DEE51E37BAE4A782BAD7E6E892C47FA88FF4F15E43DBA7E05F93C
643BF55F03347E6F6B950142A2CC3DB87F3605CBC097D15871E2E5CB9D1080AF
29F22A61E8FB30798D0746748DF6F2348D5355FD9AB836C10DF0B71E51F9BB09
99DC93225884285DDD1E8AB9C3529A6655008080287C001C5A8136FE6E689F6F
7DDB5602E20B3A70AB4FBC0BE851F86ACD2602A8151D563205E3A085D2E13101
6B0180DCEF20FEC10B27B7FE631C6E4EA0141652B88A9842F0678ACA4000E14D
5D282BC91DB95D092434BC4DD24C991F0CF73AC429E0150845A90DE7BCB5E303
F7B3A003A8FBC6D7B1A59E6E056ECF946D021BC9F43F891C7E2097A2CDC87589
994A59A6FF8D5CE4A5F901ED93BB893457CE9B7F0FBDA69FA2F8ECCB92973556
7D8B0F6EE76EE50C7D8ED883DC86341414007B5DB33C20DFCCFCABAA9E161E71
DBE79079B3A1866BAB48DB260F4D974F4D3F4C535940ABD3D0004966B98203E8
CDAE9343F6E5FD56DC079DA9ECE26A7A50DEE416D2E1E2FDD01CC3E55B44A50B
F4155811E9405844BE8591BB7DAE22D073C5688EEB7CAE1152B687114467EB33
DF9CBD40F4FDE4A8BDB20BB1D97971E6D1083F75BAE9232B6C6182AD734E2EE2
5D6FD1F670BCB44533FBD484B15F03AF31C9B8F9C308E176CB97D3BBFC6C2291
1EC1FC1947E51FA3BD075A5E1F58B6D3CF786B01F950735B583A5CCEE23E4E12
758DAA452ECD9EAFA44A0BDA2542ACB415E6E1C574F89FB7F5B84641D1B2B777
86D2212BF6681F460296AE1BC68FF4423059E51C7925D0FF75ECD21519B06EFE
09BBE6747BA5FC753CBABE82FEDFC6DC357339E8484CEDEFABE77DA35BE4BE13
9781964F5BE1494D0182CC1884A6F509257B40CA1670B901D43BDD50F2D9B7EA
1901570B867AC167A0E5CE18889C5ADB6BDB95C7D0CF2D9DF0D3274F503C22E5
BBC4076D20A1A20196D545652DC9A064EE1B5F2F976DEFAD01803311CF5005D8
FC15733C855EF9E81DBCBE3F34208646945596F9421EDB7B9961EE4DCB1BE306
8663AA317F3486A350938644805703159A377D41AE3BCCFEF33D5ABF2E44E15A
0D74993713AB2F45D71D3ABA1896134576139FC484D9F0CBEA7C4531A23FCE7C
FB66F7F6BF7ADE8B682C8657F3702241D32A169BF73DCB5224BD68E9E17644AA
97DE61A4310736FB73C17A89C05E13DB2A78C2640BF8AB39C153129B0D568D6E
EFE9AB6EF84BE461B58BA229449EA51587E2A486982754DEE5B3B2DCB7C6BD0A
C945DBCA7F717E78DA7B447D386434B1060D9414E5D8A29CEAD93DA0C6E243ED
AE322C3A3FF7F8E10B52525F033276609B12D2B2A974CBEB629A5253498609CE
E849D0530E35C78B8EE0A4BA189C8B5F3BC1A832BF1B0FD6CAA9DE569F9DF220
DFC8567A33562D0DC6459266F26438F3944E18B25EAAC866D3946BC91FECC6BF
992284CCCF0F56A33BBD208DA203F95A2A3D9DA8AE01FD04A35F7F5D5F8EF67D
9533CA1F0FCA03234F19CFBDDF6FA31A9267828DF9E295C8CB88EC959BDDFB16
BAB38B1FEB20C78CBE1A34FDB1386D4ED6CF56891C21A08740C1529F68829771
08625415C6B772676CF2182A0283E424DFDBC331CA44A20B0820A70B289A46EB
E28D9E58369BD6AD226B33D39D09B5EDB4455D547FB8DEB7B9BEF9AAC770D52B
047702FF6B72B4C41BAD7A2A80B50E57B6CAEFEF216C715D414D6766E10A155B
2F5004C7A63447EA7FEF672B8B80EA09CF01DB1C481CCDB2AC36788AEB29F911
27F40D8107183FB4E4E0450735051312C32C1A2AB7B3BEBA74F38B602321F8F3
E44F6D0D74D307481798A19A4739D8337418563ECD42DA497CCE321B90AA7935
71B4D27B1DF636F076465C934514C74726389674065131FA23737C3C883DE02F
1CEF7A36B519B79042391A488CA36AEB519840F9CF9B3DFEEA214EDB12ADE092
834B46D25825EC9EFE7BB24F2041DDDF28ADE1362888BE6E1BB8A85CAD041EAB
7C77AAE1B615638FE5081C7E00B51631B18BF2754D6DB06123357E4A424FA184
329264BDD3D9EC0C70D26A2686FDAEFD061A2F4E277D30C77A2BD50CF5CD30A5
A03CDBC2BE4496604256FA42450BF423CCBF88E2866B36F4207AA5D4E254082D
1F490FFCEDE656D5BCFF36965EBE6C87D25A1221DAF35D5C75630D49B57FC395
0DF789FCA3D66C288CF0355B6D71658EAE85D773458F78A4513F1956EF291D52
782B0D3F00FDFCC5640F77A8D4463F1D303A202FD401C311498EC27840368AB9
A4A5BFA67E1616CC9DFB99CF07DE87EC0976A2C386BB2E6987F808A39B5C3E7D
CADD4B195739FC4D731C1BF9F4C5BE4F8704B834290F768A9B8648A62733AA0D
C258F4CF2995B5A8589320CD2E35F0B4DC65069D4968D8A6A5DE64ABAC879255
CC51B1D56892F9049C58AAD7157205544B63CD7E9F307B18844B75547B472C84
524B4871B5B417D02D3CF48E2D0CC47702D481F87DF06097A54C26F8B8E57BB8
011F2B6660E0E4801F8D314E94E92B262AF3879A35A58844DCDBF779DB8C887D
456565D2CE2A77173A8A80852E2584E754A332AFC3D725DA983258449E2EE295
08617C30630112AC9228D5C34D7C4F95D81CE8579A26CF6BB515947762C1D1D0
016F297BFBC903A24C52A4646F00D5F5B6988E54FEB066271CEBC5E2C11D3138
4AFE51FE6A2B78A7339BC61770D83823CBBBAC8C7A9FACEA48619F2D08A7EBF8
5DE9F84D3A1059BAE35205E670F99EBEB485E219C37768D9046E8A4FDBCCC863
DA2FC24FA1DC70B16E760287848ABEC84457D7AB67B8691EDAC89BCB3DAB9498
0381A8AF61D9CD1125312868F8FE749E900B26132D2C23C2C78BCF1C9D76AD11
E71F299E398FC99D315AFC11FB688EE728F23E9762B07F165AAFB68F7E83644C
487C87E9B0894A7A3A64569623E7FCE368FDE3D64ED484894BC0D464A8B045BB
A74AB4F747FB0965412512EBFB9EFE9F2BE518250F052BF888F948C826B67B68
BA6587159E93C89636D548A6F134550108A05EC277F78305FB8D28DFAFFA5C56
1642DED93945AC1B7F1D285D530409E60982F62BB10B92F6335F9CEC23B49DDC
7C7155EFF0C87879CC0611987027763F8FEA7BD41C70EF96A1D35A53FF0BAFE6
157FAE62E8569AB783D98B117914DE8BAAEA01324A176D2D2BCA9300CB0AF397
3EB4634BF6D0908C6B3FBC4D28940F84124905E9BEFE640574FEBF2FA4C95856
6D3E38A1C5DFE9EBC188FCE266718D0572769DA97BC563F815FFCE138801EA95
9CC9FF2741AA862ECAD87070A6AB314D809AA58DD3D5E0557BC511AD58DD226D
540527F17881E4916B47BFAD6B8A100608F1BB2F35FA21EB6ECF877BC9706AB3
F1701BF07BD155DD583E38C618FE472E4977DF2C27F3E1C329294B4E2FF151FA
A3B838012BFA0BA673F0F3B73C94C84220094E452E27694717D2D621A3C75628
7472BD4FE74DC4B28E4F05BCD83D8BF98D75713DED78FFF54E1974BF66B4C49F
5AF86B678BEC655001A1767A259FC01A75DF1CDF85AEDE9665544E4904E0501B
9D60E0AFA1B871E359E8789E22EBB86A92F36A8578ADA0C7AF01BE75795ADDDC
35A22ED8F4CE361E442E8AE775A9263CCF120AC8F88C1DBBCFBD190F639811DB
6257857E2B763A0D9C8AD6806A21B94C62369EAD4E78C1884A729416D3D03B71
ED9FCF5BC849A1A68B9B67801208E51119EE99E68F3348A5AA03123E1A44CF1C
CAEFA6FEA494F08CFF8A06DC4C869BA091565DEBFD3D1B86B6D77BC3DBDC57C1
18BED3FBAC6F28229952A08A4697C6F09AFD4EB3C0C7B43EE42FC908B1CF6B10
C888CC99DF3A464CA7777E5AFFE5D0B85708AE3D7612BF70A13436FD54708672
B8A93AE7F4D93DE1E41374DE199EB01D7ECA67DA8988469E6938C2D5487DDBDC
27DC14794FDA388AA8D5C3B18BF56B441543ED3D9BECF6943E946D4A4B1B7016
F1FB1B7C6DBACBC4DA0C622C8A6A07B663E6185DC6FC493E2300F9D4E128A64C
658623E7D0E9056EEF73FC8C420B7FA5511ED0C92ACCF5465CEEEDFED627400F
AF5FD01A0B173C891ABE42BB2EF7F385C4BF7B8CEB9C782D1A8E2EE35C0AA674
5008E54E4698B9509FABB1A7E795D7B0E8F37423350EF3B1EE16F6999D067590
90E1B16F40AC2CDBD32E60BD57892E24C584F0DDDD6364268F863C0F775E0285
2978BA82D4C45BDB6321EA9F282443C0D0504BC32E4698655BBD8747615D134E
3714A3992739A0A96D5158FF05C27BF264788D5E2BE67CBB1B6D5FBBF95E5625
887F7C89EF40DC465B27DC2A044CA9FB399B4092CC16BD2D39B3DA3BFE9D5C91
BBBF4091DFBC2DB9141AC53D9A2F554F5EFB778EDB04B82C342827E10B6B0391
BF6AFE0A25714B82FD5D9C91854CFDBB14C33C59A98CA04841C0597AB4E168E0
8FAB80CCB52DAC031DB6BBF38B945E7E1FFD5F82EE2BB8CA6C8613109360FFA2
76EC2BDC0ED5EB9B304BF60DB4F493DB91CCC085D32A4523B214BE492FD0426B
8BF712960DDCA1D15B3982B998EA8B8B77EB2B6D0EDDCF16E57BA637B97CC626
A9A784A4B2D64D852D136B79E57187DE6E96B7C43ABD88D07E65A2D03972D5F0
C806028C9B86C0A8947BE268DA43DB86F97D5CD259ABC05826266442936E4694
1DA92AA870B8DFC8AEC3AD6D2D8882AFE93237681E16D47AE8A878E9ADF5746E
07439A900CC2CBFDAB0A2A2CDC0BF606A6651DFB05D2147564555B934CDDCC88
44D17C865C469A6A0B066153A0413489389A027EEAE3BD8330B3A632E7B4E23D
CCBECA12B839EC90F48B10B4CD8AEAFEEE5B5058F73916DF86A250ABF71CE523
F48CAD58A4948D525D9EB2C2A103E9E8F505EE92E03A4A172B9AC5AB8069ECA4
35FF9D3FD63E9199DCE4914E2FDB80A5D39A574CD10BF01321977D2017C41649
D1AC862AB8125E9AB33BE4747AF13D03D758BDD083EDB1DA0E9308A9B28F2625
1705DC53E8F8652F3B7527DE24AD2E8F0D6F159939CB2EFEB4D8799F05734888
61C1F87904800B2B1824199BDEEC965E32EA1D7A0B2E88758FA69619C868D36C
6133967DA8C08C3CEE5F577A92AE6197F3B8BA669C3C54B433B6DBD7F8167B06
D0DBBD628104071CB591E7D63FF28A7681F8B58B0959C4281DC35F8C6FCFC7A2
BF0B6BD986B0031953EFEC97FA90D73EE99CBA5B4B96A87F26FD7347608CAD68
94D35BE32A81336CE0658A8FDBBBAFABD22E023BF17849871F2324F96F77EE0D
82EFD2957F9CB01585A3112CEAD6E251721054140FE7FE51055D10A92D631BD0
FB378B741372D3D582724BCA24FF84AE5785A7B52E2D6A093ACF4F1D5FDB08F0
75F7F5F52657988D43159FD81464892347E34BB656C14C5A67A6A6BE55F4D162
DE8BAD3D5E356D5FCE09B7D839ECE3B325CE02C8A75FBF558755AB47E684FE87
56B1D3B01EFB32B35325585087DBF5DD059EA6419D6AA6E236E2DF3C1F622296
D7C9A484C17D038D9CE061423281B2313B0E140C390EC4549144C66A19550875
CCFF64B4437858D914C931F818A1ABBF1E5D15C1DDC3B5317E7F47B450E7B973
C373045D3C76542043D13DB0466D6CA0991BD9F0FBB4037066D08A4AC0467F80
57A853075356DEC00BB52C18762F7C3094CCD040476FD30C742F340C791C73B0
FBF1B06764840CFB28EB7EFD789A74A20F120CBB39626A06E83D6BCDE3E229D2
78C758D7ABA3635FF7B9BFA659D8B61292E114A8158E3C3B6E6969600CE05CAA
98D328D6F98523491030A955B33F7A722514B1F55FFCDAD6BA6801D07585780E
E0D9436BDFBA741F9A9E0FDD7C0DE4BF3C01CD0DBDC8CA65C7DE51AA8C74256A
DC4B57C9F684513DB1360C198BECD1C4CD349CA939DC1530D628DDA654A8DF00
82562E626157042381DBF13D3B3CC0C5C9ADA437300ADBB75C250CF522DBD72B
64E2922C3264EE8726A9352CDA9C657721E863C18BA172EAFF83A29C30ECE62B
0ED1C78F7711AD7ED68CF3ECD3CC552A40CB5F9CCDE31D68DCD63C40EE91A1E1
E3940454ACAB241049150FEAF1F3533EB9DF1255953A373B81323A7E861E532D
EA99F3F574662D46618A506ED1583837DFB4371184FB55F5666FC7AD0DFB9E9D
186C657DF626A3AE734078D8B7A8DEAB7F54870A2E4A03AA2935C338F9A4786B
A7A008F7AEB1F72889DA84611BEEBBF4AE181517FEA64AC2384F2342AA52E6EC
DE32A8F31036F208AB4699A0A64A9CEA529A0DE1F91E1DB984833D11851B7A0C
CD46FC9045FF964A41C2A616273B70B07A7F9E0672CB5D47D1E64C652BEAFB57
B4B825BF373A2802127EA36440C8879D782CE7F0A01730A3C16743C2E8C66A94
92DBF2CD4734B3032CA360131A1EE695E8119C79F2C8A23B77FDCE13F9843EC8
FB73893215C1C28727A0DB852DD861F2352260B8A8F0E61A563A876905FA118E
B532C4D1F3BA1F3BA1B766D2D3F57AFA010293985B9154EACF55286344BE86D9
EA4653A453F8DF7424CCF5087166A620EAAED6F60BD9C4FC52C63EC1EEB365EF
9991855C9FC7FFD106C8B423DC17C900C1155C7D7101DDCE5EE69C1F2CBC7CD3
BFC9C9A9C0C5BD4922A3F8D087EF613AC7EA8E0E19D590539FDF6DE09D51D817
F3CFA25678F3AE010483CD0FC9FCF2DAAB30D2602E94E151D7285F49DC5F2B0E
993C13BCBAC028B39287AC3E06742D4D9D8717B0C138292C74B4730947637701
511215AA7E84F48EEA1177FCB37309B14F347F07B1870CA19D5FF853F894A5D6
FDF2BA42D7EEB4619696C5AF59A25306868FFC87C5213FE32B749460E598D29D
6BED43A315DC2FD05FF3B013AE3A146E30E377F68BF4F3FD0D05DE007BE28675
9F5E45E724815F500A87C7C3696AD83C09F7FA89A52BEB27A85D64ECF4248B83
CB6C605714B87F80D2D60B7916A2355BD52AD6F7C29852520C8DC2F9A3D66ED5
FCBCA8420EF5CE05338343CD8DCE442FDF6022428E34A306AC63F04E4FC97C32
8BD47A58E04ADEE7E82E2EC5147AB2695EA49F57F9232170BF8E525C9C92BB31
44F6D45A8452DD79387764BFC23AFC3D34004BD5B9B93D8C8093E2B25DBD26D6
2A2EE1577379C94F1FDE338D9555E03D68329991F425E24200ACCC5550FB9569
FB6A91CF63FFD32BFFF2EE3FF0114062E725AC1E68061B511D8592979E32BB00
7CC1EB9AA1CC6B7A67871660662439DF6CB9AC84EF0A85BF155A53A070ECA426
37AE38F80544850120D083B9AA846276F63FB5B8DAE8980A5B99158C3CBCA789
85654840E5561AFA49F0FDE2E9B8AAFC203923A50FA3B0CD7F3AB6ABADFB5D0E
F7DE4855C48D7CA7BA076677116CAF7AFD020864BE36A565BD2D314F11B4B195
077E1CDD0EA45C3FFEDEC99621BF89C1A021156EEC3C7DAAD3A1364C284C0215
99C537FC677DC5810B80E97921CBD636A0BB443B2D06D4B96E45C5DC438734B4
788BA6121AE90EA9ECFEA1F172AE268FC2C9DE2FF64D4C88BCF762C4912D4116
558A7766BB7B42C483643503E8C005E548555BB2C60A11AED49B45B56FDA290E
888E36CEAE017827F8417E38115C5D976A53554F6167E3FC1A52AB7B35A3A63F
A0BA549C094D10074656B4CDED1C8152C875BE68E980738353C1CB9DF3C1F18D
5D15FD2397D7E4DBD1C2D120E49EDDBC1F015D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 34 /quotedblright put
dup 36 /dollar put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD3199379D82D571
ABF7BDD1BFA45A0F0E9ACA0A400BC5FE22DF4A041BCCB93DC23D547CDF0A49CC
6C7DAFF30FE0843CB3324AAA3B944A4310F30CC0E33018493269C81235FC3F64
14337A8B723732C990C1B04D999B8D82B15FBBA3DB87928F9EE53E837723E7EC
88D8B7CF6D419E37D08F89E84B1D96E6A3C789E6B1AAB9EF8E5E639C230996A6
F2EC5251461CF7924BADC1BB2D99D5765E0F04FD0D8236E1A0B5FDE63E55A8FC
C6397B1993EE08C33AD29C43D033316531420847FDECB667D6344DFC50A6DAFC
C37D643554E2D431472249C8FDCE5DDC0B65CE2F2D3216A9111DAED4D9F97E2D
F8C7011C97A914EA1ACE4E16F5B71F8A31E35C395C3BF67AF9E6C4C958D5123B
8D4DFF2BD297376293F62A44A47E6D5C64DA4CD358A38F6CC8CCA89FED056BE9
30454FE14CBB92A57EF0CF422E89EA44B9307EA77053DB6F3B56AFE5848B72B8
957F62A653018E98DEC78CE89FC6010F1193EFA0A1AA9BDEF9C2484DE07B58DC
EC1DE98E3FB5B4C7E86616C251A33CD52426F200FB8824E203666E64059CDB84
A8BD323E6BE0452B11BC9DC3EACAD5B8A786269611B579E0B60F46E596531968
3E97DEFFE1AED9B3D9497A6DE8B4306332226ACF0E327E8B25D0475B25B4CD4C
A0921275A753214B37AFB02C2E3CBEE053515E87D6BAC59CD79D75152697EB07
4A8456C46F7AEBECFF9F6A035F7579AEF49A3D4F2381DB9614C6F8AA81B3C82D
87030799D3764F58E728D4E1802E60D15A48727EE393E38A3EBF116741C894BF
3E902DACE568C6A31BA5419B367086124308D1FBD26443F6B89038FD8E5B31BD
73277304CDB80ADBAB2BFB7CE598313495BBB1BB4A3200B92F7139F5D4E46AC4
42F23E0FA12E8E1706797E2C386D89AD8616B4153EE155E5325B79EF4311A81B
0197540BD37C3FE2C67F2668133D32F795759F1FFA10743E9784E90BCE0A843E
33AEEAD8CC05C552785B60E7FA8AEB4C747AE9D4F703B6BA26A68BBCF3F97B17
D06B177CC07FDE84BA6F0B3381FED4A12C27B85CB8E4AAB57CEA23C8F45CF1F0
EC68FEAD670CFC79C944540033FFA39DB14BFCE5B22525A6012729A4006203BC
8A46C7A6A60DA0F484CA73B436527795BAA59086831567FDD5B3BA6936B017E9
3009C70F69CB94D16948A71D4623E23EB4EAEE86F5231C541CAF82665BC62039
D1BE0588B2F8604337C87B3EFFBC7AE6E80174478991FDABB8A6114BDA5E89D0
02AEAB0629F3AD00FC0793C21B597A49335CC40D3864487436215CF381F02FBF
83D16120EEB047D41F6E4285C13868540D42CDCFEC0D85FAA97A1454C34AE802
7A10873C04482D5425840D870D004DCFF1B72D0A8F0DD0AA6220B4FCE7C141D4
308E4465F8BEA80D96187B89F96A843DD48105C7E99E2F9BEE5001DCBB0ACE93
422A645E57F542B2C0D0AFAB3003422962D5B38D9ABE307843D355100A467675
43FEF3277C1DAB9AF6E8F748B2CDA2B90CB588C40C8FD0CA310EA64EAB1FE463
A39C6BA07A9993E78CC5659B3C74C676B0C863D4261E3AC31D77C477A44843A3
FB0C6E449C58426DB8A76E8E8EB1B2AF9EFBBFCE77154CDAD83EC68AC20930D8
14C6A3983651F2229DF2B0FB26E2B27A66D245F9E7F3050BC3209E5B8979A032
4403D3BCA11817B7BDAF8DC5AD1751F0ACFD6B6637EA7AF2D267279A477BC20E
33228C7F6AE9F1143B51C1BA28A9EE1CD068DD219E4DC256C73AB8032D75B56A
B328435C9964D7A206185105AFCB9AA4030E2A3EFA5C0CE2BBD1B9A23CFAFF7A
C345610FCBDFEA7512A84CABADE67EEA09D678C2C287675D73154A460057914C
456336C9EEC79F098182DC77880F7443289E6E8B0FC127B391CE956E942F7121
D70F9DDFA7A9DC499AA907866CD82B0E1E8701AEF22F0F80D184EE7CAD084A51
EDF2A7B19EA6294ECD7931668EE08BFAE13C71108D85A58D8FEFFCE156F5085C
C527699EDD48095E98B36FEB377EE389508C28BD878F610638C7B58AF68CFECB
7714EA8407649E5345CCE0A225A39AA2A1C606E5981D948A347D5D46AD95C4C7
275FBABB2FE9F12E421123F0515218184C068E4CE55CEE9E4D5B2FC25A63658B
21DA28065552A4F0977045201E64134B6B3EA078A4716A24CDF975CC7EA03D80
D1B3F78C5A27B901CB92BED7E150B0ABC194D9863B55B7B7B8C545CB89D8A5B9
BDA00B9873DA68EDA3B8F0716D383FE550B3DF19AD8BE1E69319E023EFEC3EAB
422706846F125D512F6DBFC92BDA03138D0390AEA3A1B182A29C409EC4020D7D
CA0782E7835289221924EFCF4530BFC8481CB6FB69DE8C02A348F1D1481011F4
F50A9736F55BECEBA08708A3D6B524D60ED12FDDA174C3E0F92DADA28C5DF16C
72BED6CFB56FD58D9831D3CB796747BD1DDF0C56D2BBE88AEE1200E889701FCA
DD154E659DB557E28BDD7203D7CA48FB96AE1C2F9F7E18E7DD9DCA76378C0AF3
38956B813E3BE2A9303CDCD45E172A99A07F70E8DC28DE1607AAAABEEF220354
426488C60CE72912D1CE026F8DC0E546617B51D60D7EFE2449345B8F2DE92135
0960BC29C2C1C8143537BE246A92846A27659583BB7E9903ECAE426BBDDDE7B6
F5A189F57677D9C8C722AC16F9D0CBEE4FBADB108A85223E41DB68CC1860B3EA
EAA5EFE41FB05F1528679213315CBE930CE102FF771BEC1EF99B8DD2CDE953DA
5D7527D41340F9D2987C72A4CDFC2450580AC6F58DC4AE9C62E1F71146224A70
0E1245ADAD0F95E841E6F29D25BC8614D6C26FDC71C4B423F9A801366DE1FC25
629D1A20ABE97F2019E0A0A0825A892A5AE88E593C70B6C0E5E7291006D04DAF
BAACEC1A9310BE4E6577B6CBAF7A09D46509592A1E8D6D5B46051CE1ED882DB3
4E16BF5462017768B98966C839170320C76CC9A941594F1F8E8A5C48C6F868C8
5B3BE2C9DA00F5052C89B6EA0D59D1D2749DC0B5C49C5A5C92C7256E7834348B
6D5F86095CF4ACDCC4CF1388F30FF35D0F54F815D0B05D1472799F9A71EFAF90
BB8F95ECF59A4ECDC021B41704CDA2F4B94F244D365B70C367ECC8BC27F76124
0BE47628C0E4A75A6E0CCCFA094A722A45C5A0969E6B61FDE114837E29501C77
CC5242FA1B7B1EB5B1EF607D1274E864F1BF4327D2BCC40383D3C6014E453608
7F7531490409D02BE59EBED85FC2AF9A36305E3642D1CA5C78E0457D2B377D25
33F954B1C0FA929405FE67FE24FDF45762E6F9F22A250609FD5AB05E563F6F68
9D3A55E010400A77053C73B378C664F257495D7BD9DECB09BF2F6FC2F826017D
96931C4BC0B6DE3EC79C367F04EF13DFD32DEABA293EEA5ABD822BB7F7CC7CC9
BFA3DC751C3906A1C32162819E3735C44116659972055C3C54F112F7AA20649A
CADF4E1ED7C692CF08BD1E56D4EA410325C593FC99C2DB88046E03EC5CAC50E7
EEF3A6414CBC08205653BF66F5FA87940EE2A13DE82E5869D6204ABDFB5DB7BC
7F23EB830759AA4303C754CDB848E5F3D7A0A02EF9FE7CF81EE3DAB82C9A0183
195412B254E3C1892D41E398ECB68BBF95B3342044FBB0E5E09BB338FF9C114D
75E7B81424D50FB8472CBAED2FD7D0F14B0E7736C7F69AFC502C93495E9609AB
9A92AD9A55EE06B68DDD5E8634BF10D5970880A0F3F453E80647FB4AC5E9BF72
D272B5102574E2461D2FAEEE2562907531E5B882B7CDABBD3C1F03CB9EC18D50
3C34BCF6741147D65EDDA5B466A2B60C88CCE74CADD5A9B28EBED66AC4F65F25
90068032B92728DC0A9653CE6EDADB8A35123215A59FD0CB80F64DED59E2F03C
0457FF7EF2731DCB114EC7D205B54F19E18341C0A3D100AE516E95410CBE7311
82A2F900C874FA3C784203B38F173A596D97F1F463EDD0A9C0118790E5780C0A
C27A05BEDC84C35F6B9A2EEE56C744DF12E54AC9EAE0E3DD9125AA7FF2D20FFC
CCEE3985E60F0833B768BB4C15AB519F07BDC7181699A410FDAE034C078C7823
1B244F267C94FF60FB482BD66CB070367F80A2BCF1ECAE2BD4172E3818554A89
21B338A4E417F2668685D89346FFFBB3A9B62A7730676BAC71EBD6832E5BEB73
83E2B90516DDD9B4E5FC6E333C5F80860F9E0476346DC2B0097150806495C2B3
1797429677E3A8D56617705236A45B1902A35996DABE08C264A527BA0E4D6543
342B9DE63A263028EA22166257F509F2B1769D6E78DDD186C79945AA4F8F616F
CC86670A322673C693DE655D36046DA981CF85F61D35B6934F2C73AB00A304E7
5C6ADC95F2D8B5C5C376E11CB1098FA97744FCD977EB6FB042AFEC3EB1B58E4D
4C43EA00ED4F37F9AED0A35B7DDCB537976E514621D24489C0D75FB1BDCB0EE4
A8E1655C42EE84502313243E813C86673948328CCCB695DF021AAD5B1ACB2EBB
F01338B8178DCA3133DBF682F67CC270E8B06EC794939C910CCED811C6897A62
993D7C05D2FF92F55D50AB8ED3FB10971366F156AC7588FC0F2CA2C5471481C4
BE8FA81B803AC2183AB938987CDD4CD5F214BFFE37CAB297762FB5C452773932
35C450451C550EED1ECF0A9E7562CD6AA206F566ACB5F30BE7887BD2218A58C7
8748BA48E0F5FEC52FE65532DB267008022C1DDC0F82F21CD0C6E32339B5F59C
0546118C9BB6E9CA87D5A7553F0497C7787595AEFEC2A7982750058D81292DDF
13D4D3C5EF3E4E2F2F558CCEDC8D8CC4C0C370C81DEEAB8E04A3F4929FB1FA36
52519CD132AC81FF43A1B72C6FC4C10EEE6384EAB14B9A6DF028E8F97FB2FECF
44AD4434F8B41FD8FBB557118C43A22D4F6D9071F8AB861EC6F92BB69A2A5A7F
755A7585777EF13218B4F0B7C8CD3691F873B91FDB55C91F25D0FDC6D1C8E785
37B7A2A31A34996DB625709DCF1419D9B6B7024EE01F0C3522BA474FB9A0F775
A3D7692DFD862ACC6FCC18C166E200DC05B76B8D625BAFEBA6F2888A407BBE47
A62B451D49299104C3CD0BE4C7DBB71DE1BFDA3F08B17861B479DC3442F5E588
DBC3A06CB83D222818479BB7E57E6FABA44D92205A4FC4C2987F1DC0B5F7537F
DC7C66FFC26172DE774939437E72C03E6A573F3BA66B5BB49A6AD8AC0FC3DC80
0A62B44BCAB60965E90F883805FC9C84C72C8C29AB67A3ABB33D01B22726554D
9BA6FC8629F01A294C644B2C9AE442BA883B9C48748821B37D6983E7E3E715EC
CF02142357908FDED4C31F9895B835A49322D34EBD2B3C90EFF0E0D73EC524F9
3DF9DA161209F0CCAF5718DF77DE2C0DDD7776ED74C017370BEC666518CA4447
98AABC8DEE70C2ACEE9F224D5F6D006C8B1B50F71B245B6E5254FFB641D25157
E91FB8A2B14FE6B26CDB1483E3FF544D86CA6CDED3DDA4CD8AA42B075AE2A819
58D912A8286DA64AADFD660898167D6437CD78DCA61D380AD57272D97C340490
C33D4EBEBAC654FB25691D4EA554E5325132B6216D12B6B71D28469190F8005A
215850AB5E5870EB353D832132B19F805C4E210A79F73F69E64E9EEAF72591DA
E34E1077922C91065812D21103AA448225ACCF11CE46284CBBF55F8A25188424
3AF784AA00C7DBF813A96D33DA4C113F4F27F41010B93232E935D176DE51728A
126D47D13ADC5225B021F645FE547166EFDE62339804D5B4F5277E7D2B6CCF67
1BD8011FD09C6BF9EF3380F780CF810C790F0630AFB9232777E685376F6AA608
D39DBB0CA5AD1751B2022DB53D19E6816D8CA066F57BDC273741E8ACDF57592F
B62D1EF6760C66C7B9D70034E2325014C215618786722D559F1CA4BB01DF3C08
0ED830AF0FD750DE2577873134A8B4CC44F3EDD7258E0F7C9D7FBF0B4FFBCA75
F8E9CECF988CAFA5A0395E9B9D1FADE9482BAB9DE62762B707B8D6E267243EFD
9590B10742BAEB4DB1BFE1D286E6C8E5F4B0065F3365FE3C0E388955FF8655CF
0B175ABD0E75F70B0F06F589B3D5E309BDF7FC055F5C7E2A35A7CD629397EB81
8FE3D72A2CD374A939F15A4E1B7016157628BD29ADFAE5072D441C1B5ED06FC6
DA905BD9C4196F8BE64D8E18559FFC8EA983B1FE7D1B08FE6B90407A553D8BA7
82C50234417021D92F86AA9703C94485093E33ABC407BED01918C02AD207055D
A9774E9286D7BD0F3656381786A3A2C6BB1436411A9E5605E9302C7591C823C0
5BD0EB4B4873ECD4198F3532A0561EC2EAE51E7D5BCE1CCA814A19A49D8C92FD
880C255CCDFAD5C5A0C44E5B1DE3D9537B6E844EE14D21568AA5756B20723126
0A27C3EAEF0250633A62662210EDF568F3733B4192E247E98305612ED5854840
D9189995471D33817B5DFD9E5378A20F90BFC43452AD875B105F885129E70000
2D90FF54E434859E81E5033ABEEE5789A386CB77A060B529626E16F94994FF4D
24BA2F687C3D917E2A75C3E7C9C94A9EC7AD1723BBCED7A6F50ADCC7AF4AD936
58D4FC5890232C0843AC74E2EECCF6EE63898E8D049815BE8AB0D540C2A93462
375AEF5BBD6BC37A91A8010023E8DC9D7FD4EBF316AE1BF70E223C98E02E732D
ECDED5F807EEF6F75BC9345E2E14D575B2F4969EFDBCFE373947BDE297F5DE19
1C4AAB025119D41921AC3F74194508D91166D3C0990C086F8190D6BBB0A04597
F7A14A4EF66C785F5326BEDB72A7E155480488E0A9EEBA56EC0C33799B739C14
A0F11BA1A92EF4A4D44CFCBD5FF1330EF6D42073C8B3CBC8DFF23F0DD5CC86D7
96D6F6CBE539E9209891B40012409AACDF848D146ECF4CD1293707AD324F1217
478EFE108A412DDB5B564F29B18C4658817968F675B3A3CD4503DCC298156D01
BF48AC150EB7B9661372513EDD38B6B8A000F6EC07C1BD2AC0691ED383716C4A
ECECD67F3DF363977A1BEC87DCCF06855CD74400BBA602E2D0ED632558AF60D5
80EF4306F3127E0793D944BABF4C2A708662CFE47A5FE5E26998554297DF0F31
E230DEE812BB311F4A4808975C16A81F6E90B50C8412AF618A7A501B2489F406
5048B1CC17589CBA6856B37D6C251DCCB4366632F77F4EC4E62C0606F6D5ACA4
6B3F762BD799AE6EE53BC8602F7C6D2280427C8C292CBB3293D0A97169FAC9B3
DB59E5EE20C480D16005A15E455FFCC096DE819E28682188BC9247C821E24B08
AE5350A4F4184F97A4B273C7031AB88F69D0C70A0CC7B2B561CFD37E97AFA468
FF5E2B96E1D3BE1531CA409EAA1D3ACFDFEA9D90EC7B0E822B4125E9F440ADBE
DB8B146A9F4938BFDE2A34CA9CFBDBA9CFAB0AAA082C03734B167A24292C2372
7F64ED10C61DD2A29108B302C13146AD785319AA3E56D6EAD4B2C36141F8C4C2
1F6F8FC14FBABBF0BB481A56AF8107F459D77B69614AA9FBF6A531B9F5935905
EE7F2F695BA56A63C2B100CC0D7785B1357FE3B15C58C1ACA1C307B77C890185
9CF58989553884299BFF9775F4758FA22299AB7169A8BCDBDBB1E4F3549590E8
00F06F4C083737A5FEB619A5708FE8A653B096C9BE004108FB3C14CB6C3C65CC
ACFF5585F89D3B1C24A00C28BA6105968A9DC30973EB37EC6DF20ED8EACE7F46
71159356AAD3C5BAF53804F542C750CAFA460262BFD46CF54E10BB8BF8671941
1E3C9A277306617A13F0722F3AD401F7C267710D0CEF8FB7473E785510720C08
99BA8B5AFB9588A70D649C564A76C77C3164F66DE3C612598EB81AA675B51BD8
342BDB85A6AA0B502A043258EB6CA80E605BF622CBFC2D1CEF943CC4CAD05071
CE546021F99A7C5B6BCC3B1A6CD47E9AD38396460F72C9E3625E64252C72C05F
9295CD0DB177F9FD7933D3484DDFB016F4738191030D8422500516AF9851148E
0F664BA1AA129AB7C167DDCC9214A3A28D07CFA18E78C5CB86E940C2FF13A3B5
1BAA163E2A34BDCC6A3DBA5F614F59183CD832629E92C7C48DB07B64638E4D95
C1388904395E57AE407118971A237BA56BD11557A439C2642EAE93D769A3232F
DBE256487B74BCB66BB64FD6310799E779C9AE2BDE1539C8888CE3BC9F4B77EB
F5D5F474CF34A4BE02139C93728389AB42F5B5BA74EFB1D5BEB270779739D559
66596907649F60EB955020C49D95548BEA3B09BFBBC1EDBD4556253849126AED
E1BE108AB0A96AD33185459B2769C9C2DA019FC3B8F12C30270EE249A00CCB38
5C473A1CEE9F684E1649B685181E0D677026365D9BE0E67023E99B6BC5E4B06B
EE00025BE4F48256749EE22C1C96162AC52C983564DBECFCA918267160D755EE
4BDB168DBA8E27EB55AF8B95C22191C09FA6A8A27870F383A9BB26B06CF83445
C7310D65D1A73B39E2E6E7135F26CBA41D1260E15CD8450915DFD58EF6099EFE
D604E2A8508E07791B0AB9EB4593C2E3A8BA7E85C4228AB0B797157F3146C7F4
44C84A60B7FA8760A628C6396FD8984F53C56D1E8A4C6AD8986326BD61443B94
4FDB49F7CD3B9E512C5D4AFA346E02F7048EF53522031EB8A434432984EEE6B2
C8D0853A090E8833FD66CA2FA55A5B3B6E9DE1B1CFA874F845C6AE6F0482F5B5
31EFEA0826E196DD946DA062471F31D6ACAA08054E467596B56ADB50FD97CBE5
8DE78EBED7A1E0C5F6C941D13EF8DB417622C2F0A44D39621DCB81B04949706A
10C2302E6CE563203AF1ECFA28B8A8C4C0F61314AA0914596FE7A84178C31EDE
F36563E13428303ABF65475DBDF29BA5FE84383AD824F1A16A33D9F1CDCA6762
D3800067607344810126A9EB8949455C1014916976B28E7E369F2CA19CCFA880
FE290AB01B3E3126C9E68AFC766E4FE4B3B1D0F0D623E2CEE41C85A4ABE5C455
82E09726B7B2D7B150728ADFD772A604D049345EA0AF5A09AE63360E5CF846A9
06EB146AF14F96EF43E166FF85DAA40E4E354844045BAFAD5BBD62839275C481
48F5121D2AEBF2445483CA76C33242C741EB7CCCF06B3FE91D1244295FA70EB3
0BC843AFC0BB37C32DB33213FD36982FD543AB833EFEA988AA3399C20E2BEC29
ED109191AA3BF2DD6D4E50A9FA8A1C92F785FE618D0C7F064CF94450348ADA43
4FEFD19EB6F940B01F67B21E53D0B4708C3595CE630909DFE74F69AF8F902732
18A571ABB4EAE671A29FC7843B777EDE774B4792EF64C634831FBF1EA6951979
24539FCCDED2135ABF931EC1133F6EB0A642DD4582FFFB5992DC06C7B8B99B10
0F632CC1A897892944CD85F2A7434AD2DE8C769331922880BB9298242E601177
493F38B4FBD54B5674376A6322716E3C0F286A1E25204B83A1EB775861AC5838
67A75B06CB02F514582177E1D4DD09017830D0E92EFC914F7AF51AC355C4BD70
E4B6DFED2907F7195E5A4F4E769D76E1C03112016AB78944BC751DCB2881E0B4
B20435BAAB8BB78E5368A7E86AB0D16D019026FFD5DCEA62726154E12AFB09FE
F2CE95520ECFBC432E868F65DD458F5CE340BC373989DA45DED6E8EC6A58365D
B2B320D74C6FADBA629B8A9F19049D2AD64A549A037735CAF1FCAC227F4BB14D
70388223584990F9AB940BA378B22BE3F40BC63B02153DE061D6924B183D54C8
AF19EACF26AF39F8EA1854BCF28F1FC61E3848C4B9BD560E8B25F6C3D75177D6
D8310D2C6C1B6CB63F50122D54AA8881EC0153973FFAC4EF14CBEC8CED290913
31B07C48A572BE184F0F50A15F8DEDFB83159EE71276AA302454B7891A8F156B
A5CF6E8EBD2FD58E30A99EA770076356E2A48B14C187F7A599C319A7825B51E7
743ADBE4AAF5991964248848AFF2EBC6A92AF2AB2C634E03D717D8CF6D60D41E
0A302A083150E7D7928498DAF52B07A0D34F3169DC116316B4501E6C54C1DD8E
27F277972BCE306F778653A26BB50D6B1E652BDD531DE7BA5D7AF150C825DEB5
4FB16F08A82000B6A3D8C586EC610FD4256A6D4321828E5BA89C5CE51FBCE4D0
C4C0E0FF5505E614A69C2609A30324D8982D7325A010FC44DCCAD15BA6896982
13E7556784A60C9A5AB99F37C2C10C132CBBEB17E71B5CF358DA3D352DF99976
23D1A790D1756ABA09E33D7A948CCD8CD7E71E0B4BEA317CBF7061D05C7F06C2
BD47FDEA92BC3458E31C88218059CCB7E42AFA3CCC8B8605CE2CB74DC1011784
9C424DB320C91420FA6E61D9B774264FADEA5C23D13A658EA3D8864FF4C9C64B
C2EBC595B123A580A6D150ED5F8E1A911B4031CD79148335BE8347B4621BE3D3
E5E41982CD9D9093976DE9A4C6BE7A887AE901E7065D95EA0B53B423083BFC3F
B95AF6D8D8947C6E298BA2E69684AA98DFDB144F320ED8C671D3DCA8AEC1228C
E6A31F09F75F03094DA73D220D741686D19648E41EDFB61C35F6089FBC024D4C
D7C1C743C0D1569A3B9D87CBA2154474A33A6D22EBE767BCD28CDF14856D593D
AD06D780536C5E8FD32BFEC87FDF2485814D4425E537A67F05ACCF54A90E6B35
64F0D2C37D7810E141C9441030C756D9DB54587949AE66166E68091AD2FD14C0
4881EE477E93B25577C54838321EC097A14E8D4DBCF436D339A7180CE9472D1E
64DAACEE5119043123B652DE1D120356E61F8D6681FE0B5D8575997D6B8ACC9E
FCE7273CC6A9D06A329E2BE088AA1E29743CF6C0B9B01411EC736EA457BA1BA4
210CD75BA39DEB80A2F0C828246377A1146D1D1E0B1B81C4F51A48F4886EBDC3
C6E28104BE6549591C76C287F49C576B2E8081FDB34DA243A452D27E5416A97D
E096893C53772971B40D76F1F59271E2DC28131C26D51C424C9366C8152BEE1A
0958E53D7DAF283E63CD1C08C653373F102E395235A6B683120F93E9AD64DFB9
34082A349E20652D7D479202C9D7B8BF8F2D9063F4AC987D02443EE5F6BD1C92
110FEEC86DE61E8FAA5B98A29889A26E34AC3446226BBB7DC71BD2ED99FFED85
230B52FBF8C7A875B6AA456780D74DBE45594B39416FC60421BFE222A3859B64
6F06A5F84A6B997EA5DE63058CE6DE82FDD06DEDE8CA4419DB5640757326F7AA
03378AF96B3E4E2D6DDC884C8B364E3EF8FD8D16B297830AC716B05FED518F62
D403906F62FF25EEAA99E7490326349866DF7E3BC164D5AA76D8EE2E6822FA4D
CFC42F7E3D6131D9C72C202F4518A495DD721DC82FBE4D0771CA8A32D221F65C
7CB8B862BB14AB70BF3498BCDAAE621DD3B6238B6B42C410B8A767F2B15A97A7
073565EFE7752F5A503F934239A6E5E8D5A8683659B01FA7E98D8DA1C654A60D
3B0925F537E3E1CA003F42468CFFD352E55D4CA9F96C9720DC76FADC598693A0
51B172278E59E95589A844C7B45C95A617335212542232974C3CDB802536EDCA
3EC2FB5C047007A003E5F7DEF09F937900AFAC7C28339936C9EFC2AE1AA8A992
DD9BB80115AF71882871C848FE4D8434F7F6F0C993489088C40844216BCAE920
5873E097BA77806B3F85BC964ABE919DB8A89E910DD510D512ABC76861C1CC81
FBC7732AB9DC9844638EF3A6CF91B5E83D4B2AAC84A4DD0BB51676190FA98419
4502AD6BF453721DE6F5EBA976614441D734E00EEC02EBD496A79F8351108A53
62C004B4A25B9C08D1BA48203473A5060AFE6D236BA47C5C52A89B4690BAA058
93E8A43F311A29A4B409801EA274B43CDC1340BF3284DF0FFA3346B0F2D3B569
877E5F29238CD6966E52CC59B72737A82AAA07505B18C34D9412DFE68F45DB58
CFBC7178A508006977153A310268E8B1CB896707075F70982DFA2A470F745411
4B7C674AC3DF27377D2D66F9F9E685E96793DFE8C52952730B908386099EA52A
133987E322992C3552DAC5A5854C16D088A0DB93BB0BF5C3E278FD25E3B066FB
9F1A6FE413AEB916B2BEF115E86A50172FCB1F95FB3FE819A555CE663D3CF62A
968EE0DB75834BBEB0BEA649F53619AA16E7D71B8753FE6163B45ABE56120654
3C8A4D8FB00F0CC54462DFA125DF3F930CEEA338EDA84A4F529CAB1098818D19
30946B27FE20B171F01FACB2684963963BC085CB4D9E01A560D85248B12E6101
4243375E3F0766B419B32E4B2BE5A4798A334F2479F3C41DB452AC97B28F12C7
92CE24D1E8EB7174F3AF74B918A4132DB91DBB56FFBA2E8B2225A793A8581D1E
33443288C1796ECBBB8E4B1CCEDF354D922D2FFC07CC34EB59C12F6D82906B89
8FBA3C84E7E85C616365B227249CEC063760FA4012545BFE39EBC0376485190D
45BF8C302312422B2FE4B8863366121BDEF40A89E57E1277691C094F00049E17
6618F113B52826A435AF692A169024DB94A0D96E085BCD179204CF858C318C4D
4BE0E718D686DBFBC6E14BAD9318AE6063FFF64D6F2E687D6D8AC518B64BC923
3FB2BF47F7BC2AF6F3BE70BB2DFC5E8C5AA6145BBE294D038B5D27DFF648ED17
3003753FE14AA6726ECCCA53B7FAFEF622B4C46B665C0A51997F7CB3BD6BA1E4
35AE86D14E40388675743DFA441C5228E2404745CE17ADAF06236D6C9DD0B692
7ADDC8CE9BE46638B2FF793F6994F101550F560CC2BC46E75E97F8326F230F43
63CA56C9F437D40E0A090369ABD1847B75633C34EFCD60C7D54618F75E5ADE37
B2A4425213A4D7F39712472285790ADAB1D41793C7E2B27D62E3A044E55504D9
E253DD7E449264F16AD68DAB44A84F96308ECCB42E10B03DFD77D096CBDCEC22
E21CCE237290848398D462A0BEC9994B75D529EEBFB106C84F675201288463E6
EF7396F5CBB44BEFE5AF4DD43F73BA904EF92D4412C2561B97CEAEAFD84513F5
8452130897A7E8E0969C35887F64BCF8835980959BE2CF79195D68EDDD635DA9
92F90B2D35B4424EDC78156BECFF3DFD78AE8F6B9FD70104AEDBAA16EB1C6784
EAAFF6ADFE8A29B375A5196F6D86DA7E5ACF656431EDA68BECF68BCC68DAC31B
451BEA8A0C69A14C98003D01FCEE63F5B9663B382F9165E7467DCB487DD45D97
EDD8C1A05B0FA0098083597EFDDCA49A037D293B76E0C7E6E5B6A86F6DA45FFD
7B67B1EB8516DB636C3C4FF7951F6E0198C70CBE17A51C48C2892DFE65D45EF7
B6527B6FF397A856225B6EA71383F46AD88F5DAA68993A4094F43559C5DBFDD6
1DDFE89E699C5E00CEFDE7EE22DF6A2B1AF16D2FE40B825E42FCA8E34C51C0A0
BEA331E1B4F90E3394D99797FD57B16E44C68E71942DA022111CE8A0360C6ED6
8937B670F335CD9A907E3D09BD958C7F44A795265901ACB05137807BBE4214E6
D1937D5C6D45AFD7788ED271987211FE96D45B46350F802C7B26128FA8E0EA18
D340309077DBBBA0E096AEB102DCBDA7E2AD2CA3B3D52FBDF7872BC977AE8386
E13FB7BC3940BC413FFE1C9DD0C0376DE61F539F930E3064BF43875A8458B657
8C9E408A058CD0977917ABC98565186D20688501B3D2F40ED89F0F4AB0349508
8CEABFB1376385EB5D0CD673851DCB4CF5FC4B58AA24D6169C6AD333C12810F2
A38017A9EA20665563340CA0FF2FCEF935089D67AF37BE55168A333BE09BD46D
C322CC17DBF5D0C26DB32C599C3B30837604B9B5CC13064C42FED9A0D5C7441A
37F588E6337469F459FE3562D51F09600FBF1A6F27CA8A31C851FBEF2E32F8C2
2A58E4F5706074661F609085D65A59ED1150824D4409B8A47685508853ED34FD
E6D410B302F22FA3BDB66E085325A029C778E69E78C5A4CE541382A09FC5302B
8D723E7EDDC52575E8450D9C6A891CEF240677571C65C03728B131FFD65B3CF0
79B44B5109DE13FA990B25AD7A470232B6D3D48020A321DE9EEAAFB067BB238D
7C64FB9C6F6D6485EB11475EF42460A59924603A3E16F2858C86ABB021152BDC
96269DC6E30F3120BFC515A5713A4D5B65ACF5213D80F419E3811CF34026BFF4
39266E478024DAEF64BF166AD791245DE2B26A1BDB87D84CEC9217533E960333
E72A2ADB5FB795E3F2FF3FBC15225412CB44F83AE809443BB0593B14C3FFE613
EC3AF9EECDF519EFC8782241E609D75A3E2A88BDF9B2439267123798F3B0E5DF
6C39485198F62F42A2E3719B5D9B58AA638C4BA6EFEFBD800E3B408E0C859C64
1111AA4160FC27910EFBDFEFDE5D8C714E0BC78F38ABC3424086F5D5AA8061DD
7C74FB7A4B8EF11749E4F08C1EE84ED4A3574E0757925E9633A2BC66044541BE
F0346A9B94411CA82FC3DD3EB0E3E3BA0FEEB74F1DE337FAF09DD47FFAF1F0E6
5D98A42C77E9E087A101B3D9DD993F4A1055623384E4E78C21C0406A51FEAA2C
A2B74920A4C2EB17BAF6E3BDEE6ABE54B4873151973EA9BDE8FBE9C64BEDA62A
BEB523E051822F257852DE0884AF96E418D1FB7783737345516FD605BBB2F140
3E608CBE89A5613E797CD40515DE204A827A2EB7D7DAC6DC2A8AAADCBF2ACDFE
DC6D3D0ECB7F15D3D7D82924A4EB84751D35D7BA646957B3C67DFBE0A0C0DFBA
31EB29B54A11B8B4B9BA8B5497EC93A56978FC3AAB726C38FC70A391678D5B0F
EFE8563F3CB491492619A894A2FFA78CAF7FA2B5A7A170F0C749E412305FED60
15D62EDF185DC2D5A91F33D2BECEC4F7FC6557D1DADD7E710C06010721781833
FB80F2105739FF5CA2DC2C8FB3E7CD355A547EEC91940CC6F1AFDF6DCD39887C
C0FB2BECBBF367D770F2AE80B6D11FE450D7A330A34B9C8AB2AC6AF7BBC7C0CE
60A8C0306E7B81243B15E78F25B6E30D392A7ECD8DB20FE8D366FF198B8FE468
046C5848A4862C56F322ADA05825004A369F3D67C1BD94F0349EAFB4A3385F98
281C7D176FF0ED038D7FBA69B4EF6BB262E305BF74E2B0D406F2DD6E35225055
9AC5AFAB84B3F5E6FF2F585BA9E206CE759FFC78CFFF129102BF739C7AFBDCEF
475725F754A2A621C1B6136959D07DB270B4939AC54BB6E655BBE44729E3A6FE
DDAED6578175C17F0113250742B6B44563FD1FB57B013A5AC865A98E8AEB93A5
5B3BDF555D528820C0F2AD1BB02ABFF818822B5988E19467D2803B34EB75EF22
922AC68A7641E7E8E1F1FC1B53F4DC2CC2BF797CF276C6DD97AAF8A05259A17D
D4EC5FC743D2D8158BCDCE16DC80E72695341C6A8F2874C1A2F7C496E008A1B4
D248809290C35A1E9FBF68AE98A0C51DA56CE85E66E864FFFB336A634D3E8C9E
D08C8C7C0CA75665FFC6F2EA5A7CB4A613E5057AAF547FD8605B9E93D87C3A7D
2E5DDF14F5F783C1B17772632CDF711A2625F3E6FD2BB851147438E9B9A3BA64
5EC3C5820F10AC52B42C29FDBE6B02FC22B7ABDC397ECDE03BF6E9E1D26396C7
07B14BD0D515CF5EEF691176E00C7099E1F8F571156B27C21B1361AB5B9F9984
D29F5FE6FD7FD0357A0D97385CD5AD5315C7ADFF99D79A6E8B8ED0EB186BC6BE
09262AC96AE5C2BA2B4EDB92B9C20546EFFA4EBB3942639762757F0DA1700B53
71E717043702DBD13433ED003B56A07E1D8FF0A13A9E3D042D380D546343C8CB
DB2CF876C840F12EB4CB21044AD4502A34558FF65238F9E2FF47C95D48FA7446
5D4B5393A148E36AF55C4121E43BCFAEE0873CA13249849471A24BC9965D279A
F2BE6C065693D87DAFC2E253E6CA2099B099F2D076BFB237CCF6C87DD6CD4F45
48331205B32A7873EF87AF61590258C199E7D82A3D7D4B9FA61CF17AA91A0CB3
EB6AF0AF40D1A6B6934D29954CE80E4189EA2807D6105B3DF78CAE2790C9238D
2DCE2DE38638BB247BE51F4E1004F55008372F61FE2D6E8F6DF7C211516F5DDD
82EC2453C76DA0E345958D13631CFF26BF886933941544C756802CA360C8E125
3F454D4FBBF7DD61C7FBFA74C69E6B3A78B7B42F0F304C3CFA3F773B665ADFF0
13E4ABB473172A09400D3DDBFE3631F3FBFE5A0BC85ED8A5A4DC75CB0AA584C7
DCD2ACEB161167D7882C6A8F01058515281F1349F5741247A602ADA616D4A1D6
1EC33D1BAE4C2193E48B02291803601BA591F15A047798DC7EB2679D3BFF743B
0CFA222E3A6E2877605D324FAB2A1D64776AE609389B05BCFC446F521FDDED1B
57F6FDC5478EA1407B6F07447F30E3EA7E3E40791499A054BC142924D64E5327
33E7CACEA82D14FF523A1E9BF7C4374729B6988830C9F229CEDA8ACFFA070878
FDEDDBEE11BB21F3B4853086E70BFCDD77BFD6CC56AC691CE995C242959FB69F
E62769FDC3DF84F2D3FA26301052BBF82564F46114AAD8756DFF412982832ED4
7E7CD8892E3238EA145B0F5897A04AC4A8B09FCC9D2AAF91F91D195D071F3191
74B92987A808AA09DA021B8764D877CD16F10C981DFEB5BA2B3934D1202791AA
7F9267FFEE4968D0C2A43EC3313AB616DE3C7A8C53AE68267A5A95D3DB99B56C
0C0D364FFC258F7B6CD067624EEEB2D596AE6A731376FAEBE4D164A3950702D6
A49D3D5BB037DB70A1BA88297B655E1B063DC8048B0764AFEAB655A5FF5B2146
C8CFD0ED137CD8A4B6D0AD4A28403AAE23AFBC0E4CBCBE8F6FE5C750A28CEF97
A2279273882FEBF64C955CDEE549EC6F85F6421D621CA3D527BFFF250192A5CF
44CC4A1023C0907D3118EDBB93296571C0F4F896C8513164A7CCFDBC0A763CD2
149ABFF626EC78CAA6547209507F9471A5CCAF35581CFE906983EFC7164CA874
BFB76A602AD10C565BB637FCF0944EB645CFAFBF6FC6F3F9AAD665BC2400D453
89E022BB19F9E40154300D96657AAFCD72BF41BAE4CC2325DD56CB7523A0B2A7
3C2389654421A3C00FEC2CFDADE8F5E7F45170A1CA4DA553C031EE7855958367
98EF416BE44BDC9794637638A036A7A1EEFB8AA5931A97976F0D05E5C2DBCF35
14403DFE7DB3DDD9864A1817B9D1C01C64BEDCECA7274078185FB335B2EE1FDB
A3E8F06715644D6EED8DBB23764BCF5800CAAF2A772355738AFECF1DF668C6EA
6DF3114E8FDDC6038EDED56F5CCD7C02304AFB6CDDAA7A04D405EB31443A175E
7E935914B1D6095FF17399C065E6325F88E6D0693CCFE48A3A325725863460CE
FBC8B0D58CE3961A3E5317051B40013FBDD65BAAF9EBD752E7CC16D6F3EB4C87
875A44759261540DA1D8C48556B15E52985BA6594FF14D10279FDDAB5EF95C4D
19A08CDE705189DBF4303C32CB8638816CD51298D1CF5DDC2DADA77012FB60C5
E29B6C843A4F659264E9AB6ABD1071AF6620D4A78504347C64814140C079EB5B
FED548CC87B0B0D4AB26E16B93713EBBA21A0FA1B4BD891F05BBD5F8DF8F5C61
06B7552525C49872883DD0FC907F13BDBD6C5870E83A09967774CBF743B1F45A
90619BB2AA28C09A35C4A3EA7B815C58A95F8C274441A4DEE5264C2670921B34
01B5A30EA3225B6CE19900ADBF95211C5CA7888062EDAA628BAD304ED47C0AD7
0110E7B5945FC17FEE971F70ECC0A15717EF86E59AFB1C597BFBC51585D2DA2F
9B6B5F468F2D160D0BE4200DF1DE5602E01A0250A43945158FDD410BB142BD70
EBDD6F065F48D815F40DC9553B56EA3B733206BF85B90691598EE622B159FA72
47AF41F82F5440403338653CAF0283FDCE36359089E809C042BC4354D0C9774C
32115AC4063BA3F6705FBA8B2C40A04231BEDEF598424905EB9C724FCB0DD23C
DCF041E1153A8D3962DBB35F887CA9B4A07321721B97EF59C0F097CA4917FD9F
065A5A3325C8B7BEE4F6591F05444F5ED9B6A841165A3651EC7DAECEDF7D39A5
74EE2BAABDF64A253EC6725F382615091F41F39115E001A1B21473EB697D34A6
FBFC86AEBD121E2B3567AFCDDCB9E2C0F44EEF6EC19FBADCC206EA962C7BAD88
2E3A414F381414CB7E270EC14CC8D5438C1E394D4C76A47A1335CABDFE925E96
DBB892AAA19534A0870625B14F028C497E8320476043D04A2ECD962566F30051
C4F536F0B65642DE3D9FFD298AC944CCE3F55865F40BD17E69ACD84F559A9397
CD5D2BF62C32828A61B81FD107E0AD3D3EF2A5FCE5F59E3E3B7588222674C1BA
F94C693E404C1B012C892391E7769752241D9BDD17BFB3452DA32C75CA9C01FA
99135B25958068F9C6D4420559DB39A1B0DD92AFCB588B81A7262FF1BD3D451A
711A75ECC0DE3BF7A4F3ECC14FAB3B498569B73942095C8E3F10E984AD507E52
B9FA0E4603EDC14541140943A915D2B59119C2A767C9BA287FA0EB86BA58A9C1
914E072289CAF7050F79FF9A3C6105DE63111F6FF66BD858E570ACD0391ED611
161AA463AA0ABA8A18D94D1EFB3DC903FC647C45DE1DB523A60FF775488EF641
F03F62F66E4EB7031023F8C0368EE5902F30EE530999A00B69041AD88B7CD334
61B89A3F9A2B1E7744D91FC03F9B44777B6A8A22B3409D3243543DF6C1774878
AA0D69C7335789CB74BA21430080F33CF486D5561859A2D21867E329390FBAE5
0B2819A3869446DE896896D0069DD519619F8F34C8BD566A94729724D66135EE
7B7426B31C8610B6C4127F2F1FB8C175357D58C8430227DDDDAF4BE4C03AFB3C
1329129C8D55E42BF2D9514FC6AD43C14EEFF3AA2252EB8E09A3F52E2ED0D327
5DF9F31260736A95518DCE15C1B58E63E4390DFC43C85ED9B84A4A530A848457
5DD0EC33D8C4AAC83C1E2BC897268659EE4BB97E8B358A7EDC85DFBA3D17F852
665DF0B0B3DF5CCE5AA48C5BF8C229C1FFDBFCCEB292E51A1AEB04A136891C0A
AE1ADD307332FF1D0083038DE3B0F592AAE475526FA906C8D52B92E7B1EFB2D2
68D9C898E361211F0F8FD3B07E52C5F259EEFF8E393AA8E41459838F7BA09709
9B047A9E47DDA717CE088E1FCB513A2CC8DE8251197DC0671DEF4AA37433E977
514492A15216AF5A744638BEC95C60EFB8AA2F8E7B9CA8246C20D72F702D53B6
C129EAF5892ACF7984049DB501B90EB8A48127EED37AC022F6DBA808042F5102
9ABB2D3BD0FBA6D04E841E809F18067FFAD46FCD74045642796DF3F00340C3B9
5B8F6447561593F32A847A214BCDFED7B880C0CF9390E51C99DED9ADF1B0F048
F8AE5805D55DFFD47E7810C723FCC8E0B1CCEFDD650B094294BD0478384F889D
705F5255E2A1DD360EBB55F9EC1E03272236C33EF75D8DA6A87272551FF35309
5A3B1172BF043B851EEBBB1B0CD6AD719BDC1A8628FE7EE3F6E4AA8F2BAEDEA6
E5BAD08842E29B3ABA123B9EF2F1BF6EEE6A380431193660DA39A9EF299D4D4B
1D608E11AA75FAD98BAD46AA71832932C93EBF7D3792B7CD07F5F1D1D42FA204
F0E90638CC3AC428978EC48B2154011244A3E174B7F5988BC9473785159C598C
AD9C4308484049968FCD3D710B32844A673D75EF0BCAEA1272F0526B99CDE20D
CFAAFDB3B809FF8DC5540D16D8999A7A101028FF33BC8A7D8F835158CA8C3584
B4D4989FEC8E1E9E1C839C597D752D85B2725C62094B3A4706DEE9B621424F6A
9073EFC84F3C2673632EEA7D627D23960D90DD3004C44AEAE92C7DC2F4F8BF20
44AEF10C8FB7151B4FD27889435145A886A4C8F671136CE740EC585100D581C5
685D033169CF00FC510A2254CF92A8E1D6C1631A0D24F864DF8E5C84342085A0
A3D6031C740AE4D288935607E853F8872B2F2C3863203ACE6B2F3EE9528B309A
3CEDBD46F1D07DDFEF1F2684CA397FFBE4B9E38AE702E1C9DD46EF30837D3D4D
496BF95552C35E5CF87EE13EF0D58838550C1CD86E658684EABC54C8AD128515
F1CC0DE75A112EBB637A84CAA5D67CAF0A6745E2671B13AF2F0CF8EEDE0A35BE
9115B3863C988D9D17786037011C0A11FFA3F368B719E06AEC81E274B02706A8
D1E2AB5F3AB77ACD65D01AC6C7C28E50FC9003F9E9CC6F65738ADC001EC89858
1871D1DA6ECCE80D88475CC3F5BC69014E8770BCD4EBCB5F4278E78B09631C53
A7126F7970129B9A1E721C66708E57AA8C8A7FD1BBAEC6C85E764079C45F9566
5B0A583EF82DF85F380CDABA3E6E65984324FAFDADE04A88813167F12A52FB18
A1FBD42BF84CD141FAF87A794EB0F4CE0C7FE2B17897338430E7F7275616CF50
5A0D12759F317D5425F2C82EFB68083112E2DD516572206A787D99CD74A88FF3
69BA708C29C321060107B63A1C719CD3791E046DD20512C33DC47A6AEFCF7FB7
9408B20520935A3ABC4C55DC98A38EE6886B1E05BCCB6CD776658B151A8B4B88
8D0FAA2C21C7181086EF635A96791D5EFA4D4717E576984F912DC54A978A37EC
78DBD739509635FD40E8E6CA70153B72DF03BB6ED60E2C97A257FA6899B5C853
6287CE1DD9D02A92DD94CBEFBBF0463441AD9187B3E81EB4126942801FF5069E
647C4228BA70FBFCD7EACA222C690ECA14E66628E415F042B46D06996AB4E546
C44262E7F4D18F66748734F6FCB3D9DEDC2055BD58D2FE559FF7617214E258AB
3A58A2889E3E758DF7101F71F6BDC77FDFC92EEBEDEFE92B7D001E2E4051A0AC
2DE4AB70B387208219AC50153671CD0593C472E24C3595EBEA894C33C9733FC1
A83FBA022CCA3181E7222C1935A5B65AB1E75FB2C49E063FB7BDA4B64690F97B
BA53B6461850BDA293BF4E8CF19A547AC0198710B3EFACF1C68FEF42B74BEF70
396C901CD90F70309C4C7B8AE59268606891B33E2961A5F78B29593D64599D8F
7C98455EB47D8A35234276082E17993B892323B8F61FCF562FBB5B9E37226F12
1DBC4686B672FD6A2CFA7A0ACD71BBA1705A19F762AAFF189A912EFE67F4F5FE
7F615FF8322EB0C509E2F27EFAA6E7320AFD90B4652CCBD844B918412F1047C3
9FF91E6217C515E19E35291FD33E95B8CEC8FB42C9877EDD26B9DC716BCA0F2A
36CEDE50C9B95354766966F249F880F3BE50043D8061E4E0BF41B76E73D6D443
1A3D79B166CD73D90EE838DF88F4FBC28D40E0FA5F4D28177B9F99BA5FDEADF9
A6B69B53DAAD522DE14D5C43E73A746C13C1AE375126AAFC12BBD435229B8741
0C70659D3CB54214F0E785C62E25B3D6CA76C17CCB8F57E0B2D026403F0F2F22
C6E349CE6C6EB3077FBFC7908B04D6FAC89B8089E1D39F78AFF433F546577DDB
ABC2F0BCE458E65119E05DFD74F39673E32CAB951C98EDD77FD367793F31161E
91B84180444A0A04FE68FBF5A2BAD9E9EFF8DA361220E852E81558CE8E8DCE9E
7C393654BD98256B7B6A6B903BA8F534FECAAF2BA4AE6368B98BF2315866776C
420AFD28BCA3A5214A00A0133658C366569F9C697B29E2CDF87282BABEB2DA97
4A5DCB5779DEEA89F1025E7770D4986E2260E5F8C7D87834560CFB6600A19CBD
9A35392A0305CA0935C92C9A22BF01DD84FD97D3C8E2018E68404C4E02138D2D
DA6712A9EDE5A243EE66F35E8A4796230021E5FA82704AB15523A52D9AB0C60D
BA18694425041D25C2FF9F86614BE3BCB4165F1EB8482A88A5E3137F40E98926
10C98B55993514E0363A640BC6B6F3CB47DE39D92B41DFB0AE08E2A00D9BA2D1
42A1C1341B4D2D620D11DAA314803E94128656C3333BAF69AFE38C774625C827
B9C32C9FDB579F08045211063A432921ED6D21CD197B4C7B7594113461529C74
527DE70315DE50E364A37424679BD1EFA853C0AC7982AB6119E8FFDBE9F74FB3
28E5A92F9604698406D64C6DEBDA8773E5270F2DA660CE957680E28D888E76E9
DB55A085F3BF7583B1E590F8796F4A0A0346CC943A9CDB97BA15D9F96A8C43CE
D57D2135512BF685B2AA26488BB3DBF7481AC80E4BC56211DAFC5869AA7E75CD
E1BB89A368C31AB6C59D7A0625A615B887515787E0569DE761D0D1F313183E09
54C354A86CA370FFB9658C5A53E903B618735AB825AA802520083E2EEA59CFB9
D24BC3D1588C96DC9AB1D44AEB303BC7902C1E2F65FB8BFAB5D9E20D699A18E0
07D0DB35F16C156EC6FC002B2869B53EB5EDD18A188820738D6F118F3DFF43B4
7942311A33723073DC478ADC7DFDE358219956307AEFB9F09CCD9855DFC83B12
44C5C38EF2610426BDCAAD4902E5E195160E52E8397B402D87D64725B583C312
2CF5782027114AF8CE12BA8CBCB8B6479FF95F030322EC28F2F6525C605E798E
70153E1ED6FD7D0EFBB6D882E618C8D1A80124DDB5DEC4D90EBCE52C97C21DA2
036C61D29F162509150B96A5F8732E76C797C7502D2B1A9EAFD39DD1583B8EFB
477372BA760BD36D88D151DAB356C58AAA10CEC03485792CA2568BB78406F5C9
0BFDEB8C8B760D744A8A4DA85E042A1139C3EB9513CF71A997A88D9FDB0F7CF9
311260C6F1B25F55B091525E6953CF111A1AC9E48194A5147E7857A31B5D01E0
2C1FC2FAB0109E1D8D33C79C07F22E0220C41660107CFE6ADDDA1CD169F41F3A
1731BDDE08AAAC30142CF3EAE347722F72C9347E5E39CEFF5B3FE53F0288488F
758DDF7E96F5C3D507C45D1194E2967F834707BCDA6854AA8A0608DC8030E105
25CD19EE486638A4CE90C5AF8EA3B4B6CC48FFE3C807966F73343397E5411CFA
130A974CED597EEF81DADEFB9974B2505FB32429DA86ECE0B245E758EF91F348
A300FAC3FD219BD9171555275B5C4452AF3E1AB293BC07EC978FB3CD6650C5F2
13A5D135067BBA8C0415FEFECFDD240766E8504FA4C848B256DC8462E18422FB
CB628A30233F3247334725087271EE726607597E77D047A8EE0FF3F586C9FB42
08205586E5187E055C925948337D844754066A06FD1C6A0E0743EB249B679D6A
4EF14FB25D9C1C7B40C58961
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 55 /seven put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
B36258037B5F0DF7D78C26C1D24931A18A2606939F9933100C723ED2FD991F4C
98CCB4F15E381B4886FE0E928D4989A0257051C547165291D35FA5BCF359E153
7EF69FEC09DBE6A9E866BAE054F56E86CA2D299F8DCB88685B932117314A73CB
5954C6D639CEB6F8A0A1F4D9414F1CA7CF3DEDEE81F75D8B5CEB205425442B32
8703A8A79A51613E3E6A46C9B7B1052C0A5491130E312ED3A0A2F32C5D52B15F
9621BA9E1688463FEA43F72D5FDB6E8D0739003C1D8A04E1589A7FD3F405364F
CD0677FB7EADC0D62CB762350689F751F19E6389284C97A5163CAD892E9A7043
AFEC5A36E7D86F5EE345576F3AE6927C6F5B2A095817E7796AB9FFEAC801F4E9
190062A9E98C10892CD939FFF926631CA932A14D8CC68F07CCB083F244DE10B1
1E8ECA14C7B0E9613B8E336B6BCC37517FF93411F08B5FB38970BD4F123EEE0C
B9AF3141BA1116A9E57F2E0012C2FFC51FA46A1397C2A3D5BBCF040AB9BE7902
4A77259F5EF7A7455CC0E7726F802F6C0394C6A9469C6118CEC4A0BD9071BB20
C2D78D0D7F885EBDEBE6377ACF972420EB70B0CEC19492B8498D81660F794267
4D11F545D00C89F57C7B80E92FCBE9DD5AABC7EE1F36107FBE2DFE6FB3D06644
4EBE0E414F78F2EFB12D6D60EB9A59D6D5417BD6318FA486415DC2E6AA2F93B7
3153334C689F1B4D294F420596273F8555A6888C93A76A30BB6DDE971C7D9DED
1802AF8431F67AE1B55C0182CB61E8F4852EC0C289C51DC32032C734983848F5
2C02DCD7EC18766815C7602E62DB208CDF26BB4FC6D04EB846046F8315AE5CED
B474E3C78358FD787096F753A1EFA5AC349F2D99CD46632C3104157895183A52
CD0D4AE63A5FEA06A846B018CA0F634975369E044E70EA496A3A8559AF0C290F
5DF71AE3D5325693946D32EA49FE5880785FB7A895D63586F8294009C192B21F
BD28A4D8A2113A4C17CF3C3A9A3E8674CAF91501D2C33696B2ECBA8C09ED4BF3
E929DF288EAC016E66CBB41E7393D10E705788D3AC6A6A1F25E663543FB155CF
25A5CA493E61FCD218786BB48420A6DB01BC505F3EC17AECC0992FFBA09A3FCA
9A72626B397EF17AF935E254CFC2C9528941C188608D17CA227008BA576253A5
CD7F755C7CFB3BBF602E84BF12FF277CA9365D8EC1A574067A86DBCBE226C425
D94E564982A8BF1965F4D481110FCAEA96CD832B9606E8E074B6749568DAF366
BD92FD57AA08C89B4971F78681972CCDA55ACEAB60129B2921E439E6AB18B61F
6B9A72D170E20896FAB448DF6FBCFEF143F71E70303EDCD0DED76A8BFCD6B817
9CA1C8CB2CA0063745D3E5814B90E77DA10D1AF06F75E967262CE86835DCA6ED
6B288D2D8D760694B24B38D9BFCC5C73A1AE37FADBE40C65B5100012856C1117
BEF38173E8CF481B9D8F6386C40D055A62AF79781DE0B90BEFB2C3F59F4D7560
6D1EBA2F09AD0D846AE171B976285DFDE034CCB7730A625DA3846D6F1D7F5248
8546E9515056C4C8F9B7EE06CB1D23524ACD4E0AEF341C9E239605AABB885186
73649DC02C1CA12AB9C4537FBFFE2680FDC1FDCA2941F5F76AADFC72A5A39C9A
984A6FD896359FCD6D66A7962CA72C11D537035B2EA89EE6192BADE68CA4D1AB
910DD727186429481257F780995E1DDDB6F6A19FB4A1847F6A08C07DC2838A1D
1364847ACFBA36D8D7300E54C8BAB0FFAD33EB416BC5AF05C830E600B6CEE21A
F1BCF786E3E610C13A0CC89FAD67390325382B5071FCBA7CF1F30CFA6FC1CE86
ADFE03B1CFD03AABD3E85777D9A143F8D9D842E4804888FE6C8FC547DE4BFD9B
3D1EBD02D03A3C7DB569C7ABE3510FC5E2231931D8B102E4DE299FC976E62E39
94ADC967D7200788119BB8A7412606769DDDA70434321BDE6DA8D749D269C337
5F63FB52EBE5AFD54A564FC59AC7F20CDE985D5489F616002FAD3C5597BDD000
EE7B9A2FD208B9288D2617916970A60350FB2EB816EE05599C19F4FDA7139D3E
BDCE8312B8F3D4F504F7FFB931CC11AD3900ECA4F7ADC0B8D9B82941B6815617
8142B636CDDF5A3AAC2F655A4DEFFBD6F04307C74F79DC745F417B4AA3E3299C
8AC5F2452B2EE071331FBDA07002824D03D1699007611683E045754C144D3B0C
2C79039B88FDB45407DF58069B541BB0D29B1C0027CED6CEF56F4E779604ED56
EF2D258C6BDF2BAF07A7AD02198AA078762F974043AEC6130EB0A0CF817300D9
8D780EA0B4BE32704CC7BDE5E8CDA77518C4867AD4621C498A92514DEA8C4FA1
AB3A7E652E43547855A49DD59CAA03F405CE7F5C0D61EF98BB66B57CA1ECC623
4911B783CCAA7AB190C250913B3E4F6C0D2576675EA38B6FFC83E542F643FFBE
C70B77246FA5E8AA19666377D0BB13804C38A6C6B313E21ABC2CB06F46D37BBF
ADFE96B357A2A2FA9650D3B5CF514D720B45C75D06C6B13C732B28E53BDD8CFE
A7D71B9AB59CAE584999DA697EA47EB67B212089CA0D92265E257FADA03CED2D
D642779BECDB63FF694C0026F043E521CC60E97BAA3C246FB362109BE5C4BCC0
16E415B1A99A88C4A3C9E70722BDE62E3DB77873A05311FBB07ADCD451D6447F
A24C3A3EA924197028889DD64BDE6E547FF9232AECFD8FF9C657E11D61978370
4E38542B1CC3FBCCC000F6505A7C5AE9E1947588FBF8FAD6D94F1745EEECD77E
8E0F552534CB90DFE86CFAF26C7BD50228628569574DF6D7F8F4CDAF9B14214B
EE51D5D57B2AF9E74C2164B30384C1ABE850E117A1515C4B7461B17EE2775C1D
A7DF22553BEE649187ADF709E430833396E564D0F5DB30CBF1F38A743CF0E13B
1802A9DCA6785FB42C4FFE2C7F9B24DA7CCE5171FADB9912A5DB4F814793D031
9458C8092E5BA7652A2E08A22C2CDCEA20A761EA4EA1271F032039F412F7B122
53507A5E94C85889514DD59ECBC80C794D3EF5E0068172A9733EA163039F27C7
E31510C6FB41B590B1379142360FAE1EA6F3EE1E52935529754755D8741D62EE
3D2FB692FF226F7418A515A63D5333029AC5FF817751A962A0C9E39C6AA9F23F
F0516B83F2F1AD369CB37BC68632C09E795FA2F324491BD0DF387B1B0EF7D2AB
475E93116C4B10AF5E5E087D2CEF0B8831E122CF4B455CBB4ED419C9FE3B7628
8C55FFE3C1E64572A1DF349EC7FA64B4706B230A28D6FF6379E25FA22ED77160
2DB0F405F968A3F661BCCCB3B3D2DF2C3480CC02696327B39212C69BA4D13A75
BEDD99F722A952AE14E27A607A843B072FF1731A5F3702C3969FDD6FBD40CB1F
FFB31B0E1E5F76FE5ECDE0922A3C733FB9D4FD0F346C6E28FB290066D83ED8B5
4AF57FF1D32DDE1961FD04CD828E0599371A348FC8BF6861C0C873D15AE865EB
85E27BBBE668A02D3ED5B8712543C984C23BD6072E0BB6F81707B05C5D84499F
0B9D2236BEB8083ABB849A21AEC620DF1372353886CBFB98C9CD89A3692FF64F
D5BABBB145AABEE5CD6CAD4FFFB69A01B071C0FA8FA5624619BE54F5CA5E99E2
AFF9B26890EFC46D5FF45F2F08B03B975411E2CCE6B645C46370F05841B58DE7
9B4F8212AFCC97DBC1D0D00000FDD9559CF71D037033474F2772287EFDB1AE99
95C7F55709759C50C8CFB86663FEFE353286D7C54B66A536548294963D097ED1
03B09790897145B8E7448046AD4D99835B7D4595A4B182A182886788DD3A9697
A22380E55BAF2FFF44AB48F4627D40712020AF72757636946EEB01A7EE166137
06925B2A5B23477B0670C37E0B71431F821D707565162E3F2B9431FBC80C44F8
CC4032854138F601D167121F2E438992FB1DD49C8CDE4C5E1305655DB78ED14B
F3858BD44F57049BBD6776AAB375277C10A27A0A8C26E4D7AED83B3459BD9BF7
2F0B7CCD6F29E3D658FB7E51EB31CADC1F73B36C5283B7177C9608DFCF767C7B
C3FF23EB210594A3546D1543DF7F6603CDF3B4AE5C4329BE7D7830B830D0100F
F18E4FACC7A8D451BD5702F0F71C9412AD8FD65854A32391B2067072DB9F8C8D
C7233849947A807DB59406C8104B115A4AFB93A81F7180921F8CD3AFFACE76E8
5560F5B95C8D7DBD1D2302A3822C5788D4F5312C8AD02A3C27B787BCD5DB3032
4F35E3F41FDDB01D0488F1A6E19462C94CBFB2DAAEC3A295EAF0D0B27C04FF8B
898400B298F7FB0B0A47CF9F10EAC9EB85640A717D5FDB56A46EF609F00F29FE
48A56E3A6B07AC30DF1D6469C5C953DCEE47D01AD3733CB8DBB764FD3DCB1D43
0F4215359081E2E235D6ECDED77477548DD1FE991E532DC8FB4208147AC4720C
32271E4783A3903155694DCEAC5A3CD272B716685B465A433A8CFCB0D95BB490
1A70826BEF6A2FDA20DD3E3B47BAEF45BAB5F70C20BCD456816E62B58C91E798
D1B7B8E6591EDD0AC846899B4D96B6E3E604EA6A3EA93090C589BCF1001F1D3E
2997E37D7187EC7B525AB2DF1348210CAAED5DCE389BE9F01E044FAB10396093
FFB140B1255A882D905C95C38CE7B8666F3BCDD51150AA02A59F535FA2767E91
9E20596BFCF5273613D3368B9D6AF31DBA10BFABE630078D53174CD78B69A225
EBE316A5D5393E6524F0A65813D2B1F690517C988BC11D731A9EA8575C68B175
1585DA06407A99BBBFEE4B744912893002669563C893A5565E1DE4B8848E46B1
5815557844BF6F3AA48F5297AC9D61274466E37BDB850B7125751CABC7C06E1F
E88B2CB0D67B59DAE6A15A04DF0A254EA1F89C1276EB7A1477F5CA9EFD44C99A
8D176017EF5B8EDF77B9DAA4BF779B804C3F3A97173208C8F95CF4D57F143807
CACFE4FDA22472BC81C7A64F8D7A1DF326B1638B23172EE2D3E6531AD595C7FC
E5A984C19000999CE7B8F0B825C9A6E18966A535E68CD7C9ADE76AB053571130
C9F107AAF5CAC1FE6511446F108862D19E29FACBA8968432C8D4D2639A945E74
5E594AF88095927FEAFE69E4DB8D2FA0F5EDC39CFB5C4A0D51B8BC5DA5D6AE5D
DD4D2755C6AEB1BF7572872DD2510BC13D955D84E3DB1296982858E928CFDA27
0FE884B21535C0AAE799554561885F63135D3A87F3974F69AA110E0B19786888
A1ACDD8D8138D2939BBF441D8FDA3F4B506D8C1E931C4DBB7B26D342D3587C84
692BBC5DC5E0F414EAE02094F32A949289EB6D7DBA0DE5FAB7BD81F4060B72EB
7A69ACFD94D4FD2B64BE17809B8BA4D003DF19276FA8FA0D0B8E63EA168B7EA4
85AD7BFCE3415BE8C84E9CDA9836B9C7B060B5C5CD0539373F7DD694759670FF
15BAF347AF45567D49C9851D3A69B29366470FC89CA21325C37E8B5C120AB78F
0A2CF83AF5F08F2BF5D18B4382E642FDC02A90D31AAA0BB25BA706D730FEC363
FE96318457BF758B841CB4D6C0F2C81BCD8A1703BC7E5F36434CEE52B5D19EEC
C7BD3A1086BAFADC63A3D5AB85DEB10D66DF30F2F79C4034D1579AD8489977B1
27150B61890B3DBA120E20D260A2C84C2D390E0B497FB5B36A1CFEBEBAA30884
7528739C9BDF9C80467B8F6D0EC06E7B5F9C1F915BBE9946DA783317A597399A
C20FB6ADEE65E5A0E2641CDD1E1F4324F494C9BFAAB06C9132577D79B8DD5C37
0D95AB6568F136EA842065F86AF556B36D33AA36DBBFDC16574AB1193DAFB331
F708BC9569E416195421CA1DCBF6A0AD2DA1C49964C38A27DE26BD4067F8C5B1
32C59B0CF3F5E882ADE130D05F2931BBAF711A0FD32B0BDEF46CB6EA86BA6543
765FD494BC6AAC077701A586D440F634E03233CF9CBDA4CDEB16B5E3257F950C
7EDBB8DF795142CD425525A381FAE7FC354CDE692A9195DF079041379CB1822A
2F5DAFFB7FFA46C93D4A9C25681F314F5B5575E7AA2030CD0E350693C29478C3
D53167B2A1D8D7FE09976F6E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 52 /four put
dup 67 /C put
dup 80 /P put
dup 83 /S put
dup 99 /c put
dup 101 /e put
dup 106 /j put
dup 111 /o put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D725429C32445A5F9B77B7161905CE00
86C26E256842DE59A36BF624C8DC7C190A30D72F4DC105C258EC1529C8ED955D
7C06DE1301AF9D77E89E3292F67CC0087A5FC27C5FED7E31BA18A095AD640D19
5A640BF385C7EF224340766291C4EFD618D4B7A39C4C487CCAB12FD20754D370
EFF8AAF8E3AB6706BB7A83886565DF60608DFD3C06FF9977CD5968D4AEAFF5C8
6823197AA02C43BB67A786F035A8FF7D8D28B38C9542D6DF56C6C145C2B69EFF
1DB150616F84258FC795F33D385C8A25188427F3B0E8F89E0502A5200C484999
64C632FFD1AA06B96AC527F62CAA844D1331A00FD4879FBAB84BFD45BAF3AF9B
2328DEC09E1A2A42432C841F7ED820EE751A1CAE4B8A7F02D17C3A607ADD33EC
1B34733D4C0DBDDAE7FB60104403ED2FD5386191C0D2C30C30B9E59226A5AC76
016C917FA2C6CB0654338DD6AE140E0F5E5B88A254696C3C2D3B379D3DD5C7F2
724685B92432D9E91A4647903661FD7C179E24E4D27379BB84B4761260D6F3BE
44FA358867424979E4DE111E338DFC3F4BD7F8C0894B45D1C69AE1C56CF6EEAD
27ACBF38FF8D25AB95AE8BC2C5BA704972A9EB765226548FE0AEC0B6926EBCC0
9223379628C50DFABAF955F3D194AB32C2EBD8F1E0B4D70159E58E1C60B1AC7A
4DF7507FE3317BEABFC03994DBC9C0D0373D4498E2E0D582F67B7AB6ACFF6967
548EB4E35C5A8EB6EBF74CFF5DD4D9630C05D3DE151AFB5A5251C6A4324C11DB
4FFA9550F35B9994C076C046B8754C53E7D7705523371D590001E98014A47AB5
0C574BD6D173B69625C7182CB66304C20B0B1072FD9B8010290743D75199E124
B505A699A9A86764029205FFF379796D1DCE0C4B0A3A743C71E583B0C3A5D5D1
45F90B11813116B6B799490BEB513AC89EB1B0ACE2E881A02D7F004E59B9C81F
C990EBC5EC26679F7749A396E0AB93DE62C8389D78CC62866BABA4AF61F9E161
87F05B0A209CBCCABF0BB6E59948A5C7466D709F8DE1985416DC97E5083D6510
5934632CA95094B6A4B220DEBF39723D586B3733780BC4AA752E2844513B8335
78C6C6CFD3A1F2F54F0957B2185BC926FBBE5A7029E0605D34EF87E1C16ADE34
921541E62A387D65E6C91B6398596EE581DD42A0D1B39CD655794BDA148B7BA5
0E43ECC8CD8ED65980D76BE65922660D3BB7C2B4A89773B0CD3CF3E0A29A27DC
047464F7DAD6ADB17ED10714B72F208159DE280347C3BAA80761E6D0ECBBF156
BF006C465A8D3594246334437CF3D5FAF589C446A825965AB11408558DE74C6A
8C29F18832211B4D4346AF11964AEE0F5E288EA2F9DF0D2DFF833934A8190922
4F754B1DE4BFEC292ED216AF0E7A1C806EEC7E39E21E9A750FD6B030E29A8717
078137EF7D94674DE316E509B146DFAB44920C2BE36820C3666C2C5BDF4B8AD0
F5351DCF0609E0C4A51F145768E84B348D883D847464D0C97F6FF561017F8A17
48547DC5ED44CA768969F866D9F6D330488AC729AC5ED1F69F800E19D1562E91
5FC452D88059725EE7BD3C83CAD7B179713B6E4F7CB968F0FB66E01FE930EC68
8C6FDE4D3DCF0DB14D747E5ACA2814EEA6E9A5424D243AA8BC7EE60A1CC8A137
6FE2479572B5E2076FF69305D4D388F38C7AF882F603D9EA6C61F97942FA2EFB
54D3ECAF07AB99DBB830354C5EFF6FED5EFDBB00AB39CCF5C06731B3CB03D785
BBE5A7F877494153D96E841E686C9A26DB975A3990FF8DB65341CC9C737AB477
C002C39ED892238F2ABE59A755788340BAA9DD857D5E503E5E2CB908738117ED
C8F5394A91AD244E6617019E3FA007573D2FF7047F240CA4153BECB4FDCBE303
3180B3768EFDE1A94A211A7C872F0BA3F8FB4D41A7253CC21D316E8617348299
6E9708411A6CA9A908589DAE2857FC13AD1981F8E0E8B6CDFE359624E4E1C9F9
D782BD24D106382A82EFE836D85986481EEE2F3FD319041ABF9587A12E3082DA
0AEFDB89335FA6FEC684DA5B0E63ECC3D924227815C99BEAC0C01F1E9603BE1B
9C67F9BDC851AF5BDB5AE59BC19CBDF016E775AB5A79470F719B62FC59152377
DA847D0E3C97D0E16FA0CFFF5B57F0011C44A5B8365ECC928078FC7304AF262F
2085136BDBEA60846A838F1CE32FBA59EAD72CA3F7BBD90313A81C620E40AA5D
C4B7C0B5D6C66AD0EC2D91A168F6C728A5B4E389F8B623D4917EB143DBB7742D
88CAE44CFF149AB967A3618EC35A9BA93A65D4F42BE3174B41609A827B145415
C281D03C57141D22598220417391A7E4F72A390BC90C66E626A1FA2E5E6040D1
E97E2825244387DC0276CE016C1D39A8F259AC35A26B25A35722C36141441C04
060C1F9CF250808202EA15ADB38758A09B2383DA2425C8518FBDFCDEB9DEE796
4460EC7BB67FDA28CC6208249060E7A1858DD1165E616E36
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (proj2.dvi)
@start /Fa 190[49 65[{}1 58.1154 /CMR7 rf /Fb 138[53
37 38 39 1[53 48 53 1[27 2[27 53 2[44 1[42 1[46 28[73
2[72 65[{}15 83.022 /CMBX10 rf /Fc 136[97 71 75 52 53
55 1[75 67 75 112 37 71 1[37 75 67 41 61 75 60 75 65
9[139 102 1[94 6[128 81 3[105 2[88 1[97 1[102 9[67 67
67 67 67 67 67 49[{}37 119.552 /CMBX12 rf /Fd 132[42
37 44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23
46 42 25 37 46 37 46 42 3[23 1[23 1[62 62 85 1[62 60
46 61 2[65 62 76 52 65 1[30 1[65 54 57 63 60 59 62 1[39
39 65 23 1[23 42 42 42 42 42 42 42 42 42 42 42 23 28
23 7[42 1[42 20[46 46 48 11[{}73 83.022 /CMR10 rf /Fe
134[51 1[70 2[38 38 38 2[49 54 5[54 2[43 1[43 54 49 13[54
72 2[76 11[70 11[49 3[49 49 49 49 3[27 44[{}22 99.6264
/CMR12 rf /Ff 139[51 1[51 2[66 4[40 4[58 1[58 15[73 2[90
12[96 14[66 1[66 50[{}11 143.462 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 444 Project 1: UNIX File I/O)/Subject
(CS 444 Project 1)/Creator (LaTeX with hyperref package)/Author (D. Kevin McGrath)/Keywords
(cs444 ``operating systems'' files filesystem I/O) /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a Black 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Version Control log)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Work Log) /OUT pdfmark
end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Main point of the assignment)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (How we approached the problem)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Correctness and Testing)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.6) cvn/Title (What we learned)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -0/Dest (section.7) cvn/Title (TA Evaluation) /OUT
pdfmark end
 150 0 a 150 0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150
0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 150 0 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</S/D>>1<</S/D>>]>>>>
/PUT pdfmark end
 150 0 a 0
TeXcolorgray 0 TeXcolorgray 1447 1946 a Ff(CS4444)43
b(Pro)7 b(ject)43 b(2)1392 2312 y Fe(Sha)m(wn)34 b(Cross,)f(Ry)m(an)g
(Crane)1586 2552 y(Octob)s(er)f(30,)g(2017)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
275 83 a Fd(W)-7 b(e)36 b(plan)g(to)g(mo)r(di\014ed)h(the)g(the)f
(dispatc)n(h)g(and)g(add)g(functions)h(from)f(the)g(original)f(no)r(op)
h(sc)n(heduler)f(to)150 183 y(implemen)n(t)25 b(the)g(LOOK)e(algorithm)
g(for)h(the)h(sc)n(heduler.)35 b(W)-7 b(e)25 b(made)f(it)h(so)f(that)g
(y)n(ou)g(can)g(go)g(b)r(oth)h(forw)n(ard)d(and)150 282
y(bac)n(kw)n(ard)29 b(in)j(the)f(dispatc)n(h)g(function)h(when)f
(\014nding)g(the)h(next)f(request)g(to)g(dispatc)n(h.)47
b(If)32 b(the)g(distance)e(to)h(a)150 382 y(request)e(in)h(the)g(opp)r
(osite)g(direction)f(is)h(closer)e(than)i(a)g(request)f(in)h(the)g
(curren)n(t)f(direction)g(the)i(direction)e(will)150
482 y(c)n(hange.)42 b(The)30 b(queue)g(sorted)f(after)g(a)g(request)h
(has)f(b)r(een)h(dispatc)n(hed.)43 b(If)30 b(the)g(queue)g(is)g(empt)n
(y)g(then)g(w)n(e)f(add)150 581 y(the)g(new)g(requests)g(directly)f(to)
h(the)h(queue.)41 b(If)29 b(there)g(is)g(already)e(requests)h(in)i(the)
f(queue)g(then)g(when)h(adding)150 681 y(then)e(w)n(e)f(sort)g(during)g
(the)h(insertion.)36 b(the)28 b(requests)f(are)g(inserted)g(in)n(to)g
(the)h(queue)g(based)f(on)g(p)r(osition.)150 822 y
SDict begin H.S end
 150
822 a 150 822 a
SDict begin 12 H.A end
 150 822 a 150 822 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 822 a 133 x Fc(1)135
b(V)-11 b(ersion)45 b(Con)l(trol)h(log)200 1139 y Fb(Detail)141
b(Author)262 b(Description)p 150 1172 4684 4 v 0 TeXcolorgray
200 1242 a
SDict begin H.S end
 200 1242 a 0 TeXcolorgray Fd(88e93dc)p 0 TeXcolorgray
486 1184 a
SDict begin H.R end
 486 1184 a 486 1242 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/88e93dc7f5e10022f61dcc02707ab977045d02f0)>>/Subtype
/Link H.B /ANN pdfmark end
 486 1242 a 0 TeXcolorgray
109 w Fd(Ry)n(an)27 b(Crane)128 b(dining)28 b(philosophers)e(problem,)h
(lo)r(oks)g(correct)p 150 1275 4684 4 v 0 TeXcolorgray
200 1345 a
SDict begin H.S end
 200 1345 a 0 TeXcolorgray Fd(35c460c)p 0 TeXcolorgray
481 1291 a
SDict begin H.R end
 481 1291 a 481 1345 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/35c460c5834e37d3b7763cb8cf924fd1c60605aa)>>/Subtype
/Link H.B /ANN pdfmark end
 481 1345 a 0 TeXcolorgray
114 w Fd(Sha)n(wn)g(Cross)98 b(adding)27 b(the)h(write)f(up)h(for)f
(the)h(concurrency)e(problem.)p 150 1378 4684 4 v 0 TeXcolorgray
200 1448 a
SDict begin H.S end
 200 1448 a 0 TeXcolorgray Fd(3f0111c)p 0 TeXcolorgray
470 1390 a
SDict begin H.R end
 470 1390 a 470 1448 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/3f0111c4029242fbff1abdbca709846e312de5e3)>>/Subtype
/Link H.B /ANN pdfmark end
 470 1448 a 0 TeXcolorgray
125 w Fd(Sha)n(wn)h(Cross)98 b(More)27 b(done)g(on)g(the)h(write)g(up)g
(and)f(made)g(it)h(so)f(y)n(ou)g(can)g(compile)h(for)f(the)h(mak)n
(e\014le.)p 150 1481 4684 4 v 0 TeXcolorgray 200 1551
a
SDict begin H.S end
 200 1551 a 0 TeXcolorgray Fd(2d47960)p 0 TeXcolorgray
495 1493 a
SDict begin H.R end
 495 1493 a 495 1551 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/2d479602bacb4413c4926dc4d291da1999f4543c)>>/Subtype
/Link H.B /ANN pdfmark end
 495 1551 a 0 TeXcolorgray
100 w Fd(Sha)n(wn)f(Cross)98 b(sligh)n(t)27 b(c)n(hange)g(to)g(tex)h
(\014le.)p 150 1584 4684 4 v 0 TeXcolorgray 200 1654
a
SDict begin H.S end
 200 1654 a 0 TeXcolorgray Fd(9aa562c)p 0 TeXcolorgray
486 1600 a
SDict begin H.R end
 486 1600 a 486 1654 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/9aa562c78ee7ab1d2c149a0a110375449b559d34)>>/Subtype
/Link H.B /ANN pdfmark end
 486 1654 a 0 TeXcolorgray
109 w Fd(narxy)355 b(Up)r(date)28 b(philosopher.tex)p
150 1687 4684 4 v 0 TeXcolorgray 200 1757 a
SDict begin H.S end
 200 1757
a 0 TeXcolorgray Fd(f8b1617)p 0 TeXcolorgray 479 1699
a
SDict begin H.R end
 479 1699 a 479 1757 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/f8b1617c75f383036ef25a3ac7a69fd1960cee15)>>/Subtype
/Link H.B /ANN pdfmark end
 479 1757 a 0 TeXcolorgray 116
w Fd(narxy)355 b(Up)r(date)28 b(philosopher.tex)p 150
1790 4684 4 v 0 TeXcolorgray 200 1859 a
SDict begin H.S end
 200 1859 a 0
TeXcolorgray Fd(651df07)p 0 TeXcolorgray 479 1802 a
SDict begin H.R end
 479
1802 a 479 1859 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/651df07401865b4a7a8b049a5bb170d350407c4d)>>/Subtype
/Link H.B /ANN pdfmark end
 479 1859 a 0 TeXcolorgray 116 w Fd(Sha)n(wn)f(Cross)
98 b(\014xed)28 b(sp)r(elling)f(errors.)p 150 1893 4684
4 v 0 TeXcolorgray 200 1962 a
SDict begin H.S end
 200 1962 a 0 TeXcolorgray
Fd(7555688)p 0 TeXcolorgray 490 1909 a
SDict begin H.R end
 490 1909 a 490
1962 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/75556889aec755f28b25f1c81b86fb31c7ff825c)>>/Subtype
/Link H.B /ANN pdfmark end
 490 1962 a 0 TeXcolorgray 105 w Fd(Sha)n(wn)g(Cross)98
b(uploading)27 b(tarball)g(and)g(created)g(the)h(sstf-iosc)n(hed.c)e
(\014le)p 150 1996 4684 4 v 0 TeXcolorgray 200 2065 a
SDict begin H.S end

200 2065 a 0 TeXcolorgray Fd(4b)r(c64\013)p 0 TeXcolorgray
458 2008 a
SDict begin H.R end
 458 2008 a 458 2065 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/crosssh/CS444/commit/4bc64ff20f38125e7a8d84f16e1780b235ff3519)>>/Subtype
/Link H.B /ANN pdfmark end
 458 2065 a 0 TeXcolorgray
137 w Fd(Sha)n(wn)h(Cross)98 b(Uptdate)28 b(to)g(the)g(Kcon\014g)e
(\014le,)i(up)r(date)g(to)f(the)h(Mak)n(e\014le,)f(up)r(date)h(to)g
(men)n(ucon\014g,)f(and)g(sstf-iosc)n(hed.c)g(added)p
150 2099 4684 4 v 150 2232 a
SDict begin H.S end
 150 2232 a 150 2232 a
SDict begin 12 H.A end
 150
2232 a 150 2232 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 150 2232 a 149 x Fc(2)135 b(W)-11 b(ork)44
b(Log)150 2563 y Fd(Th)n(ursda)n(y)26 b(10/26)f(6:00)h(pm)i(to)g(8:00)e
(pm)150 2763 y(started)h(assignmen)n(t)g(mostly)g(reading)f(up)i(on)g
(Kernel.)150 2962 y(F)-7 b(rida)n(y)27 b(10/27)e(12:00)h(pm)i(to)f
(4:00)f(pm)150 3161 y(mo)r(di\014ed)i(con\014g)f(and)g(mak)n(e\014les)g
(to)g(adopt)h(our)e(new)i(sc)n(heduler.)150 3360 y(Sunda)n(y)f(10/29)e
(12:00)h(pm)i(to)g(5:00)e(pm)150 3560 y(Implemen)n(ted)i(Lo)r(ok)f
(algorithm)f(and)i(started)f(the)h(L)1844 3543 y Fa(A)1881
3560 y Fd(T)1927 3577 y(E)1973 3560 y(Xdo)r(cumen)n(t.)150
3759 y(Monda)n(y)f(10/9)e(12:00)h(pm)i(to)g(2:00)e(pm)150
3958 y(Finished)i(the)g(L)651 3941 y Fa(A)688 3958 y
Fd(T)734 3976 y(E)780 3958 y(Xdo)r(cumen)n(t.)150 4282
y
SDict begin H.S end
 150 4282 a 150 4282 a
SDict begin 12 H.A end
 150 4282 a 150 4282 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150 4282
a 150 x Fc(3)135 b(Main)45 b(p)t(oin)l(t)g(of)g(the)g(assignmen)l(t)150
4614 y Fd(W)-7 b(e)27 b(b)r(eliev)n(e)f(that)g(the)h(main)f(p)r(oin)n
(t)g(of)g(the)h(assignmen)n(t)e(w)n(as)g(to)h(understand)g(ho)n(w)g
(requests)f(are)g(dealt)h(with)h(in)150 4713 y(an)g(op)r(erating)g
(system.)36 b(It)28 b(w)n(as)f(also)g(b)r(egin)g(to)h(understand)f(ho)n
(w)g(to)g(in)n(teract)g(with)h(the)g(k)n(ernel.)p 0 TeXcolorgray
1929 5349 a(1)p 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 150 0 a 83 x
Fc(4)135 b(Ho)l(w)45 b(w)l(e)h(approac)l(hed)f(the)g(problem)150
265 y Fd(First)22 b(w)n(e)h(started)f(b)n(y)g(\014guring)g(out)g(ho)n
(w)g(to)h(get)f(our)g(sc)n(heduler)g(w)n(orking)f(with)i(the)g(k)n
(ernel)e(instead)i(of)f(the)h(no)r(op)150 364 y(sc)n(heduler.)35
b(Once)23 b(w)n(e)g(w)n(ere)g(able)h(to)f(do)h(that)g(w)n(e)f(b)r(egan)
g(to)h(\014gure)f(out)h(ho)n(w)f(w)n(e)g(w)n(ere)g(going)g(to)g
(implemen)n(t)i(the)150 464 y(lo)r(ok)j(sc)n(hedluer.)40
b(W)-7 b(e)30 b(knew)e(w)n(e)h(needed)g(to)g(b)r(e)g(able)g(mo)n(v)n(e)
e(forw)n(ard)h(and)g(bac)n(kw)n(ard)f(and)i(that)g(there)g(needed)150
564 y(to)f(b)r(e)g(t)n(w)n(o)g(sorts.)37 b(First)28 b(w)n(e)g
(\014rgured)f(out)h(ho)n(w)f(to)h(get)g(the)g(forw)n(ard)f(and)h(bac)n
(kw)n(ard)e(w)n(orking)g(b)n(y)i(c)n(hec)n(king)f(if)150
663 y(the)g(the)g(next)g(request)f(in)h(the)h(direction)e(that)h(w)n(e)
f(w)n(ere)g(curren)n(tly)g(going)g(is)g(closer)g(than)h(the)g(next)g
(request)f(in)150 763 y(the)31 b(oppsite)f(direction.)45
b(If)31 b(it)g(w)n(as)e(closer)h(than)g(w)n(e)g(con)n(tin)n(ue)g(in)h
(that)g(direction)f(and)g(if)h(it)g(w)n(as)e(futher)i(a)n(w)n(a)n(y)150
863 y(then)i(w)n(e)e(c)n(hange)g(direction)h(and)g(go)f(to)h(the)h
(closer)e(request.)50 b(After)32 b(a)g(request)g(is)g(dispatc)n(hed)f
(then)i(w)n(e)f(will)150 962 y(re-sort)e(the)i(queue.)49
b(W)-7 b(e)32 b(also)f(needed)g(to)h(mo)r(dify)g(the)g(add)f(function)i
(so)e(that)h(w)n(e)f(w)n(ould)g(sort)g(the)h(requests)150
1062 y(as)26 b(they)h(w)n(ere)f(inserted)h(in)n(to)f(the)i(queue.)36
b(W)-7 b(e)28 b(did)f(this)g(b)n(y)g(using)f(an)h(insertion)f(sort)g
(as)g(requests)g(w)n(ere)g(added)150 1162 y(in)n(to)h(the)h(queue.)150
1303 y
SDict begin H.S end
 150 1303 a 150 1303 a
SDict begin 12 H.A end
 150 1303 a 150 1303 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 150
1303 a 133 x Fc(5)135 b(Correctness)45 b(and)g(T)-11
b(esting)150 1618 y Fd(W)k(e)28 b(kno)n(w)f(that)h(our)e(sec)n(heduler)
h(w)n(as)g(b)r(eing)g(used)h(b)r(ecause)f(w)n(e)g(used)h(the)g(command)
275 1718 y(cat)f(/sys/blo)r(c)n(k/hda/queue/sc)n(heduler)275
1817 y(and)g(got)g(an)g(output)275 1917 y(no)r(op)g([sstf)6
b(])28 b(deadline)g(cfq)275 2016 y(this)h(sho)n(ws)e(that)i(our)f(sstf)
i(sc)n(heduler)e(is)g(b)r(eing)h(used)g(as)f(w)n(e)h(w)n(an)n(ted.)39
b(W)-7 b(e)30 b(then)f(added)g(prin)n(t)f(statemen)n(ts)150
2116 y(to)i(our)f(sc)n(heduler)h(co)r(de)g(so)f(that)i(w)n(e)e(could)h
(determine)g(when)h(requests)e(w)n(ere)g(b)r(eing)h(added)g(and)g
(dispatc)n(hed)150 2216 y(from)23 b(the)h(queue)f(and)h(b)n(y)f(doing)g
(this)g(w)n(e)g(w)n(ere)g(able)g(to)g(sho)n(w)g(that)h(for)e(ev)n(ery)h
(requeust)g(that)g(w)n(as)g(b)r(eing)g(added)150 2315
y(to)33 b(the)h(queue)f(it)h(w)n(as)e(also)h(b)r(eing)g(dispatc)n(hed)g
(as)g(w)n(ell)g(whic)n(h)g(means)g(that)h(all)f(requests)f(w)n(ere)h(b)
r(eing)g(dealt)150 2415 y(with.)49 b(W)-7 b(e)32 b(also)e(added)h(prin)
n(t)h(statemen)n(ts)f(to)g(declare)g(when)g(the)h(direction)f(\015ag)g
(had)g(its)h(v)-5 b(alue)31 b(c)n(hanged)f(to)150 2515
y(sho)n(w)24 b(that)h(w)n(e)g(w)n(ere)f(in)i(fact)f(c)n(hanging)e
(direction.)36 b(With)26 b(all)f(of)g(these)g(things)g(w)n(orking)e(as)
h(w)n(e)h(exp)r(ected)h(them)150 2614 y(to)h(w)n(e)h(w)n(ere)e(able)i
(to)f(pro)n(v)n(e)f(that)i(our)f(lo)r(ok)g(sc)n(heduler)f(w)n(as)h
(prop)r(erly)f(w)n(orking)g(the)i(w)n(a)n(y)f(w)n(e)g(w)n(an)n(ted)g
(it)h(to.)150 2755 y
SDict begin H.S end
 150 2755 a 150 2755 a
SDict begin 12 H.A end
 150 2755 a
150 2755 a
SDict begin [/View [/XYZ H.V]/Dest (section.6) cvn /DEST pdfmark end
 150 2755 a 134 x Fc(6)135 b(What)45 b(w)l(e)h(learned)150
3071 y Fd(W)-7 b(e)32 b(learned)e(that)i(y)n(ou)f(ha)n(v)n(e)f(to)h
(mak)n(e)g(mo)r(di\014cation)g(to)g(m)n(ultiple)h(\014les)g(when)f
(adding)g(new)h(features)e(to)i(the)150 3170 y(op)r(erating)38
b(system.)69 b(W)-7 b(e)40 b(also)d(learned)h(that)h(writing)f(co)r(de)
h(for)f(the)h(k)n(ernel)f(can)g(b)r(e)h(hard)f(and)h(confusing)150
3270 y(b)r(ecause)25 b(w)n(e)g(could)g(not)g(\014nd)h(a)f(lot)g(of)g
(information)g(on)g(some)g(of)g(the)h(built-in)g(function)g(b)r(eing)f
(used)g(so)g(it)h(to)r(ok)150 3369 y(us)34 b(some)f(time)h(trying)g(to)
f(\014gure)g(what)h(they)g(did)g(and)g(ho)n(w)f(they)h(w)n(ork)n(ed.)54
b(W)-7 b(e)34 b(also)f(learned)g(that)h(can)g(b)r(e)150
3469 y(a)d(ton)g(of)g(I/O)f(requests)h(and)g(they)g(can)g(all)g(happ)r
(en)g(v)n(ery)f(quic)n(kly)-7 b(.)47 b(W)-7 b(e)32 b(also)e(learned)g
(that)i(there)f(are)f(man)n(y)150 3569 y(di\013eren)n(t)e(w)n(a)n(ys)e
(to)h(do)h(the)g(sc)n(heduling.)150 3710 y
SDict begin H.S end
 150 3710 a
150 3710 a
SDict begin 12 H.A end
 150 3710 a 150 3710 a
SDict begin [/View [/XYZ H.V]/Dest (section.7) cvn /DEST pdfmark end
 150 3710 a 133 x Fc(7)135
b(T)-11 b(A)43 b(Ev)-7 b(aluation)150 4025 y Fd(Steps)28
b(for)f(applying)g(patc)n(h)g(to)h(clean)f(lin)n(ux-y)n(o)r(cto-3.19)d
(tree.)150 4258 y
SDict begin H.S end
 150 4258 a 150 4258 a
SDict begin 12 H.A end
 150 4258 a 150
4258 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 150 4258 a 0 TeXcolorgray 251 4390 a Fd(1.)p 0
TeXcolorgray 42 w(step)j(1:)74 b(clone)27 b(new)g(rep)r(o)h(from)f
(gith)n(ub)g(using)h(the)g(command)358 4590 y(git)f(clone)g
(git://git.y)n(o)r(ctopro)5 b(ject.org/lin)n(ux-y)n(o)r(cto-3)o(.19)150
4644 y
SDict begin H.S end
 150 4644 a 150 4644 a
SDict begin 12 H.A end
 150 4644 a 150 4644 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 150
4644 a 0 TeXcolorgray 251 4756 a Fd(2.)p 0 TeXcolorgray
42 w(step)27 b(2:)74 b(switc)n(h)27 b(to)h(the)g(3.19.2)d(b)n(y)j
(using)f(the)h(command)358 4955 y(git)f(c)n(hec)n(k)n(out)f(-b)i(lin)n
(ux-y)n(o)r(cto-3.19.2)p 0 TeXcolorgray 1929 5349 a(2)p
0 TeXcolorgray eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 150 0 a 0 TeXcolorgray
251 83 a Fd(3.)p 0 TeXcolorgray 42 w(step)24 b(3:)70
b(cop)n(y)24 b(the)h(\014le)f(/scratc)n(h/fall2017/\014les/con\014g-3)o
(.19)o(.2-y)m(o)r(cto-)o(qem)n(u)19 b(in)n(to)24 b(a)g(\014le)g(named)h
(.con\014g)358 183 y(in)n(to)i(the)h(source)e(ro)r(ot)h(of)h(the)g(rep)
r(o)f(that)h(y)n(ou)e(just)j(cloned.)150 232 y
SDict begin H.S end
 150 232
a 150 232 a
SDict begin 12 H.A end
 150 232 a 150 232 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 150 232 a 0 TeXcolorgray
251 349 a Fd(4.)p 0 TeXcolorgray 42 w(step)k(4:)95 b(No)n(w)32
b(source)g(the)h(en)n(vironmen)n(t)f(con\014guration.)52
b(If)33 b(y)n(ou)f(are)g(using)h(bash)g(y)n(ou)f(will)h(need)g(to)358
448 y(source)20 b(/scratc)n(h/fall2017/\014les/en)n(vironmen)n(t-)o
(setup-i58)o(6-p)r(ok)o(y-lin)n(ux)c(and)22 b(if)g(y)n(ou)f(are)g
(using)h(tcsh)g(y)n(ou)358 548 y(will)27 b(need)h(to)g(source)e
(/scratc)n(h/fall2017/\014les/en)n(viro)o(nmen)n(t-setup-i58)o(6-)o(p)r
(oky-lin)m(ux.csh)150 602 y
SDict begin H.S end
 150 602 a 150 602 a
SDict begin 12 H.A end
 150 602
a 150 602 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 150 602 a 0 TeXcolorgray 251 714 a Fd(5.)p
0 TeXcolorgray 42 w(step)h(5:)74 b(Y)-7 b(ou)27 b(need)h(to)g(apply)f
(the)h(patc)n(h)f(w)n(e)g(pro)n(vided)g(to)g(the)h(rep)r(o)f(b)n(y)h
(using)f(the)h(command)358 913 y(git)f(apply)g(<path)h(to)g(patc)n(h)f
(\014le>)150 963 y
SDict begin H.S end
 150 963 a 150 963 a
SDict begin 12 H.A end
 150 963 a 150
963 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 150 963 a 0 TeXcolorgray 251 1079 a Fd(6.)p 0 TeXcolorgray
42 w(step)g(6:)74 b(Y)-7 b(ou)27 b(no)n(w)g(need)h(to)f(mak)n(e)g(the)h
(k)n(ernel)f(b)n(y)g(running)g(the)h(command)g(mak)n(e)e(-j4)150
1129 y
SDict begin H.S end
 150 1129 a 150 1129 a
SDict begin 12 H.A end
 150 1129 a 150 1129 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 150
1129 a 0 TeXcolorgray 251 1245 a Fd(7.)p 0 TeXcolorgray
42 w(step)h(7:)74 b(Once)27 b(the)h(k)n(ernel)e(is)i(created)f(y)n(ou)g
(will)g(need)h(to)g(run)f(the)h(vm)g(using)f(the)h(command)358
1445 y(qem)n(u-system-i386)34 b(-gdb)i(tcp::????)65 b(-S)37
b(-nographic)e(-k)n(ernel)g(<path)i(to)g(bzImage>)f(-driv)n(e)f
(\014le=<path)358 1544 y(to)23 b(core)g(image>)g(-enable-kvm)f(-net)i
(none)g(-usb)f(-lo)r(caltime)g({no-reb)r(o)r(ot)f({app)r(end)i("ro)r
(ot=/dev/hda)d(rw)358 1644 y(console=tt)n(yS0)k(debug)358
1843 y(Where)i(<path)h(to)f(core)g(image>)g(is)g(the)h(\014le)g(found)g
(in)358 2042 y(/scratc)n(h/fall2017/\014les/cor)o(e-ima)o(ge-)o
(lsb-sdk-)o(qem)n(ux86)o(.ext4)358 2242 y(and)f(the)h(path)g(to)f
(bzImage)g(for)g(me)h(w)n(ould)f(b)r(e)h(the)g(bzImage)f(found)h(in)358
2441 y(lin)n(ux-y)n(o)r(cto-3.19/arc)n(h/x8)o(6/b)r(o)q(ot/bzImag)o(e)
358 2640 y(and)f(the)h(????)38 b(are)26 b(the)i(p)r(ort)g(n)n(um)n(b)r
(er)f(that)h(y)n(ou)f(w)n(an)n(t)g(to)g(connect)h(gdb)f(to)g(remotely)
-7 b(.)358 2839 y(After)28 b(this)f(command)h(is)f(run)h(the)g
(terminal)f(will)h(halt.)150 2873 y
SDict begin H.S end
 150 2873 a 150 2873
a
SDict begin 12 H.A end
 150 2873 a 150 2873 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 150 2873 a 0 TeXcolorgray 251
3005 a Fd(8.)p 0 TeXcolorgray 42 w(step)e(8:)71 b(y)n(ou)25
b(will)h(no)n(w)g(need)g(to)f(run)h($GDB)g(in)g(a)g(new)g(terminal)f
(windo)n(w.)36 b(Y)-7 b(ou)26 b(ma)n(y)f(need)h(soucre)f(the)358
3105 y(en)n(viromen)n(t)e(again)h(as)g(y)n(ou)g(did)h(in)g(step)f(4)h
(previously)e(if)i(y)n(ou)f(did)h(start)f(a)h(new)f(termial)h(session)e
(and)i(the)358 3205 y($GDB)i(command)g(do)r(es)h(not)f(w)n(ork.)36
b(Once)27 b(gdb)g(is)h(running)f(y)n(ou)g(will)h(use)f(the)h(command)
358 3404 y(target)e(remote)h(:????)358 3603 y(where)g(the)h(????)37
b(are)27 b(the)h(same)f(as)g(the)h(p)r(ort)f(that)h(y)n(ou)f(had)g(sp)r
(eci\014ed)h(in)g(step)g(7.)150 3653 y
SDict begin H.S end
 150 3653 a 150
3653 a
SDict begin 12 H.A end
 150 3653 a 150 3653 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 150 3653 a 0 TeXcolorgray
251 3769 a Fd(9.)p 0 TeXcolorgray 42 w(step)22 b(9:)68
b(Once)22 b(y)n(ou)g(ha)n(v)n(e)f(gdb)h(is)g(remotely)g(connected)g(y)n
(ou)f(can)h(t)n(yp)r(e)h(con)n(tin)n(ue)f(and)g(the)h(terminal)f(with)
358 3869 y(the)k(vm)g(halted)f(will)h(b)r(egin)g(to)g(b)r(o)r(ot.)36
b(Y)-7 b(ou)26 b(will)g(b)r(e)g(ask)n(ed)f(if)h(y)n(ou)f(w)n(an)n(t)g
(to)h(use)f(the)i(sstf)f(sc)n(heduler.)35 b(Y)-7 b(ou)358
3968 y(should)27 b(b)r(e)i(able)f(to)g(press)f(y)h(and)g(then)h(en)n
(ter)e(and)h(and)g(y)n(ou)f(will)i(b)r(e)f(prom)n(ted)g(ab)r(out)g
(whic)n(h)g(sc)n(heduler)358 4068 y(to)c(use)h(again.)35
b(I)25 b(b)r(eleiv)n(e)g(our)f(is)h(option)g(4)f(but)i(pic)n(k)e(the)i
(n)n(um)n(b)r(er)f(that)g(is)g(next)g(to)g(the)g(sstf)g(option.)36
b(The)358 4168 y(b)r(o)r(oting)22 b(will)h(con)n(tin)n(ue)f(after)h
(this)g(and)f(ev)n(en)n(tually)g(y)n(ou)g(will)h(see)f(our)g(prin)n(t)h
(statemen)n(ts)f(ab)r(out)h(requests)358 4267 y(b)r(eing)28
b(added)g(and)h(dispatc)n(hed.)39 b(Y)-7 b(ou)28 b(should)h(evtually)f
(see)g(a)g(login)g(prom)n(t)g(but)h(y)n(ou)e(ma)n(y)h(also)f(miss)i(it)
358 4367 y(from)c(all)h(of)g(the)h(prin)n(t)f(statemen)n(ts.)36
b(W)-7 b(ait)26 b(a)g(few)g(seconds)f(and)h(then)h(ev)n(en)n(tually)e
(the)h(prin)n(t)g(statemen)n(ts)358 4467 y(will)j(stop.)43
b(t)n(yp)r(e)30 b(ro)r(ot)f(to)h(login)f(and)g(y)n(ou)g(will)h(b)r
(egin)g(to)g(see)f(more)g(prin)n(t)g(statemen)n(t.)44
b(Y)-7 b(ou)29 b(will)h(notice)358 4566 y(that)24 b(some)g(will)h(ha)n
(v)n(e)f(\014rst)g(request)g(added)g(and)h(then)g(immidiatley)g(see)f
(a)g(statemet)h(ab)r(out)g(the)g(request)358 4666 y(b)r(eing)i(dispatc)
n(hed.)37 b(Y)-7 b(ou)27 b(will)h(then)f(see)g(p)r(oin)n(ts)h(at)f
(whic)n(h)g(m)n(ultiple)h(requests)f(are)f(added)h(and)h(then)f(see)358
4765 y(that)d(our)f(sc)n(heduler)f(is)i(in)g(fact)g(mo)n(ving)f(forw)n
(ard)f(and)h(bac)n(kw)n(ard.)34 b(and)23 b(ev)n(en)n(tually)g(the)h
(statemen)n(ts)g(will)358 4865 y(stop)h(coming)h(and)g(y)n(ou)f(can)g
(then)i(lo)r(ok)e(and)h(see)g(that)g(our)f(sc)n(hedular)g(is)h(w)n
(orking)e(as)i(w)n(e)f(had)h(w)n(an)n(ted)g(it)358 4965
y(to)h(b)n(y)g(examining)g(the)h(previous)f(statemen)n(ts)g(that)h(w)n
(ere)f(outputted)h(to)g(the)g(terminal.)p 0 TeXcolorgray
1929 5349 a(3)p 0 TeXcolorgray eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 142 -316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 150 0 a 0 TeXcolorgray
210 83 a Fd(10.)p 0 TeXcolorgray 41 w(step)28 b(10:)74
b(T)-7 b(o)28 b(sh)n(utdo)n(wn)f(the)i(vm)f(y)n(ou)f(simply)h(need)g
(to)g(t)n(yp)r(e)g(reb)r(o)r(ot)g(and)f(press)h(en)n(ter.)37
b(Once)28 b(the)g(vm)358 183 y(has)d(sh)n(ut)h(do)n(wn)f(y)n(ou)g(can)g
(then)h(exit)g(gdb)g(b)n(y)f(t)n(yping)h(quit)g(in)n(to)f(the)h
(terminal)g(that)g(y)n(ou)f(ha)n(v)n(e)f(gdb)i(op)r(en)358
282 y(in.)p 0 TeXcolorgray 1929 5349 a(4)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
