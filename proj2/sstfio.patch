diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..164d503 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,6 +2,13 @@ if BLOCK
 
 menu "IO Schedulers"
 
+config IOSCHED_SSTF
+	bool "SSTF SCHEDULER"
+	default y
+	---help---
+	  SSTF Scheduler
+
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -13,7 +20,7 @@ config IOSCHED_NOOP
 	  the kernel.
 
 config IOSCHED_DEADLINE
-	tristate "Deadline I/O scheduler"
+	bool "Deadline I/O scheduler"
 	default y
 	---help---
 	  The deadline I/O scheduler is simple and compact. It will provide
@@ -22,7 +29,7 @@ config IOSCHED_DEADLINE
 	  in case of expiry.
 
 config IOSCHED_CFQ
-	tristate "CFQ I/O scheduler"
+	bool "CFQ I/O scheduler"
 	default y
 	---help---
 	  The CFQ I/O scheduler tries to distribute bandwidth equally
@@ -41,7 +48,7 @@ config CFQ_GROUP_IOSCHED
 
 choice
 	prompt "Default I/O scheduler"
-	default DEFAULT_CFQ
+	default DEFAULT_SSTF
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.
@@ -53,7 +60,10 @@ choice
 		bool "CFQ" if IOSCHED_CFQ=y
 
 	config DEFAULT_NOOP
-		bool "No-op"
+		bool "No-op" if IOSCHED_NOOP=y
+
+	config DEFAULT_SSTF
+		bool "SSTF" if IOSCHED_SSTF=y
 
 endchoice
 
@@ -62,6 +72,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 00ecc97..47677ca 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
 obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..a93eb96
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,170 @@
+/*
+ * sstf look elevator
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+	struct list_head queue;
+	sector_t pos;
+	int d;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+//walks through request queue in both directions adding requests to dispatch queue in order
+//adds to dispatch queue via insertion sort
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *nrq, *prq, *rq;
+		nrq = list_entry(nd->queue.next, struct request, queuelist);
+		prq = list_entry(nd->queue.prev, struct request, queuelist);
+
+		if(nrq == prq){
+			rq = nrq;
+		}
+		else{
+			if(nd->d == 1){
+				if(nrq->__sector > nd->pos){
+					rq=nrq;
+				}
+				else{
+					nd->d = 0;
+					printk("Now moving backward\n");
+					rq = prq;
+				}
+			}
+			else{
+				if(prq->__sector < nd->pos){
+					rq = prq;
+				}
+				else{
+					nd->d = 1;
+					printk("Now moving forward\n");
+					rq = nrq;
+				}
+			}
+		}
+		list_del_init(&rq->queuelist);
+		nd->pos = blk_rq_pos(rq) + blk_rq_sectors(rq);
+		elv_dispatch_sort(q,rq);
+		printk(" request dispatched\n");
+		return 1;
+	}
+	return 0;
+}
+//modified to add requests using an insertion sort based on request position
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+	struct request *nrq, *prq;
+	 if(list_empty(&nd->queue)){
+		list_add(&rq->queuelist, &nd->queue);
+		printk("first request added\n");
+	 }
+	 else{
+		nrq = list_entry(nd->queue.next, struct request, queuelist);
+		prq = list_entry(nd->queue.prev, struct request, queuelist);
+
+		while(blk_rq_pos(rq) > blk_rq_pos(nrq)){
+			nrq = list_entry(nrq->queuelist.next, struct request, queuelist);
+			prq = list_entry(prq->queuelist.prev, struct request, queuelist);
+		}
+		list_add(&rq->queuelist, &prq->queuelist);
+		printk("request added\n");
+	 }
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Shawn Cross, Ryan Crane");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Look IO scheduler");
